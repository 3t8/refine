<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>refine Blog</title>
        <link>https://refine.dev/blog</link>
        <description>refine Blog</description>
        <lastBuildDate>Mon, 02 May 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <copyright>Copyright Â© 2022 refine.</copyright>
        <item>
            <title><![CDATA[10 High-Quality Free Resources That Will Make Every Web Developer's Life Easier]]></title>
            <link>https://refine.dev/blog/10-high-quality-free-resources</link>
            <guid>10-high-quality-free-resources</guid>
            <pubDate>Mon, 02 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[We will examine the resources that will make our job easier when making a website.]]></description>
        </item>
        <item>
            <title><![CDATA[How to Multipart File Upload Using FormData with React Hook Form]]></title>
            <link>https://refine.dev/blog/how-to-multipart-file-upload-with-react-hook-form</link>
            <guid>how-to-multipart-file-upload-with-react-hook-form</guid>
            <pubDate>Tue, 29 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this guide, I'm going to show you how to multipart files upload with using React Hook Form]]></description>
        </item>
        <item>
            <title><![CDATA[We are going back to 1995! The perfect harmony of Modern stack and Win95]]></title>
            <link>https://refine.dev/blog/awesome-react-windows95-ui-with-refine</link>
            <guid>awesome-react-windows95-ui-with-refine</guid>
            <pubDate>Tue, 22 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using refine and React95 UI.]]></description>
        </item>
        <item>
            <title><![CDATA[ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application]]></title>
            <link>https://refine.dev/blog/best-internal-tool-react-frameworks</link>
            <guid>best-internal-tool-react-frameworks</guid>
            <pubDate>Wed, 16 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[We have listed Open source ReactJS frameworks that will help and speed you up while developing internal-tool applications.]]></description>
        </item>
        <item>
            <title><![CDATA[Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II]]></title>
            <link>https://refine.dev/blog/refine-invoice-generator</link>
            <guid>refine-invoice-generator</guid>
            <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.]]></description>
        </item>
        <item>
            <title><![CDATA[Develop your Own Customizable Invoice Generator with Refine and Strapi | Part I]]></title>
            <link>https://refine.dev/blog/refine-react-admin-invoice-genarator</link>
            <guid>refine-react-admin-invoice-genarator</guid>
            <pubDate>Tue, 22 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.]]></description>
        </item>
        <item>
            <title><![CDATA[How to Become A Production Hero as Developer with Refine in 2022]]></title>
            <link>https://refine.dev/blog/how-to-become-a-production-hero-refine-2022</link>
            <guid>how-to-become-a-production-hero-refine-2022</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Focus on your production, Everything you need is in Refine.]]></description>
            <content:encoded><![CDATA[<p>With 2022, a new future in our careers as software developers. We will meet new technologies this year and continue to pursue innovations as before.</p><h3>Production Oriented Approach ðŸ§°</h3><p><code>{ Production }</code></p><p>Developing is often a real challenge. It is necessary to follow the innovations and use all these in the right place at the right time and again in the right way. Sometimes all these prevent us from producing or slow down our production process. It is our responsibility to ensure that technology serves us in a development environment where we prioritize production.</p><h3>Is speed everything?</h3><p>So is speed exactly everything?</p><p>3 main components affect production in traditional production methods.</p><p>Speed ðŸ’¨
QualityðŸ‘Œ
Time âŒ›</p><p>Can you imagine what a development environment would be like where we provided all 3 components at the same time?</p><h3>Briefly Refine</h3><p>A React-based <u>headless</u> framework for building internal tools, rapidly.</p><h4>What gives us Refine?</h4><p>The word headless is underlined above. So Refine drop you into UI heaven, meanwhile, you can also use Antd library support.</p><h4>Routing</h4><ul><li>React Router</li><li>React Location</li><li>Next.js Router</li></ul><h4>Data Provider</h4><ul><li>Rest API</li><li>GraphQL</li><li>NestJs CRUD</li><li>Airtable</li><li>Strapi</li><li>Strapi v4</li><li>Strapi GraphQL</li><li>Supabase</li><li>Hasura</li><li>Nhost</li><li>Appwrite</li><li>Firebase</li><li>Directus</li><li>Altogic</li></ul><h4>State Management</h4><p>Refine uses React Query for all state management processes.</p><h4>Authentication &amp; Authorization</h4><p>Authentication and authorization processes are performed with the auth provider.</p><h4>i18n</h4><p>Internationalization...</p><p>Yes, of course.Both for React and Next.</p><h4>Realtime</h4><p>Realtime support to your app via liveProvider, there&#x27;s even an <a href="https://refine.dev/docs/examples/live-provider/ably/">example</a> made for you with Ably.</p><h3>What makes Refine Unique?</h3><p>Refine stands out with its wide <em><strong>routing</strong></em>, <strong><em>access control</em></strong> options, supporting the ability to use <em><strong>any UI Framework</strong></em> and <strong><em>NextJS SSR</em></strong> support when compared to  React Admin, retool, adminBro.</p><h3>Look at your productivity without worrying about is everything on the way</h3><p>As you can see, you can find all the support you need to develop a data-intensive application in Refine. The best part is Refine is open-source. All you have to do is focus on your idea and project and experience the confidence of developing with React-based Refine.</p><p>If you want to take a closer look at <a href="https://refine.dev/">Refine</a></p><p>If you say you don&#x27;t want to be alone while developing a product, the community is ready to meet you. Click for the <a href="https://discord.com/invite/UuU3XCc3J5">Discord link</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Build internal tools using Low-Code with Refine, React-based framework]]></title>
            <link>https://refine.dev/blog/build-internal-tools-using-low-code-with-refine</link>
            <guid>build-internal-tools-using-low-code-with-refine</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Why you should be using low-code app Refine to build internal tools? Learn how to build low-code apps using Refine, React and Ant Design.]]></description>
            <content:encoded><![CDATA[<p>When it comes to creating internal tools, low-code platforms are the way to go. With Refine, a React-based low-code platform, you can quickly build data-intensive applications without having to worry about scalability or ease of use. Other low-code platforms may allow you to develop your applications, but they are often limited in terms of flexibility and customizability. With Refine, you have full control over your application and can add any business logic that you need. So if you&#x27;re looking for a platform that will let you build internal tools quickly and easily, Refine is the right choice!</p><h2>What is Refine?</h2><p>Refine is a React-based framework that allows you to build data-intensive applications quickly and with ease. Rapid development and headless at the same time how is it? Well, Refine supports <a href="https://ant.design">Ant Design</a> for quick and easy solutions. In addition, it allows you to use your design system, or to integrate with other popular design frameworks.</p><p>Refer to the <a href="https://refine.dev">Refine</a> for more information.</p><h2>Why you should use Refine?</h2><ul><li>It is Open Source under the MIT license.</li><li>Easy to use and it is easy to learn. There are many examples to help you get started, as well as documentation.</li><li>Is a framework that does not require you to use any UI libraries or frameworks.</li><li>Supports Ant Design for quick and easy solutions.</li><li>Backend agnostic, so you can connect to any backend you want.</li><li>Customizable, which means you can change it to fit your needs.</li><li>Refine is fully compatible with server side rendering with <a href="https://nextjs.org">Next.js</a>.</li></ul><h2>Features of Refine</h2><p>Some of the main features of Refine are:</p><ul><li>Data fetching and state management</li><li>Routings</li><li>Authentication</li><li>Authorization</li><li>Internationalization</li><li>Real-time</li><li>Mutation modes with optimistic and pessimistic and undoadable modes</li></ul><h2>How does Refine work?</h2><p>Refine is completely agnostic; just wrap your application with the Refine component and pass the property you need. For example, it takes properties such as <code>dataProvider</code> to communicate with the API and <code>authProvider</code> to authentication. Then you have hooks that you can use throughout the whole application. These hooks are compatible with <a href="https://react-query.tanstack.com">React Query</a>.</p><p>To understand how Refine works, let&#x27;s explore the following titles:</p><h2>Communicate with the API</h2><p>The <code>dataProvider</code> allows communication with the API. All the data fetching and mutations are done through this property.</p><p>A data provider must have the following properties:</p><pre><code class="language-tsx">const dataProvider = {
    create: ({ resource, variables, metaData }) =&gt; Promise,
    createMany: ({ resource, variables, metaData }) =&gt; Promise,
    deleteOne: ({ resource, id, metaData }) =&gt; Promise,
    deleteMany: ({ resource, ids, metaData }) =&gt; Promise,
    getList: ({ resource, pagination, sort, filters, metaData }) =&gt; Promise,
    getMany: ({ resource, ids, metaData }) =&gt; Promise,
    getOne: ({ resource, id, metaData }) =&gt; Promise,
    update: ({ resource, id, variables, metaData }) =&gt; Promise,
    updateMany: ({ resource, ids, variables, metaData }) =&gt; Promise,
};
</code></pre><p>Refine offers hooks to help you with data fetching and mutations using the data provider&#x27;s properties. For example, when you use the <code>useTable</code> or <code>useList</code> hook, it will call the <code>getList</code> method underneath the hood.</p><p>Refer to the <a href="https://refine.dev/docs/ui-frameworks/antd/hooks/table/useTable/"><code>useTable</code></a> and <a href="https://refine.dev/docs/core/hooks/data/useCreate/">data hooks</a> for more information.</p><p>For example, let&#x27;s look at what happens when <code>useTable</code> is called.</p><pre><code class="language-tsx">import { List, Table, TextField, useTable } from &quot;@pankod/refine-antd&quot;;

interface IPost {
    id: string;
    title: string;
    content: string;
    status: &quot;published&quot; | &quot;draft&quot; | &quot;rejected&quot;;
}

export const PostList: React.FC = () =&gt; {
    const { tableProps } = useTable({
        resource: &quot;posts&quot;,
        initialSorter: [
            {
                field: &quot;title&quot;,
                order: &quot;asc&quot;,
            },
        ],
        initialFilter: [
            {
                field: &quot;status&quot;,
                operator: &quot;eq&quot;,
                value: &quot;draft&quot;,
            },
        ],
    });

    return (
        &lt;List&gt;
            &lt;Table {...tableProps} rowKey=&quot;id&quot;&gt;
                &lt;Table.Column dataIndex=&quot;id&quot; title=&quot;ID&quot; /&gt;
                &lt;Table.Column dataIndex=&quot;title&quot; title=&quot;Title&quot; /&gt;
                &lt;Table.Column dataIndex=&quot;content&quot; title=&quot;Content&quot; /&gt;
            &lt;/Table&gt;
        &lt;/List&gt;
    );
};
</code></pre><p>The <code>useTable</code> in the example calls the <code>getList</code> method of the data provider with the following properties:</p><pre><code class="language-ts">getList({
    resource: &quot;posts&quot;,
    pagination: {
        page: 1,
        perPage: 10,
    },
    sort: [
        {
            field: &quot;title&quot;,
            order: &quot;asc&quot;,
        },
    ],
    filters: [
        {
            field: &quot;status&quot;,
            operator: &quot;eq&quot;,
            value: &quot;draft&quot;,
        },
    ],
});
</code></pre><p>With <code>metaData</code> you can pass any parameters that you need to the data provider. You can handle it in the data provider.</p><p>All hooks that use data provider methods such as <code>useTable</code> work with <a href="https://react-query.tanstack.com">React Query</a>. So you can use all the features of React Query.</p><p>Refer to the <a href="https://refine.dev/docs/core/providers/data-provider"><code>dataProvider</code></a> for more information.</p><h3>Out-of-the-box data providers</h3><p>Refine includes many out-of-the-box data providers to use in your projects like:</p><ul><li><a href="https://github.com/pankod/refine/tree/master/packages/simple-rest">Simple REST API</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/graphql">GraphQL</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/nestjsx-crud">NestJS CRUD</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/airtable">Airtable</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/strapi">Strapi</a> - <a href="https://github.com/pankod/refine/tree/master/packages/strapi-v4">Strapi v4</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/strapi-graphql">Strapi GraphQL</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/supabase">Supabase</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/hasura">Hasura</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/nhost">Nhost</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/appwrite">Appwrite</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/altogic">Altogic</a></li></ul><h2>Add routing to the application</h2><p>Refine needs some router functions to create resource pages, navigation, and so on. It uses the <code>routerProvider</code> property to pass the router functions to Refine. In this way, it allows you to use any router library that you want.</p><p>If you don&#x27;t need any customization in your router, we not recommend making this provider. Instead, try <code>nextjs-router</code> for your Next.js project and <code>react-router</code> or <code>react-location</code> for your React project.</p><p>Refer to the <a href="https://refine.dev/docs/core/providers/router-provider"><code>routerProvider</code></a> for more information.</p><h3>Out-of-the-box router providers</h3><p>Refine includes many out-of-the-box data providers to use in your projects like:</p><ul><li><a href="https://github.com/pankod/refine/tree/master/packages/react-router">React Router</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/react-location">React Location</a></li><li><a href="https://github.com/pankod/refine/tree/master/packages/nextjs-router">Next.js Router</a></li></ul><h2>Create pages via <code>resources</code></h2><p>The main building blocks of a Refine app are <code>resources</code>. A resource is an entity in the API&#x27;s endpoint (e.g., <a href="https://api.fake-rest.refine.dev/posts">https://api.fake-rest.refine.dev/posts</a>). It connects data from the API with page components, allowing pages to access data from the API.</p><pre><code class="language-tsx">import { Refine } from &quot;@pankod/refine-core&quot;;
import dataProvider from &quot;@pankod/refine-json-server&quot;;
import &quot;@pankod/refine-antd/dist/styles.min.css&quot;;

import { PostList, PostCreate, PostEdit, PostShow } from &quot;pages/posts&quot;;

const App: React.FC = () =&gt; {
    return (
        &lt;Refine
            dataProvider={dataProvider(&quot;https://api.fake-rest.refine.dev&quot;)}
            resources={[
                {
                    name: &quot;posts&quot;,
                    list: PostList,
                    create: PostCreate,
                    edit: PostEdit,
                    show: PostShow,
                },
            ]}
        /&gt;
    );
};

export default App;
</code></pre><p>Each resource component is assigned a route by Refine. The <code>/posts</code> route, for example, displays the list page of the <code>posts</code> resource, which is implemented using the <code>PostList</code> component. The <code>PostCreate</code> component is the create page of the <code>posts</code> resource and it is rendered by the <code>/posts/create</code> route. The <code>PostEdit</code> component is the edit page of the <code>posts</code> resource and it is rendered by the <code>/posts/edit/:id</code> route. The <code>PostShow</code> component is the show page of the <code>posts</code> resource and it is rendered by the <code>/posts/show/:id</code> route.</p><p>Refine hooks used in these pages read some values from the route by default. For example, <code>useForm</code> hook takes the <code>resource</code>, <code>action</code>, and <code>id</code> from the route by default.</p><h2>Authentication</h2><p>The <code>authProvider</code> allows you to add authentication your application. You can use any authentication library that you want. All your authentication logic is managed with this <code>authProvider</code>.</p><p>A auth provider must have the following properties:</p><pre><code class="language-tsx">const authProvider = {
    login: () =&gt; Promise,
    logout: () =&gt; Promise,
    checkAuth: () =&gt; Promise,
    checkError: () =&gt; Promise,
    getPermissions: () =&gt; Promise,
    getUserIdentity: () =&gt; Promise,
};
</code></pre><p>Refine uses these methods via <a href="https://refine.dev/docs/core/hooks/auth/useLogin/">authorization hooks</a>. Authentication and authorization procedures such as login, logout, checking user credentials, and catching HTTP errors are all handled using authorization hooks. For example, <code>checkAuth</code>is called when the user tries to access a page that requires authentication.</p><p>Refer to the <a href="https://refine.dev/docs/core/providers/auth-provider"><code>authProvider</code></a> for more information.</p><h3>Out-of-the-box router providers</h3><ul><li>Auth0 - <a href="https://github.com/pankod/refine/tree/master/examples/authProvider/auth0/">Source Code</a> - <a href="https://refine.dev/docs/examples/auth-provider/auth0">Demo</a></li><li>Google - <a href="https://github.com/pankod/refine/tree/master/examples/authProvider/googleLogin">Source Code</a> - <a href="https://refine.dev/docs/examples/auth-provider/google-auth">Demo</a></li><li>OTP Login - <a href="https://github.com/pankod/refine/tree/master/examples/authProvider/otpLogin">Source Code</a> - <a href="https://refine.dev/docs/examples/auth-provider/otpLogin">Demo</a></li></ul><h2>Authorization</h2><p>Refine provides <code>accessControlProvider</code> that you can use to control who has access to what in your app. You can use any access control library that you want. In addition, you can choose the access control models that work best for you (RBAC, ABAC, ACL, etc.).</p><p>An <code>accessControlProvider</code> must have one async method called <code>can</code> to check if the person asking for access is allowed to have it.</p><pre><code class="language-tsx">type CanParams = {
    resource: string;
    action: string;
    params?: any;
};

type CanReturnType = {
    can: boolean;
    reason?: string;
}

const accessControlProvider = {
    can: ({ resource, action, params }: CanParams) =&gt; Promise&lt;CanReturnType&gt;;
}
</code></pre><p><a href="https://refine.dev/docs/core/hooks/accessControl/useCan"><code>useCan</code></a> and <a href="https://refine.dev/docs/core/components/accessControl/can-access/"><code>&lt;CanAccess&gt;</code></a> component use this method to check if the user is allowed to access.</p><p>For example, we can stop non-admin users from editing the post resource.</p><pre><code class="language-tsx">const App: React.FC = () =&gt; {
    &lt;Refine
        accessControlProvider={{
            can: async ({ resource, action, params }) =&gt; {
                if (resource === &quot;posts&quot; &amp;&amp; action === &quot;edit&quot;) {
                    const userRole = getUserRole();

                    if (userRole === &quot;admin&quot;) {
                        return { can: true };
                    }

                    return Promise.resolve({
                        can: false,
                        reason: &quot;Unauthorized&quot;,
                    });
                }

                return Promise.resolve({ can: true });
            },
        }}
    /&gt;;
};
</code></pre><p>Refer to the <a href="https://refine.dev/docs/core/providers/accessControl-provider"><code>accessControlProvider</code></a> for more information.</p><h3>Out-of-the-box access control providers</h3><ul><li>Casbin - <a href="https://github.com/pankod/refine/tree/master/examples/accessControl/casbin">Source Code</a> - <a href="https://codesandbox.io/s/access-control-casbin-react-l06vy">Demo</a></li><li>Cerbos - <a href="https://github.com/pankod/refine/tree/master/examples/accessControl/cerbos">Source Code</a> - <a href="https://codesandbox.io/s/access-control-cerbos-react-mbhei">Demo</a></li></ul><h2>Internationalization</h2><p>The <code>i18nProvider</code> is used to give localization features to your application. This will allow you to change the text in your application to different languages.</p><p>An i18n provider must have the following properties:</p><pre><code class="language-ts">const i18nProvider = {
    translate: (key: string, params: object) =&gt; string,
    changeLocale: (lang: string) =&gt; Promise,
    getLocale: () =&gt; string,
};
</code></pre><p>Refine uses these methods via <a href="https://refine.dev/docs/core/hooks/translate/useTranslate/">translation hooks</a>.</p><p>Refer to <a href="https://refine.dev/docs/core/providers/i18n-provider">Refine i18nProvider</a> for more details and how to use the <a href="https://react.i18next.com">react-i18next</a> package.</p><h2>Real-time support</h2><p>The <code>liveProvider</code> is used to add real-time support to your application. You can use any real-time library or tool that you want.</p><p>A live provider must have the following properties:</p><pre><code class="language-tsx">const liveProvider = {
    subscribe: ({ channel, params: { ids }, types, callback }) =&gt; any,
    unsubscribe: (subscription) =&gt; void,
    publish?: (event) =&gt; void,
};
</code></pre><p>Refine data hooks are subscribed to using the subscribe method given with the live provider. The subscribe method returns a subscription object that can be used to unsubscribe. The unsubscribe method is used to unsubscribe from the subscription. The publish method is used to publish an event to the channel on the client side.</p><p>If you send an event after the relevant operations on the server, Refine will invalidate the related queries. If the <code>liveMode</code> is <code>manual</code>, queries of related resources are not invalidated in real-time; instead <code>onLiveEvent</code> is run with the event as new events from the subscription arrive.</p><h3>Out-of-the-box access control providers</h3><ul><li>Ably - <a href="https://github.com/pankod/refine/blob/master/packages/ably/src/index.ts">Source Code</a> - <a href="https://codesandbox.io/s/refine-ably-example-9swpp">Demo</a></li><li>Supabase - <a href="https://github.com/pankod/refine/blob/master/packages/supabase/src/index.ts#L187">Source Code</a></li><li>Appwrite - <a href="https://github.com/pankod/refine/blob/master/packages/appwrite/src/index.ts#L252">Source Code</a></li></ul><h2>Other features of Refine</h2><h3><code>notificationProvider</code></h3><p>The <code>notificationProvider</code> is used to display notifications to the user when mutations are performed. You can use any notification library that you want.</p><h3><code>mutationMode</code></h3><p>The <code>mutationMode</code> is used to determine how to handle mutations. You can use <code>pessimistic</code> <code>optimistic</code> or <code>undoable</code> mode. When using the pessimistic mode, UI updates are delayed until the mutation is confirmed by the server. When using the optimistic mode, UI updates are immediately updated. When using the undoable mode, UI updates are immediately updated, but you can undo the mutation.</p><h3><code>syncWithLocation</code></h3><p>If <code>syncWithLocation</code> is turned on, the list of query parameters may be modified manually by editing directly in the URL.</p><pre><code>/posts?current=1&amp;pageSize=8&amp;sort[]=createdAt&amp;order[]=desc
</code></pre><br/><p>Check out all of Refine&#x27;s <a href="https://refine.dev/docs/core/components/refine-config">features</a> for more information.</p><h2>Conclusion</h2><p>If you&#x27;re looking for a way to quickly and easily create an internal tool without sacrificing customization, Refine is worth checking out. It allows you to choose any library that you want for your requirements. Plus, if you need help or have feedback, the team at Refine is responsive and happy to help out. Give <a href="https://github.com/pankod/refine">Refine</a> a star on GitHub if you like it - your support will help us continue making this tool amazing!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.]]></title>
            <link>https://refine.dev/blog/how-to-access-control-with-nestjs</link>
            <guid>how-to-access-control-with-nestjs</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Build authorization ready admin panel with NestJS.]]></description>
            <content:encoded><![CDATA[<p>In the <a href="https://refine.dev/blog/customizable-admin-panel-with-nestjs">previous blog post</a>, we used <a href="https://nestjs.com">nestjs</a> with an api and <a href="https://refine.dev">refine</a> in the admin panel. In this blog, let&#x27;s add <strong>authorization</strong> to both api and admin panel.</p><p><strong>All the steps described are in this <a href="https://github.com/pankod/refine-hackathon/tree/main/job-posting-app">repo</a>.</strong></p><h2>Intro</h2><p>In the <a href="https://dev.to/pankod/build-fast-and-customizable-admin-panel-with-nestjs-291">previous blog post</a>, we used <a href="https://nestjs.com">nestjs</a> with an api and <a href="https://refine.dev">refine</a> in the admin panel. In this blog, let&#x27;s add <strong>authorization</strong> to both api and admin panel.</p><h2>Scenario</h2><p>Let&#x27;s have two roles in this system, they are <code>admin</code> and <code>editor</code>. In the API we prepared, we had two crud processes that we categorized as <code>companies</code> and <code>jobs</code>.</p><p>In this scenario; <code>editor</code> can only list companies, not any deletion or additions. Have the authority to list and create job postings. Let <code>admin</code> have authorization for all transactions.</p><h2>Authorization</h2><p>I used <a href="https://github.com/nestjsx/crud">nestjsx-crud</a> in the api we prepared. This library makes <code>CRUD</code> operations very easy. However, there is no support on the authorization side. That&#x27;s why I made use of the <a href="https://github.com/onury/accesscontrol">accesscontrol</a> library, which can be easily integrated with both <code>nestjs</code> and <code>refine</code>. </p><h2>Using AccessControl in API</h2><p>In the first step, let&#x27;s install <a href="https://github.com/nestjsx/nest-access-control">nestjs-access-control</a> in our project for <code>accesscontrol</code> integration to the api.</p><pre><code>npm install nest-access-control
</code></pre><p>I&#x27;m specifying a role as the <code>AccessControl</code> supports. According to our scenario, this should be as follows:</p><pre><code class="language-ts">// app.roles.ts

import { RolesBuilder } from &#x27;nest-access-control&#x27;;

export enum AppRoles {
  ADMIN = &#x27;ADMIN&#x27;,
  EDITOR = &#x27;EDITOR&#x27;,
}

export const roles: RolesBuilder = new RolesBuilder();

roles
  // editor
  .grant(AppRoles.EDITOR)
  .create(&#x27;jobs&#x27;)
  .update(&#x27;jobs&#x27;)
  // admin
  .grant(AppRoles.ADMIN)
  .extend(AppRoles.EDITOR)
  .create([&#x27;companies&#x27;])
  .update([&#x27;companies&#x27;])
  .delete([&#x27;companies&#x27;, &#x27;jobs&#x27;]);
</code></pre><p>Now I import <code>AccessControlModule</code>.</p><pre><code class="language-ts">  // app.module.ts

  import { roles } from &#x27;./app.roles&#x27;;

    @Module({
      imports: [
        ...
        AccessControlModule.forRoles(roles)
      ],
      controllers: [...],
      providers: [...],
    })
    export class AppModule {}
</code></pre><p>After determining the roles and privileges, we add the <code>ACGuard</code> class to the controller <code>UseGuards</code>.</p><pre><code class="language-ts">import { ACGuard } from &#x27;nest-access-control&#x27;;

...
@UseGuards(JwtAuthGuard, ACGuard)
@Controller(&#x27;companies&#x27;)
export class CompanyController implements CrudController&lt;CompanyEntity&gt; {}
...
</code></pre><p>Now we define resource and action for methods using <code>UseRoles</code> decorator. For example, we <strong>override</strong> for the <code>companies</code> resource and the <code>create</code> action as follows.</p><pre><code class="language-ts">import { ACGuard, UseRoles } from &#x27;nest-access-control&#x27;;

...
@UseGuards(JwtAuthGuard, ACGuard)
@Controller(&#x27;companies&#x27;)
export class CompanyController implements CrudController&lt;CompanyEntity&gt; {
  constructor(public service: CompanyService) {}

  get base(): CrudController&lt;CompanyEntity&gt; {
    return this;
  }

  @Override()
  @UseRoles({
    resource: &#x27;companies&#x27;,
    action: &#x27;create&#x27;,
  })
  createOne(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: CompanyCreateDto,
  ) {
    return this.base.createOneBase(req, &lt;CompanyEntity&gt;dto);
  }
...
</code></pre><p>Similarly, we add this decorator for other methods.</p><p>After these operations, we complete the authorization process on the API side. Now we will do the authorization to the admin panel that we created with <code>refine</code>.</p><h2>Using AccessControl in refine (dashboard)</h2><p>refine; It supports many authorization tools, very flexible. What we need to do; Defining an <code>accessControlProvider</code> inside the <code>&lt;Refine /&gt;</code> component.</p><p><code>accessControlProvider</code> is implemented only one asynchronous method named &quot;can&quot; to be used to control whether the requested access is granted. This method takes <code>resource</code> and <code>action</code> with parameters.</p><pre><code class="language-tsx">// App.tsx

&lt;Refine
  ...
  accessControlProvider={{
    can: async ({ resource, action }) =&gt; {
      let can: boolean = false;
      const stringifyUser = localStorage.getItem(&#x27;refine-user&#x27;);
      if (stringifyUser) {
        const { roles } = JSON.parse(stringifyUser);

        roles.forEach((role: string) =&gt; {
          switch (action) {
            case &#x27;list&#x27;:
            case &#x27;show&#x27;:
              can = ac.can(role).read(resource).granted;
              break;
            case &#x27;create&#x27;:
              can = ac.can(role).create(resource).granted;
              break;
            case &#x27;edit&#x27;:
              can = ac.can(role).update(resource).granted;
              break;
            case &#x27;delete&#x27;:
              can = ac.can(role).delete(resource).granted;
              break;
          }
        });
      }
      return Promise.resolve({ can });
    },
  }}
/&gt;****
</code></pre><p>Now let me explain a little bit of this code I wrote. First we need the role of the logged in user. We saved it to local storage during login.
Then we match the refine <code>actions</code> with the accessControl&#x27;s actions and check its authorization with the <code>granted</code> method. I also resolve the returned result.</p><h2>Conclusion</h2><p>As a result, we have done the authorization on both the ui (dashboard) side and the api side.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Create Full Featured Admin Panel with React and Ant Design]]></title>
            <link>https://refine.dev/blog/refine-react-ant-design-admin-panel-framework</link>
            <guid>refine-react-ant-design-admin-panel-framework</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.]]></description>
        </item>
        <item>
            <title><![CDATA[Top React JS Frameworks Every Developer Should Know]]></title>
            <link>https://refine.dev/blog/best-react-frameworks</link>
            <guid>best-react-frameworks</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[We will compare the features of refine and react-admin]]></description>
        </item>
        <item>
            <title><![CDATA[Next.js E-commerce App with Strapi and Chakra UI]]></title>
            <link>https://refine.dev/blog/handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui</link>
            <guid>handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui</guid>
            <pubDate>Mon, 14 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn the power of Refine for e-commerce with this quick & easy example. This step-by-step Refine SPA tutorial will get you started in no time.]]></description>
        </item>
        <item>
            <title><![CDATA[Implementing Dark Mode In Ant Design Using gulp]]></title>
            <link>https://refine.dev/blog/how-to-add-darkmode-in-ant-design</link>
            <guid>how-to-add-darkmode-in-ant-design</guid>
            <pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this article, weâ€™ll learn how to efficiently implement dark mode in a Refine/Ant Design app, using gulp library and leveraging some React features like hooks]]></description>
        </item>
        <item>
            <title><![CDATA[How to Import CSV File with React]]></title>
            <link>https://refine.dev/blog/how-to-import-csv</link>
            <guid>how-to-import-csv</guid>
            <pubDate>Tue, 18 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this guide, I will show you how to import CSV files using React and JavaScript.]]></description>
        </item>
        <item>
            <title><![CDATA[How to Multipart File Upload Using FormData with HTML]]></title>
            <link>https://refine.dev/blog/how-to-multipart-upload</link>
            <guid>how-to-multipart-upload</guid>
            <pubDate>Mon, 27 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[In this guide, I'm going to show you how to multipart files upload with using HTML and JavaScript]]></description>
        </item>
        <item>
            <title><![CDATA[How to upload files from your HTML form using Base64 encoding]]></title>
            <link>https://refine.dev/blog/how-to-base64-upload</link>
            <guid>how-to-base64-upload</guid>
            <pubDate>Wed, 22 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Uploading files using Base64 encoding is a common practice. In this guide, I'm going to show you how to upload files using base64 encoding]]></description>
        </item>
        <item>
            <title><![CDATA[Web3 with Refine]]></title>
            <link>https://refine.dev/blog/web3-with-refine</link>
            <guid>web3-with-refine</guid>
            <pubDate>Mon, 13 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Sign-in Ethereum with Web3 and Refine]]></description>
        </item>
        <item>
            <title><![CDATA[Refine vs AdminBro - Comparison Admin Panel Framework]]></title>
            <link>https://refine.dev/blog/refine-vs-adminbro</link>
            <guid>refine-vs-adminbro</guid>
            <pubDate>Mon, 29 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Refine vs AdminBro]]></description>
        </item>
        <item>
            <title><![CDATA[Refine vs React-Admin Which is Better for Your Project?]]></title>
            <link>https://refine.dev/blog/refine-vs-react-admin</link>
            <guid>refine-vs-react-admin</guid>
            <pubDate>Fri, 26 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will compare the features of refine and react-admin]]></description>
        </item>
        <item>
            <title><![CDATA[Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase]]></title>
            <link>https://refine.dev/blog/customizable-issue-tracker-with-refine-and-supabase</link>
            <guid>customizable-issue-tracker-with-refine-and-supabase</guid>
            <pubDate>Fri, 12 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.]]></description>
        </item>
        <item>
            <title><![CDATA[Create E-mail Subscription Panel with Refine and Strapi]]></title>
            <link>https://refine.dev/blog/e-mail-subscription-panel-with-refine</link>
            <guid>e-mail-subscription-panel-with-refine</guid>
            <pubDate>Mon, 25 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. Weâ€™ll use refine to develop the frontend easily and strapi for backend solutions.]]></description>
        </item>
        <item>
            <title><![CDATA[Migrating a React-Admin Application to Refine]]></title>
            <link>https://refine.dev/blog/migrating-a-react-admin-application-to-refine</link>
            <guid>migrating-a-react-admin-application-to-refine</guid>
            <pubDate>Wed, 06 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Recently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity.]]></description>
        </item>
        <item>
            <title><![CDATA[Build Fast and Customizable Admin Panel with NestJS]]></title>
            <link>https://refine.dev/blog/customizable-admin-panel-with-nestjs</link>
            <guid>customizable-admin-panel-with-nestjs</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will prepare a simple `job-posting` application. We will also use the refine framework for the admin panel. The project will consist of two parts, api and admin.]]></description>
        </item>
        <item>
            <title><![CDATA[Create a Feedback Admin panel in 15 Minutes with Refine and Strapi]]></title>
            <link>https://refine.dev/blog/create-a-feedback-admin-panel-with-refine-and-strapi</link>
            <guid>create-a-feedback-admin-panel-with-refine-and-strapi</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will quickly create an api with Strapi and then develop its frontend with refine. Thus, let's see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.]]></description>
        </item>
        <item>
            <title><![CDATA[Let's Build an App to Manage Your Hackathons with Refine]]></title>
            <link>https://refine.dev/blog/manage-hackathons-with-refine</link>
            <guid>manage-hackathons-with-refine</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We'll be building a demo app to manage hackathons with refine.]]></description>
        </item>
        <item>
            <title><![CDATA[Simple Web Application Example with Refine]]></title>
            <link>https://refine.dev/blog/simple-web-application-with-refine</link>
            <guid>simple-web-application-with-refine</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Do you want to develop a web application quickly? You are at the right place!]]></description>
        </item>
    </channel>
</rss>