<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>refine Blog</title>
        <link>https://refine.dev/blog</link>
        <description>refine Blog</description>
        <lastBuildDate>Mon, 21 Feb 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <copyright>Copyright © 2022 refine.</copyright>
        <item>
            <title><![CDATA[Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.]]></title>
            <link>https://refine.dev/blog/how-to-access-control-with-nestjs</link>
            <guid>how-to-access-control-with-nestjs</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Build authorization ready admin panel with NestJS.]]></description>
            <content:encoded><![CDATA[<p><strong>All the steps described are in this <a href="https://github.com/pankod/refine-hackathon/tree/main/job-posting-app">repo</a>.</strong></p><h2>Intro</h2><p>In the <a href="https://dev.to/pankod/build-fast-and-customizable-admin-panel-with-nestjs-291">previous blog post</a>, we used <a href="https://nestjs.com">nestjs</a> with an api and <a href="https://refine.dev">refine</a> in the admin panel. In this blog, let&#x27;s add <strong>authorization</strong> to both api and admin panel.</p><h2>Scenario</h2><p>Let&#x27;s have two roles in this system, they are <code>admin</code> and <code>editor</code>. In the API we prepared, we had two crud processes that we categorized as <code>companies</code> and <code>jobs</code>.</p><p>In this scenario; <code>editor</code> can only list companies, not any deletion or additions. Have the authority to list and create job postings. Let <code>admin</code> have authorization for all transactions.</p><h2>Authorization</h2><p>I used <a href="https://github.com/nestjsx/crud">nestjsx-crud</a> in the api we prepared. This library makes <code>CRUD</code> operations very easy. However, there is no support on the authorization side. That&#x27;s why I made use of the <a href="https://github.com/onury/accesscontrol">accesscontrol</a> library, which can be easily integrated with both <code>nestjs</code> and <code>refine</code>. </p><h2>Using AccessControl in API</h2><p>In the first step, let&#x27;s install <a href="https://github.com/nestjsx/nest-access-control">nestjs-access-control</a> in our project for <code>accesscontrol</code> integration to the api.</p><pre><code>npm install nest-access-control
</code></pre><p>I&#x27;m specifying a role as the <code>AccessControl</code> supports. According to our scenario, this should be as follows:</p><pre><code class="language-ts">// app.roles.ts

import { RolesBuilder } from &#x27;nest-access-control&#x27;;

export enum AppRoles {
  ADMIN = &#x27;ADMIN&#x27;,
  EDITOR = &#x27;EDITOR&#x27;,
}

export const roles: RolesBuilder = new RolesBuilder();

roles
  // editor
  .grant(AppRoles.EDITOR)
  .create(&#x27;jobs&#x27;)
  .update(&#x27;jobs&#x27;)
  // admin
  .grant(AppRoles.ADMIN)
  .extend(AppRoles.EDITOR)
  .create([&#x27;companies&#x27;])
  .update([&#x27;companies&#x27;])
  .delete([&#x27;companies&#x27;, &#x27;jobs&#x27;]);
</code></pre><p>Now I import <code>AccessControlModule</code>.</p><pre><code class="language-ts">  // app.module.ts

  import { roles } from &#x27;./app.roles&#x27;;

    @Module({
      imports: [
        ...
        AccessControlModule.forRoles(roles)
      ],
      controllers: [...],
      providers: [...],
    })
    export class AppModule {}
</code></pre><p>After determining the roles and privileges, we add the <code>ACGuard</code> class to the controller <code>UseGuards</code>.</p><pre><code class="language-ts">import { ACGuard } from &#x27;nest-access-control&#x27;;

...
@UseGuards(JwtAuthGuard, ACGuard)
@Controller(&#x27;companies&#x27;)
export class CompanyController implements CrudController&lt;CompanyEntity&gt; {}
...
</code></pre><p>Now we define resource and action for methods using <code>UseRoles</code> decorator. For example, we <strong>override</strong> for the <code>companies</code> resource and the <code>create</code> action as follows.</p><pre><code class="language-ts">import { ACGuard, UseRoles } from &#x27;nest-access-control&#x27;;

...
@UseGuards(JwtAuthGuard, ACGuard)
@Controller(&#x27;companies&#x27;)
export class CompanyController implements CrudController&lt;CompanyEntity&gt; {
  constructor(public service: CompanyService) {}

  get base(): CrudController&lt;CompanyEntity&gt; {
    return this;
  }

  @Override()
  @UseRoles({
    resource: &#x27;companies&#x27;,
    action: &#x27;create&#x27;,
  })
  createOne(
    @ParsedRequest() req: CrudRequest,
    @ParsedBody() dto: CompanyCreateDto,
  ) {
    return this.base.createOneBase(req, &lt;CompanyEntity&gt;dto);
  }
...
</code></pre><p>Similarly, we add this decorator for other methods.</p><p>After these operations, we complete the authorization process on the API side. Now we will do the authorization to the admin panel that we created with <code>refine</code>.</p><h2>Using AccessControl in refine (dashboard)</h2><p>refine; It supports many authorization tools, very flexible. What we need to do; Defining an <code>accessControlProvider</code> inside the <code>&lt;Refine /&gt;</code> component.</p><p><code>accessControlProvider</code> is implemented only one asynchronous method named &quot;can&quot; to be used to control whether the requested access is granted. This method takes <code>resource</code> and <code>action</code> with parameters.</p><pre><code class="language-tsx">// App.tsx

&lt;Refine
  ...
  accessControlProvider={{
    can: async ({ resource, action }) =&gt; {
      let can: boolean = false;
      const stringifyUser = localStorage.getItem(&#x27;refine-user&#x27;);
      if (stringifyUser) {
        const { roles } = JSON.parse(stringifyUser);

        roles.forEach((role: string) =&gt; {
          switch (action) {
            case &#x27;list&#x27;:
            case &#x27;show&#x27;:
              can = ac.can(role).read(resource).granted;
              break;
            case &#x27;create&#x27;:
              can = ac.can(role).create(resource).granted;
              break;
            case &#x27;edit&#x27;:
              can = ac.can(role).update(resource).granted;
              break;
            case &#x27;delete&#x27;:
              can = ac.can(role).delete(resource).granted;
              break;
          }
        });
      }
      return Promise.resolve({ can });
    },
  }}
/&gt;****
</code></pre><p>Now let me explain a little bit of this code I wrote. First we need the role of the logged in user. We saved it to local storage during login.
Then we match the refine <code>actions</code> with the accessControl&#x27;s actions and check its authorization with the <code>granted</code> method. I also resolve the returned result.</p><h2>Conclusion</h2><p>As a result, we have done the authorization on both the ui (dashboard) side and the api side.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Next.js E-commerce App with Strapi and Chakra UI]]></title>
            <link>https://refine.dev/blog/handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui</link>
            <guid>handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui</guid>
            <pubDate>Mon, 14 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn the power of Refine for e-commerce with this quick & easy example. This step-by-step Refine SPA tutorial will get you started in no time.]]></description>
        </item>
        <item>
            <title><![CDATA[Implementing Dark Mode In Ant Design Using gulp]]></title>
            <link>https://refine.dev/blog/how-to-add-darkmode-in-ant-design</link>
            <guid>how-to-add-darkmode-in-ant-design</guid>
            <pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this article, we’ll learn how to efficiently implement dark mode in a Refine/Ant Design app, using gulp library and leveraging some React features like hooks]]></description>
        </item>
        <item>
            <title><![CDATA[How to Import CSV File with React]]></title>
            <link>https://refine.dev/blog/how-to-import-csv</link>
            <guid>how-to-import-csv</guid>
            <pubDate>Tue, 18 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In this guide, I will show you how to import CSV files using React and JavaScript.]]></description>
        </item>
        <item>
            <title><![CDATA[How to Multipart File Upload Using FormData with HTML]]></title>
            <link>https://refine.dev/blog/how-to-multipart-upload</link>
            <guid>how-to-multipart-upload</guid>
            <pubDate>Mon, 27 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[In this guide, I'm going to show you how to multipart files upload with using HTML and JavaScript]]></description>
        </item>
        <item>
            <title><![CDATA[How to upload files from your HTML form using Base64 encoding]]></title>
            <link>https://refine.dev/blog/how-to-base64-upload</link>
            <guid>how-to-base64-upload</guid>
            <pubDate>Wed, 22 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Uploading files using Base64 encoding is a common practice. In this guide, I'm going to show you how to upload files using base64 encoding]]></description>
        </item>
        <item>
            <title><![CDATA[Web3 with Refine]]></title>
            <link>https://refine.dev/blog/web3-with-refine</link>
            <guid>web3-with-refine</guid>
            <pubDate>Mon, 13 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Sign-in Ethereum with Web3 and Refine]]></description>
        </item>
        <item>
            <title><![CDATA[Refine vs AdminBro - Comparison Admin Panel Framework]]></title>
            <link>https://refine.dev/blog/refine-vs-adminbro</link>
            <guid>refine-vs-adminbro</guid>
            <pubDate>Mon, 29 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Refine vs AdminBro]]></description>
        </item>
        <item>
            <title><![CDATA[Refine vs React-Admin Which is Better for Your Project?]]></title>
            <link>https://refine.dev/blog/refine-vs-react-admin</link>
            <guid>refine-vs-react-admin</guid>
            <pubDate>Fri, 26 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will compare the features of refine and react-admin]]></description>
        </item>
        <item>
            <title><![CDATA[Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase]]></title>
            <link>https://refine.dev/blog/customizable-issue-tracker-with-refine-and-supabase</link>
            <guid>customizable-issue-tracker-with-refine-and-supabase</guid>
            <pubDate>Fri, 12 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.]]></description>
        </item>
        <item>
            <title><![CDATA[Create E-mail Subscription Panel with Refine and Strapi]]></title>
            <link>https://refine.dev/blog/e-mail-subscription-panel-with-refine</link>
            <guid>e-mail-subscription-panel-with-refine</guid>
            <pubDate>Mon, 25 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We’ll use refine to develop the frontend easily and strapi for backend solutions.]]></description>
        </item>
        <item>
            <title><![CDATA[Migrating a React-Admin Application to Refine]]></title>
            <link>https://refine.dev/blog/migrating-a-react-admin-application-to-refine</link>
            <guid>migrating-a-react-admin-application-to-refine</guid>
            <pubDate>Wed, 06 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Recently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity.]]></description>
        </item>
        <item>
            <title><![CDATA[Build Fast and Customizable Admin Panel with NestJS]]></title>
            <link>https://refine.dev/blog/customizable-admin-panel-with-nestjs</link>
            <guid>customizable-admin-panel-with-nestjs</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will prepare a simple `job-posting` application. We will also use the refine framework for the admin panel. The project will consist of two parts, api and admin.]]></description>
        </item>
        <item>
            <title><![CDATA[Create a Feedback Admin panel in 15 Minutes with Refine and Strapi]]></title>
            <link>https://refine.dev/blog/create-a-feedback-admin-panel-with-refine-and-strapi</link>
            <guid>create-a-feedback-admin-panel-with-refine-and-strapi</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We will quickly create an api with Strapi and then develop its frontend with refine. Thus, let's see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.]]></description>
        </item>
        <item>
            <title><![CDATA[Let's Build an App to Manage Your Hackathons with Refine]]></title>
            <link>https://refine.dev/blog/manage-hackathons-with-refine</link>
            <guid>manage-hackathons-with-refine</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We'll be building a demo app to manage hackathons with refine.]]></description>
        </item>
        <item>
            <title><![CDATA[Simple Web Application Example with Refine]]></title>
            <link>https://refine.dev/blog/simple-web-application-with-refine</link>
            <guid>simple-web-application-with-refine</guid>
            <pubDate>Mon, 04 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Do you want to develop a web application quickly? You are at the right place!]]></description>
        </item>
    </channel>
</rss>