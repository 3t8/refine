"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[41213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),o=n(17913),i=n(97207),l=n(98438);const s={title:"React Aria - Improve accessibility of React components in refine apps",description:"We will be looking into ways to improve the accessibility and performance of refine app.",slug:"react-aria-refine",authors:"ekekenta_clinton",tags:["react-aria","react","wai-aria"],image:"https://refine.dev/img/refine_social.png",hide_table_of_contents:!1},p=void 0,c={permalink:"/blog/react-aria-refine",source:"@site/blog/2022-08-22-react-area-refine.md",title:"React Aria - Improve accessibility of React components in refine apps",description:"We will be looking into ways to improve the accessibility and performance of refine app.",date:"2022-08-22T00:00:00.000Z",formattedDate:"August 22, 2022",tags:[{label:"react-aria",permalink:"/blog/tags/react-aria"},{label:"react",permalink:"/blog/tags/react"},{label:"wai-aria",permalink:"/blog/tags/wai-aria"}],readingTime:14.07,hasTruncateMarker:!0,authors:[{name:"Ekekenta Clinton",title:"Software Engineer",url:"https://github.com/icode247",imageURL:"https://github.com/icode247.png",key:"ekekenta_clinton"}],frontMatter:{title:"React Aria - Improve accessibility of React components in refine apps",description:"We will be looking into ways to improve the accessibility and performance of refine app.",slug:"react-aria-refine",authors:"ekekenta_clinton",tags:["react-aria","react","wai-aria"],image:"https://refine.dev/img/refine_social.png",hide_table_of_contents:!1},nextItem:{title:"Neumorphism with CSS - A new design trend",permalink:"/blog/neumorphic-css"}},d={authorsImageUrls:[void 0]},m=[{value:"Introduction",id:"introduction",level:2},{value:"What is React Aria?",id:"what-is-react-aria",level:2},{value:"What is refine?",id:"what-is-refine",level:2},{value:"Why use React Aria?",id:"why-use-react-aria",level:2},{value:"It is easily accessible",id:"it-is-easily-accessible",level:3},{value:"It is adaptive",id:"it-is-adaptive",level:3},{value:"International",id:"international",level:3},{value:"It is fully customizable",id:"it-is-fully-customizable",level:3},{value:"Bootstrapping a refine app",id:"bootstrapping-a-refine-app",level:2},{value:"Adding Tailwind CSS",id:"adding-tailwind-css",level:3},{value:"Creating React components",id:"creating-react-components",level:2},{value:"Create Button component",id:"create-button-component",level:3},{value:"Create Input component",id:"create-input-component",level:3},{value:"Create Header Component",id:"create-header-component",level:3},{value:"Create Modal Component",id:"create-modal-component",level:3},{value:"Using React Aria components",id:"using-react-aria-components",level:3},{value:"Creating a List page",id:"creating-a-list-page",level:3},{value:"Creating a record",id:"creating-a-record",level:3},{value:"Adding Server side rendering",id:"adding-server-side-rendering",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Live StackBlitz Example",id:"live-stackblitz-example",level:2},{value:"Build your React-based CRUD applications without constraints",id:"build-your-react-based-crud-applications-without-constraints",level:2}],u={toc:m};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In this tutorial, we'll walk you through how to use React Aria to build a web application in a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine"},"refine")," application. You'll create components using React Aria and use them to build a demo application."),(0,r.kt)("p",null,"Steps we'll cover includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-react-aria"},"What is React Aria?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-refine"},"What is refine?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-use-react-aria"},"Why use React Aria?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#bootstrapping-a-refine-app"},"Bootstrapping a refine app")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-react-components"},"Creating React components")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#adding-server-side-rendering"},"Adding Server side rendering"))),(0,r.kt)("h2",{id:"what-is-react-aria"},"What is React Aria?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/index.html"},"React Aria")," is a library of React Hooks that provides accessible UI primitives for your design system. It provides accessibility and behavior for many common UI components so you can focus on your unique design and styling. It implements adaptive interactions to ensure the best experience possible for all users, including support for mouse, touch, keyboard, and screen readers."),(0,r.kt)("h2",{id:"what-is-refine"},"What is refine?"),(0,r.kt)("p",null," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine"},"refine")," is a a collection of helper hooks, components and providers that helps you build React-based CRUD apps like admin panels, dashboards and internal tools.It's a headless framwork and the core is fully independent of UI. The core components and hooks can be use without any UI dependency."),(0,r.kt)("h2",{id:"why-use-react-aria"},"Why use React Aria?"),(0,r.kt)("p",null,"Here are some of the reasons you should consider using React Aria in  your web application"),(0,r.kt)("h3",{id:"it-is-easily-accessible"},"It is easily accessible"),(0,r.kt)("p",null,"React Aria offers complete screen reader and keyboard navigation support, as well as accessibility and behavior that adhere to WAI-ARIA Authoring Practices. To offer the greatest experience for every user, every component has been tested on a wide range of screen readers and devices."),(0,r.kt)("h3",{id:"it-is-adaptive"},"It is adaptive"),(0,r.kt)("p",null,"No matter the UI, React Aria maintains consistent functionality. It enables interactions with the mouse, touch, keyboard, and screen reader that have been tried on a range of browsers, gadgets, and platforms."),(0,r.kt)("h3",{id:"international"},"International"),(0,r.kt)("p",null,"Over 30 languages are supported by React Aria, which also has right-to-left behavior and the internationalized date and number formatting, among other features."),(0,r.kt)("h3",{id:"it-is-fully-customizable"},"It is fully customizable"),(0,r.kt)("p",null,"No rendering is implemented by React Aria, nor is a DOM structure, style approach, or design-specific information imposed. It enables interactions, behavior, and accessibility while letting you concentrate on your design."),(0,r.kt)("h2",{id:"bootstrapping-a-refine-app"},"Bootstrapping a refine app"),(0,r.kt)("p",null,"Now let's go ahead and set up a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine"},"refine")," project to create a component library using React Aria. To do that, run the command below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx superplate-cli -p refine-react component-library\n")),(0,r.kt)("p",null,"The above command will prompt you to complete options for your project. Your selection should look like the screenshot below."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("img",{src:l.Z,alt:"cli log"})),(0,r.kt)("p",null,"Then wait while refine installs the required packages for this project. Once that is done, let's install React Aria. React Aria published all components as a separate module for adoptable sake, so you can choose to install the components independently or as all the package."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Eg ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install @react-aria/button"),"]")),(0,r.kt)("p",null,"To save our time, we'll install all the component which is packaged under the  @react-aria scope with the command below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell="},"yarn add react-aria\n")),(0,r.kt)("p",null,"Now change the directory to the project folder and run the application with the command below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd component-library &&  yarn dev\n")),(0,r.kt)("h3",{id:"adding-tailwind-css"},"Adding Tailwind CSS"),(0,r.kt)("p",null,"We will use Tailwind CSS for the UI of the example app."),(0,r.kt)("p",null,"We will use Tailwind for the UI of the example app. You can prefer any UI library or design system since it's not affecting the usability."),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"tailwindcss")," and its peer dependencies via npm, and then run the init command to generate both ",(0,r.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"postcss.config.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\n")),(0,r.kt)("p",null,"Add the paths to all of your template files in your ",(0,r.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},'module.exports = {\n    //highlight-next-line\n    content: ["./src/**/*.{js,jsx,ts,tsx}"],\n    theme: {\n        extend: {},\n    },\n    plugins: [],\n};\n')),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@tailwind")," directives for each of Tailwind\u2019s layers to your ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.css")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/index.css"',title:'"src/index.css"'},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")),(0,r.kt)("p",null,"Add css file import to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="App.tsx"',title:'"App.tsx"'},"...\n\n//highlight-next-line\nimport 'index.css';\n")),(0,r.kt)("h2",{id:"creating-react-components"},"Creating React components"),(0,r.kt)("p",null,"We'll use the React hooks provided by Aria to create component libraries for our Refine application. React Aria offers accessibility and behavior for React hooks. You must define the DOM structure for your component and send the DOM props supplied by each React Aria hook to the proper elements because it does not provide any rendering."),(0,r.kt)("p",null," Additionally, it allows you total control over the DOM by enabling you to add additional components for styling or layout control, such as CSS classes, inline styles, CSS-in-JS, etc. We'll explore some of them and how they work. To get started, create a ",(0,r.kt)("strong",{parentName:"p"},"component")," folder in the ",(0,r.kt)("strong",{parentName:"p"},"src")," folder of our React project to save the component libraries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir src/components\n")),(0,r.kt)("h3",{id:"create-button-component"},"Create Button component"),(0,r.kt)("p",null,"Let's start with the button component, and we'll use the ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useButton.html"},"useButton")," hook. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useButton")," hook takes care of several cross-browser discrepancies in interactions and accessibility capabilities, so you can focus on the styling. "),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Button.tsx")," in the component folder and add the code snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Button.tsx"',title:'"Button.tsx"'},"import React, { ElementType, RefObject } from 'react';\nimport { useButton } from '@react-aria/button';\nimport { AriaButtonProps } from 'react-aria';\n\nexport default function Button(props: AriaButtonProps<ElementType> | any) {\n    const ref: RefObject<any> = React.useRef();\n    const { buttonProps } = useButton(props, ref);\n\n    return (\n        <button\n            {...buttonProps}\n            ref={ref}\n            className=\"flex items-center self-end rounded-lg bg-indigo-500 mb-5 px-5 py-2.5 mt-3 text-center text-sm font-medium text-white hover:bg-indigo-600 sm:w-auto\"\n        >\n            {props.children}\n        </button>\n    );\n}\n")),(0,r.kt)("p",null,"In the above code snippet, we imported the ",(0,r.kt)("inlineCode",{parentName:"p"},"useButton")," hook and called it, passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," along with a ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," to the DOM node for this component to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"buttonProp")," property. Then we spread the props returned from the hook into the ",(0,r.kt)("strong",{parentName:"p"},"button")," element that we want to render, passing the ",(0,r.kt)("strong",{parentName:"p"},"ref")," and the style props."),(0,r.kt)("p",null,"Now you can import and use this component, pass in the props you want, and add styles and event listeners."),(0,r.kt)("h3",{id:"create-input-component"},"Create Input component"),(0,r.kt)("p",null,"Next, let's create the input component library using the ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useTextField.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useTextField"))," hooks. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useTextField")," hook offers a text field's behavior and accessibility implementation."),(0,r.kt)("p",null," Create an ",(0,r.kt)("inlineCode",{parentName:"p"},"Input.tsx")," file in the component folder and add the code snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Input.tsx"',title:'"Input.tsx"'},"import React, { RefObject } from 'react';\nimport { useTextField } from '@react-aria/textfield';\nimport { AriaTextFieldProps } from 'react-aria';\n\nexport default function Input(props: AriaTextFieldProps) {\n    const ref: RefObject<any> = React.useRef();\n    const {\n        inputProps: { className, ...inputProps },\n    } = useTextField(props, ref);\n\n    return (\n        <div className=\"w-full\">\n            <input\n                {...inputProps}\n                ref={ref}\n                className={`border-2 border-slate-300 hover:border-sky-200 focus:border-sky-400 active:border-sky-400 rounded-md py-1.5 px-2.5 w-full ${className}`}\n            />\n        </div>\n    );\n}\n")),(0,r.kt)("p",null,"We called the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTextField"),", passing the props along with a ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," to the DOM node for this component to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputProps")," property. Then we spread the props returned from the hook into the ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," element that we want to render, passing the ref and the style props."),(0,r.kt)("h3",{id:"create-header-component"},"Create Header Component"),(0,r.kt)("p",null,"To create a Header component, we'll use the ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useHover.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useHover"))," hook. This hook handles the pointer hover interactions for an element. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Header.tsx")," file in the ",(0,r.kt)("strong",{parentName:"p"},"component")," directory and add the code snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Header.tsx"',title:'"Header.tsx"'},"import React, { ElementType } from 'react';\nimport { useHover } from '@react-aria/interactions';\nimport { AriaButtonProps } from 'react-aria';\n\nexport default function Header(props: AriaButtonProps<ElementType> | any) {\n    let { hoverProps, isHovered } = useHover({});\n\n    return (\n        <div\n            {...hoverProps}\n            style={{\n                background: isHovered ? '#167B73' : '#2D9E96',\n                color: 'white',\n                padding: 4,\n                cursor: 'pointer',\n                display: 'block',\n            }}\n            tabIndex={0}\n        >\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    fontSize: '10px',\n                }}\n            >\n                {props.children}\n            </div>\n        </div>\n    );\n}\n")),(0,r.kt)("p",null,"We'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isHovered")," props to know when the mouse or pen goes over the element, and we will change the background color of the elements in the header. Then we spread the ",(0,r.kt)("inlineCode",{parentName:"p"},"hoverProps")," into the ",(0,r.kt)("strong",{parentName:"p"},"div")," element that we want to render, passing an initial ",(0,r.kt)("inlineCode",{parentName:"p"},"tabIndex")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". "),(0,r.kt)("h3",{id:"create-modal-component"},"Create Modal Component"),(0,r.kt)("p",null,"We'll take advantage of the ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useDialog.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useDialog")),", ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useOverlay.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useOverlay")),", ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/usePreventScroll.html"},(0,r.kt)("inlineCode",{parentName:"a"},"usePreventScroll")),", and ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useModal.html"},(0,r.kt)("inlineCode",{parentName:"a"},"useModal")),"."),(0,r.kt)("p",null," Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Modal.tsx")," file in the component folder and add the code snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Modal.tsx"',title:'"Modal.tsx"'},"import React, { ElementType, RefObject, PropsWithChildren } from 'react';\nimport { AriaButtonProps, OverlayProvider } from 'react-aria';\nimport { OverlayTriggerState } from '@react-stately/overlays';\nimport {\n   useOverlay,\n   usePreventScroll,\n   useModal,\n   OverlayContainer,\n} from '@react-aria/overlays';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\n\nfunction ModalDialog(props: AriaButtonProps<ElementType> | any) {\n   const { title, children } = props;\n   const ref: RefObject<any> = React.useRef();\n   const { overlayProps, underlayProps } = useOverlay(props, ref);\n\n   usePreventScroll();\n   const { modalProps } = useModal();\n   const { dialogProps, titleProps } = useDialog(props, ref);\n\n   return (\n       <div\n           style={{\n               position: 'fixed',\n               zIndex: 100,\n               top: 0,\n               left: 0,\n               bottom: 0,\n               right: 0,\n               background: 'rgba(0, 0, 0, 0.5)',\n               display: 'flex',\n               alignItems: 'center',\n               justifyContent: 'center',\n           }}\n           {...underlayProps}\n       >\n           <FocusScope contain restoreFocus autoFocus>\n               <div\n                   {...overlayProps}\n                   {...dialogProps}\n                   {...modalProps}\n                   ref={ref}\n                   className=\"w-full bg-white text-black p-7 max-w-xl\"\n               >\n                   <h3\n                       {...titleProps}\n                       className=\"mt-0 pb-4 border-b border-slate-200 border-solid text-xl mb-6 font-bold\"\n                   >\n                       {title}\n                   </h3>\n                   {children}\n               </div>\n           </FocusScope>\n       </div>\n   );\n}\n\ntype ModalProps = {\n   title: string;\n   overlayState: OverlayTriggerState;\n};\nexport default function Modal(props: PropsWithChildren<ModalProps>) {\n   const {\n       title,\n       overlayState: { close, isOpen },\n       children,\n   } = props;\n   return (\n       <OverlayProvider>\n           {isOpen && (\n               <OverlayContainer>\n                   <ModalDialog\n                       title={title}\n                       isOpen\n                       onClose={close}\n                       isDismissable\n                   >\n                       <div\n                           style={{\n                               display: 'flex',\n                               justifyContent: 'center',\n                               alignItems: 'center',\n                               flexDirection: 'column',\n                           }}\n                       >\n                           {children}\n                       </div>\n                   </ModalDialog>\n               </OverlayContainer>\n           )}\n       </OverlayProvider>\n   );\n}\n")),(0,r.kt)("p",null,"In the above code snippet, we imported the Aria hooks we need for this component, and we created a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModalDialog")," component to create a dialog for the modal. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModalDialog"),", we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook, which returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"overlayProps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"underlayProps")," props to handle the user interactivity outside a dialog and to close the modal."),(0,r.kt)("p",null,"Then we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDialog")," hook, which returns ",(0,r.kt)("inlineCode",{parentName:"p"},"dialogProps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"titleProps")," to get the props of the dialogue and its title. Also, we used the FocusScope component to specify the focus area to be controlled by the dialog."),(0,r.kt)("p",null,"Lastly, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModalDialog")," we created to create a dialog for the modal and pass in the required props. Also, we wrapped the application in an ",(0,r.kt)("inlineCode",{parentName:"p"},"OverlayProvider")," hook so that it can be hidden from screen readers when a modal opens. "),(0,r.kt)("p",null,"You can learn more about creating a modal from this ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/useDialog.html"},"link"),"."),(0,r.kt)("h3",{id:"using-react-aria-components"},"Using React Aria components"),(0,r.kt)("p",null,"Now let's use the components libraries to create a small application. To do that, we'll create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Layout.tsx")," file in the components folder and add the code snippets below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Layout"',title:'"components/Layout"'},'import { useMenu, useNavigation, LayoutProps } from \'@pankod/refine-core\';\n\nexport const Layout: React.FC<LayoutProps> = ({ children }) => {\n    const { menuItems } = useMenu();\n    const { push } = useNavigation();\n    return (\n        <div className="App">\n            <div className="flex min-h-screen flex-col">\n                <div className="mb-2 border-b py-2">\n                    <div className="container mx-auto">\n                        <div className="flex items-center gap-2">\n                            <img\n                                className="w-32"\n                                src="https://refine.dev/img/refine_logo.png"\n                                alt="Logo"\n                            />\n                            <ul>\n                                {menuItems.map(\n                                    ({ name, label, icon, route }) => (\n                                        <li key={name} className="float-left">\n                                            <a\n                                                className="flex cursor-pointer items-center gap-1 rounded-sm px-2 py-1 capitalize decoration-indigo-500 decoration-2 underline-offset-1 transition duration-300 ease-in-out hover:underline"\n                                                onClick={() =>\n                                                    push(route || \'\')\n                                                }\n                                            >\n                                                {icon}\n                                                <span>{label ?? name}</span>\n                                            </a>\n                                        </li>\n                                    )\n                                )}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                <div className="bg-white">{children}</div>\n            </div>\n        </div>\n    );\n};\n')),(0,r.kt)("p",null,"We'll start connecting to our API by adding a resource to our application."),(0,r.kt)("h3",{id:"creating-a-list-page"},"Creating a List page"),(0,r.kt)("p",null,"Firstly, we'll create a ",(0,r.kt)("inlineCode",{parentName:"p"},"CategoryList")," page to show data from API in a table."),(0,r.kt)("p",null,"Now, create a new folder named ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/category")," under ",(0,r.kt)("inlineCode",{parentName:"p"},"/src"),". Under that folder, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"list.tsx")," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/category/list.tsx"',title:'"pages/category/list.tsx"'},"import React from 'react';\nimport { useTable, ColumnDef, flexRender } from '@pankod/refine-react-table';\nimport { CategoryCreate } from './create';\n\nexport const CategoryList: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<any>[]>(\n        () => [\n            {\n                id: 'id',\n                header: 'ID',\n                accessorKey: 'id',\n                width: 50,\n            },\n            {\n                id: 'title',\n                header: 'Title',\n                accessorKey: 'title',\n            },\n        ],\n        []\n    );\n\n    const { getHeaderGroups, getRowModel } = useTable<any>({\n        columns,\n    });\n    return (\n        <div className=\"container mx-auto pb-4 max-w-3xl w-full\">\n            <table className=\"min-w-full table-fixed divide-y divide-gray-200 border\">\n                <thead className=\"bg-gray-100\">\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => (\n                                <th\n                                    key={header.id}\n                                    colSpan={header.colSpan}\n                                    className=\"py-3 px-6 text-left text-xs font-medium uppercase tracking-wider text-gray-700 \"\n                                >\n                                    {flexRender(\n                                        header.column.columnDef.header,\n                                        header.getContext()\n                                    )}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody className=\"divide-y divide-gray-200 bg-white\">\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr\n                                key={row.id}\n                                className=\"transition hover:bg-gray-100\"\n                            >\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td\n                                            key={cell.id}\n                                            className=\"whitespace-nowrap py-2 px-6 text-sm font-medium text-gray-900\"\n                                        >\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext()\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/tutorial/#creating-a-list-page"},"Refer to official refine documentation for details about creating a list page")),(0,r.kt)("p",null,"We need to import and initialize the  ",(0,r.kt)("inlineCode",{parentName:"p"},"CategoryList")," pages to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import { Refine } from '@pankod/refine-core';\nimport routerProvider from '@pankod/refine-react-router-v6';\nimport dataProvider from '@pankod/refine-simple-rest';\nimport { Layout } from 'components/Layout';\nimport 'index.css';\n//highlight-next-line\nimport { CategoryList } from 'pages/category/list';\n\nfunction App() {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider('https://api.fake-rest.refine.dev')}\n            resources={[\n                {\n                    name: 'categories',\n                    //highlight-next-line\n                    list: CategoryList,\n                },\n            ]}\n            Layout={({ children }) => <Layout> {children}</Layout>}\n        />\n    );\n}\n\nexport default App;\n")),(0,r.kt)("p",null,"You should see the output below on the browser."),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:o.Z,alt:"refine list page"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"creating-a-record"},"Creating a record"),(0,r.kt)("p",null,"We'll create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"<CategoryCreate>")," page responsible for creating a single record:"),(0,r.kt)("p",null,"Until this point, we were basically working with reading operations such as fetching and displaying data from resources. Now we are going to start creating records by using ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/packages/react-hook-form/useForm/"},"@pankod/refine-react-hook-form")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/category/create"',title:'"pages/category/create"'},'import { Controller, useForm } from \'@pankod/refine-react-hook-form\';\nimport { HttpError } from \'@pankod/refine-core\';\nimport { useOverlayTriggerState } from \'@react-stately/overlays\';\n\nimport Modal from \'../../components/Modal\';\nimport Input from \'../../components/Input\';\nimport Button from \'../../components/Button\';\n\nexport const CategoryCreate: React.FC = () => {\n    const state = useOverlayTriggerState({});\n\n    const {\n        refineCore: { onFinish },\n        control,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<{ title: string }, HttpError, { title: string }>({\n        refineCoreProps: {\n            onMutationSuccess: () => {\n                state.close();\n            },\n        },\n    });\n\n    return (\n        <div className="container">\n            <div className="w-full flex justify-end">\n                <Button onPress={state.open}>Create</Button>\n            </div>\n            <Modal overlayState={state} title="Create a category">\n                <form\n                    onSubmit={handleSubmit(onFinish)}\n                    className="w-full flex flex-col gap-4"\n                >\n                    <Controller\n                        control={control}\n                        name="title"\n                        rules={{ required: \'field is required\' }}\n                        render={({ field }) => (\n                            <>\n                                <Input\n                                    {...field}\n                                    type="text"\n                                    placeholder="Title"\n                                />\n                                {errors?.title && (\n                                    <div className="text-red-500 text-xs mt-1 font-semibold">\n                                        {errors.title.message}\n                                    </div>\n                                )}\n                            </>\n                        )}\n                    />\n                    <Button type="submit">Create</Button>\n                </form>\n            </Modal>\n        </div>\n    );\n};\n')),(0,r.kt)("p",null,"We also need to import ",(0,r.kt)("inlineCode",{parentName:"p"},"CategoryCreate")," page to the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"CategoryList")," in order to show create button and modal page when clicked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/category/list"',title:'"pages/category/list"'},"\nimport React from 'react';\nimport { useTable, ColumnDef, flexRender } from '@pankod/refine-react-table';\n// highlight-next-line\nimport { CategoryCreate } from './create';\n\nexport const CategoryList: React.FC = () => {\n   \n   ...\n\n    return (\n      // highlight-next-line\n        <CategoryCreate /> \n\n       ...\n};\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"resources")," is a property of ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine/>")," representing API Endpoints. The name property of every single resource should match one of the endpoints in your API!")),(0,r.kt)("p",null,"Now if you click the ",(0,r.kt)("inlineCode",{parentName:"p"},"Create"),"  button you should see the form modal below. "),(0,r.kt)("div",{class:"img-container"},(0,r.kt)("div",{class:"window"},(0,r.kt)("div",{class:"control red"}),(0,r.kt)("div",{class:"control orange"}),(0,r.kt)("div",{class:"control green"})),(0,r.kt)("img",{src:i.Z,alt:"refine list page"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"By now, we can add a new record to the category resource."),(0,r.kt)("h2",{id:"adding-server-side-rendering"},"Adding Server side rendering"),(0,r.kt)("p",null,"SSR, or server-side rendering, is the process of rendering components to HTML on the server as opposed to only on the client. A comparable strategy is static rendering, except instead of pre-rendering pages to HTML on each request but rather at build time. "),(0,r.kt)("p",null,"To make components using React Aria work with SSR, you will need to wrap your application in an SSRProvider. This signals to all nested React Aria hooks that they are being rendered in an SSR context. Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file with the code snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {SSRProvider} from 'react-aria';\n\n<SSRProvider>\n  <App />\n</SSRProvider>\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Throughout this tutorial, we\u2019ve implemented how to create a component library in React using React Aria. We started by understanding what React Aria is and why you should consider using it for creating component libraries. Then we created some component libraries using React Aria and used it to build a signup form. You can learn more about React Aria from the official ",(0,r.kt)("a",{parentName:"p",href:"https://react-spectrum.adobe.com/react-aria/index.html"},"docs"),"."),(0,r.kt)("h2",{id:"live-stackblitz-example"},"Live StackBlitz Example"),(0,r.kt)("iframe",{loading:"lazy",src:"https://stackblitz.com//github/pankod/refine/tree/master/examples/blog/react-aria/?embed=1&view=preview&theme=dark&preset=node",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-aria-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,r.kt)("h2",{id:"build-your-react-based-crud-applications-without-constraints"},"Build your React-based CRUD applications without constraints"),(0,r.kt)("p",null,"Low-code React frameworks are great for gaining development speed but they often fall short of flexibility if you need extensive styling and customization for your project."),(0,r.kt)("p",null,"Check out ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine"},"refine"),", if you are interested in a headless framework you can use with any custom design or UI-Kit for 100% control over styling."),(0,r.kt)("div",null,(0,r.kt)("a",{href:"https://github.com/pankod/refine"},(0,r.kt)("img",{src:"https://refine.dev/img/refine_blog_logo_1.png",alt:"refine blog logo"}))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," is an open source, React-based framework for building CRUD applications ",(0,r.kt)("strong",{parentName:"p"},"without constraints."),"\nIt can speed up your development time up to ",(0,r.kt)("strong",{parentName:"p"},"3X")," without compromising freedom on ",(0,r.kt)("strong",{parentName:"p"},"styling"),", ",(0,r.kt)("strong",{parentName:"p"},"customization")," and ",(0,r.kt)("strong",{parentName:"p"},"project workflow.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," is headless by design and it connects ",(0,r.kt)("strong",{parentName:"p"},"30+")," backend services out-of-the-box including custom REST and GraphQL API\u2019s."),(0,r.kt)("p",null,"Visit ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine"},"refine GitHub repository")," for more information, demos, tutorials and example projects."))}h.isMDXComponent=!0},98438:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cli-2063d455569ccd5ed42e7a1c2c1ebf36.png"},17913:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/list-944721f618fcdfb530cbfff9fb3b4015.png"},97207:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/modal-424071a02478d5234cdbf7a24210e0ed.png"}}]);