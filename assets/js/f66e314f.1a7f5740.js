"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[71271],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94733:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return h},metadata:function(){return g},toc:function(){return k},default:function(){return v}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=n(46434),s=n(95433),l=n(24946),c=n(93349),d=n(55519),p=n(32706),u=["components"],m={id:"strapi-v4",title:"Strapi-v4"},h=void 0,g={unversionedId:"guides-and-concepts/multi-tenancy/strapi-v4",id:"guides-and-concepts/multi-tenancy/strapi-v4",isDocsHomePage:!1,title:"Strapi-v4",description:"What is Multitenancy?",source:"@site/docs/guides-and-concepts/multi-tenancy/strapi.md",sourceDirName:"guides-and-concepts/multi-tenancy",slug:"/guides-and-concepts/multi-tenancy/strapi-v4",permalink:"/docs/guides-and-concepts/multi-tenancy/strapi-v4",editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/guides-and-concepts/multi-tenancy/strapi.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1653319656,formattedLastUpdatedAt:"5/23/2022",frontMatter:{id:"strapi-v4",title:"Strapi-v4"},sidebar:"someSidebar",previous:{title:"Appwrite",permalink:"/docs/guides-and-concepts/multi-tenancy/appwrite"},next:{title:"Mutation Mode",permalink:"/docs/guides-and-concepts/mutation-mode"}},k=[{value:"What is Multitenancy?",id:"what-is-multitenancy",children:[],level:2},{value:"Introduction\u200b",id:"introduction",children:[],level:2},{value:"Setup",id:"setup",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"AuthProvider",id:"authprovider",children:[],level:3}],level:2},{value:"Create Collections",id:"create-collections",children:[],level:2},{value:"Store Context",id:"store-context",children:[],level:2},{value:"Shop Select to Sider Component",id:"shop-select-to-sider-component",children:[],level:2},{value:"Product List Page",id:"product-list-page",children:[],level:2},{value:"Product Create Page",id:"product-create-page",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2},{value:"Live Codesandbox Example",id:"live-codesandbox-example",children:[],level:2}],f={toc:k};function v(e){var t=e.components,n=(0,o.Z)(e,u);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-multitenancy"},"What is Multitenancy?"),(0,a.kt)("p",null,"Multitenancy refers to a kind of architecture where a single instance of software runs on a server and serves multiple customers. In a multi-tenant environment, separate customers tap into the same hardware and data storage, creating a dedicated instance for each customer. Each tenant\u2019s data is isolated and remains invisible to others, but is running on the same server."),(0,a.kt)("h2",{id:"introduction"},"Introduction\u200b"),(0,a.kt)("p",null,"In this guide, we will create an application with you in the logic of Multi Tenant(Multitenancy). We can say multi tenant application is to separate and manage multiple contents independently from each other in a single application."),(0,a.kt)("p",null,"We will make a Cake House application using ",(0,a.kt)("strong",{parentName:"p"},"refine")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"},"Strapi-v4"),". Our Cake House will consist of two separate stores and there will be special products for these stores. We will explain step by step how to manage these stores, products and orders separately."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"This guide has been prepared assuming you know the basics of ",(0,a.kt)("strong",{parentName:"p"},"refine"),". If you haven't learned these basics yet, we recommend reading the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/"},"Tutorial"),"."))),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-strapi-v4\n")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To make this example more visual, we used the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine/tree/master/packages/refine-antd"},(0,a.kt)("inlineCode",{parentName:"a"},"@pankod/refine-antd"))," package. If you are using Refine headless, you need to provide the components, hooks or helpers imported from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine/tree/master/packages/refine-antd"},(0,a.kt)("inlineCode",{parentName:"a"},"@pankod/refine-antd"))," package."))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"authprovider"},"AuthProvider"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@pankod/refine-core";\nimport { AuthHelper } from "@pankod/refine-strapi-v4";\nimport axios from "axios";\n\nexport const axiosInstance = axios.create();\n\nconst API_URL = "YOUR_API_URL";\nconst TOKEN_KEY = "strapi-jwt-token";\nconst strapiAuthHelper = AuthHelper(API_URL + "/api");\n\nexport const authProvider: AuthProvider = {\n    login: async ({ username, password }) => {\n        const { data, status } = await strapiAuthHelper.login(\n            username,\n            password,\n        );\n        if (status === 200) {\n            localStorage.setItem(TOKEN_KEY, data.jwt);\n\n            // set header axios instance\n            axiosInstance.defaults.headers = {\n                Authorization: `Bearer ${data.jwt}`,\n            };\n\n            return Promise.resolve();\n        }\n        return Promise.reject();\n    },\n    logout: () => {\n        localStorage.removeItem(TOKEN_KEY);\n        return Promise.resolve();\n    },\n    checkError: () => Promise.resolve(),\n    checkAuth: () => {\n        const token = localStorage.getItem(TOKEN_KEY);\n        if (token) {\n            axiosInstance.defaults.headers = {\n                Authorization: `Bearer ${token}`,\n            };\n            return Promise.resolve();\n        }\n\n        return Promise.reject();\n    },\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: async () => {\n        const token = localStorage.getItem(TOKEN_KEY);\n        if (!token) {\n            return Promise.reject();\n        }\n\n        const { data, status } = await strapiAuthHelper.me(token);\n        if (status === 200) {\n            const { id, username, email } = data;\n            return Promise.resolve({\n                id,\n                username,\n                email,\n            });\n        }\n\n        return Promise.reject();\n    },\n};\n')))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport { Layout, ReadyPage, notificationProvider, ErrorComponent } from "@pankod/refine-antd";\nimport { DataProvider } from "@pankod/refine-strapi-v4";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport "@pankod/refine-antd/dist/styles.min.css";\n\n// highlight-next-line\nimport { authProvider, axiosInstance } from "./authProvider";\n\nconst API_URL = "YOUR_API_URL";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            //highlight-start\n            authProvider={authProvider}\n            dataProvider={DataProvider(API_URL + "/api", axiosInstance)}\n            //highlight-end\n            routerProvider={routerProvider}\n            Layout={Layout}\n            ReadyPage={ReadyPage}\n            notificationProvider={notificationProvider}\n            catchAll={<ErrorComponent />}\n        />\n    );\n};\n')),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You can find detailed usage information and the source code ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pankod/refine/tree/master/examples/multi-tenancy/strapi"},"here"),"."))),(0,a.kt)("h2",{id:"create-collections"},"Create Collections"),(0,a.kt)("p",null,"We created three collections on Strapi as store, product and order and added a relation between them. For detailed information on how to create a collection, you can check ",(0,a.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html"},"here"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Stores")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Title: Text"),(0,a.kt)("li",{parentName:"ul"},"Relation with Products"),(0,a.kt)("li",{parentName:"ul"},"Relation with Orders")),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:c.Z,alt:"stores"})),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Products")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Title: Text"),(0,a.kt)("li",{parentName:"ul"},"Description: Text"),(0,a.kt)("li",{parentName:"ul"},"Image: Media"),(0,a.kt)("li",{parentName:"ul"},"Relation with Stores"),(0,a.kt)("li",{parentName:"ul"},"Relation with Orders")),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:d.Z,alt:"products"})),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Orders")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Status: Text"),(0,a.kt)("li",{parentName:"ul"},"Customer Name: Text"),(0,a.kt)("li",{parentName:"ul"},"Customer Address: Text"),(0,a.kt)("li",{parentName:"ul"},"Quantity: Number"),(0,a.kt)("li",{parentName:"ul"},"Relation with Stores"),(0,a.kt)("li",{parentName:"ul"},"Relation with Product")),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:p.Z,alt:"orders"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"Now that we have completed the setup and our collections, we can now log in with the ",(0,a.kt)("strong",{parentName:"p"},"refine")," and start the listing processes."),(0,a.kt)("h2",{id:"store-context"},"Store Context"),(0,a.kt)("p",null,"In order to view the products and orders of two different stores separately, we need to filter by storeId. We will use the storeId information in more than one place. For example, when creating a store-specific order."),(0,a.kt)("p",null,"For this reason, we will create a ",(0,a.kt)("a",{parentName:"p",href:"https://en.reactjs.org/docs/context.html"},"React Context")," and keep the storeId state information in it and send it to the relevant ",(0,a.kt)("strong",{parentName:"p"},"refine")," components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/contexts/StoreContext.tsx"',title:'"src/contexts/StoreContext.tsx"'},'import { createContext, useState } from "react";\n\nexport const StoreContext = createContext<any[]>([]);\n\nexport const StoreProvider = (props: any) => {\n    const [store, setStore] = useState(1);\n\n    return <StoreContext.Provider value={[store, setStore]} {...props} />;\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport { Layout, ReadyPage, notificationProvider, ErrorComponent } from "@pankod/refine-antd";\nimport { DataProvider } from "@pankod/refine-strapi-v4";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport "@pankod/refine-antd/dist/styles.min.css";\n\n// highlight-next-line\nimport { StoreProvider } from "context/store";\nimport { authProvider, axiosInstance } from "./authProvider";\n\nconst API_URL = "YOUR_API_URL";\n\nconst App: React.FC = () => {\n    return (\n        //highlight-next-line\n        <StoreProvider>\n            <Refine\n                authProvider={authProvider}\n                dataProvider={DataProvider(API_URL + "/api", axiosInstance)}\n                routerProvider={routerProvider}\n                Layout={Layout}\n                ReadyPage={ReadyPage}\n                notificationProvider={notificationProvider}\n                catchAll={<ErrorComponent />}\n            />\n            //highlight-next-line\n        </StoreProvider>\n    );\n};\n')),(0,a.kt)("h2",{id:"shop-select-to-sider-component"},"Shop Select to Sider Component"),(0,a.kt)("p",null,"We will create a select component in the Sider Menu where the user will select the stores. Let's create our select component first, then let's see how we can define it in the ",(0,a.kt)("strong",{parentName:"p"},"refine")," Sider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="scr/components/select/StoreSelect.tsx"',title:'"scr/components/select/StoreSelect.tsx"'},'import { useContext } from "react";\nimport { Select, useSelect } from "@pankod/refine-antd";\n\nimport { StoreContext } from "context/store";\nimport { IStore } from "interfaces";\n\ntype SelectProps = {\n    onSelect: () => void;\n};\n\nexport const StoreSelect: React.FC<SelectProps> = ({ onSelect }) => {\n    const [store, setStore] = useContext(StoreContext);\n\n    const { selectProps: storeSelectProps } = useSelect<IStore>({\n        resource: "stores",\n        optionLabel: "title",\n        optionValue: "id",\n    });\n\n    const handleChange = (selectedValue: string) => {\n        setStore(selectedValue);\n    };\n\n    return (\n        <Select\n            defaultValue={store}\n            style={{ width: 130 }}\n            onChange={handleChange}\n            onSelect={onSelect}\n        >\n            {storeSelectProps.options?.map(({ value, label }) => (\n                <Select.Option key={value} value={value}>\n                    {label}\n                </Select.Option>\n            ))}\n        </Select>\n    );\n};\n')),(0,a.kt)("p",null,"Here we have created a select component. Then we fetch the store id and title we created in the Strapi database with ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelect"),". Now we can place the store information we have in the state we created in the Store Context."),(0,a.kt)("p",null,"Let's define the select component in the ",(0,a.kt)("strong",{parentName:"p"},"refine")," Sider Menu. First, we need to customize the default Sider."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/examples/customization/customSider/"},"Check out how you can customize Sider Menu \u2192")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/sider/CustomSider.tsx"',title:'"src/components/sider/CustomSider.tsx"'},'import React, { useState } from "react";\nimport {\n    useTitle,\n    useLogout,\n    CanAccess,\n    ITreeMenu,\n    useRouterContext,\n} from "@pankod/refine-core";\nimport { AntdLayout, Menu, useMenu, Grid, Icons } from "@pankod/refine-antd";\n\nimport { StoreSelect } from "components/select";\nimport { antLayoutSider, antLayoutSiderMobile } from "./styles";\n\nexport const CustomSider: React.FC = () => {\n    const [collapsed, setCollapsed] = useState<boolean>(false);\n    const { mutate: logout } = useLogout();\n    const { Link } = useRouterContext();\n    const Title = useTitle();\n    const { menuItems, selectedKey } = useMenu();\n    const breakpoint = Grid.useBreakpoint();\n\n    const isMobile = !breakpoint.lg;\n    \n    const renderTreeView = (tree: ITreeMenu[], selectedKey: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const { icon, label, route, name, children, parentName } = item;\n\n            if (children.length > 0) {\n                return (\n                    <SubMenu\n                        key={name}\n                        icon={icon ?? <Icons.UnorderedListOutlined />}\n                        title={label}\n                    >\n                        {renderTreeView(children, selectedKey)}\n                    </SubMenu>\n                );\n            }\n            const isSelected = route === selectedKey;\n            const isRoute = !(\n                parentName !== undefined && children.length === 0\n            );\n            return (\n                <CanAccess\n                    key={route}\n                    resource={name.toLowerCase()}\n                    action="list"\n                >\n                    <Menu.Item\n                        key={selectedKey}\n                        style={{\n                            fontWeight: isSelected ? "bold" : "normal",\n                        }}\n                        icon={icon ?? (isRoute && <Icons.UnorderedListOutlined />)}\n                    >\n                        <Link to={route}>{label}</Link>\n                        {!collapsed && isSelected && (\n                            <div className="ant-menu-tree-arrow" />\n                        )}\n                    </Menu.Item>\n                </CanAccess>\n            );\n        });\n    };\n\n    return (\n        <AntdLayout.Sider\n            collapsible\n            collapsedWidth={isMobile ? 0 : 80}\n            collapsed={collapsed}\n            breakpoint="lg"\n            onCollapse={(collapsed: boolean): void => setCollapsed(collapsed)}\n            style={isMobile ? antLayoutSiderMobile : antLayoutSider}\n        >\n            {Title && <Title collapsed={collapsed} />}\n            <Menu\n                selectedKeys={[selectedKey]}\n                mode="inline"\n                onClick={() => {\n                    if (!breakpoint.lg) {\n                        setCollapsed(true);\n                    }\n                }}\n            >\n                <Menu.Item\n                    key={selectedKey}\n                    icon={<Icons.AppstoreAddOutlined />}\n                >\n                    <StoreSelect\n                        onSelect={() => {\n                            setCollapsed(true);\n                        }}\n                    />\n                </Menu.Item>\n                {renderTreeView(menuItems, selectedKey)}\n                <Menu.Item key="logout" onClick={() => logout()} icon={<Icons.LoginOutlined />}>\n                    Logout\n                </Menu.Item>\n            </Menu>\n        </AntdLayout.Sider>\n    );\n};\n')))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("img",{src:i.Z,alt:"sider"})))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("em",{parentName:"td"},"As you can see, you can now choose the store you want and create products and orders specifically for the store we have chosen according to the storeId information."))))),(0,a.kt)("h2",{id:"product-list-page"},"Product List Page"),(0,a.kt)("p",null,"Now we can list the products of the selected store according to the storeId information by filtering it. We can do this filtering by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"permanetFilter")," property within the ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"useSimpleList")," hook."),(0,a.kt)("p",null,"We separate the products of different stores by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"permanentFilter")," with the storeId we get from the Store Context. So we can control more than single content in one application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'//highlight-start\nconst [store] = useContext(StoreContext);\n//highlight-end\nconst { listProps } = useSimpleList<IProduct>({\n    //highlight-start\n    permanentFilter: [{ field: "stores][id]", operator: "eq", value: store }],\n    //highlight-end\n});\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=src/pages/ProductList.tsx",title:"src/pages/ProductList.tsx"},'import { useContext } from "react";\nimport { IResourceComponentsProps, HttpError } from "@pankod/refine-core";\nimport {\n    useSimpleList,\n    AntdList,\n    useModalForm,\n    useDrawerForm,\n    CreateButton,\n    List,\n} from "@pankod/refine-antd";\n\nimport { IProduct } from "interfaces";\n\nimport { ProductItem } from "components/product";\nimport { StoreContext } from "context/store";\n\nexport const ProductList: React.FC<IResourceComponentsProps> = () => {\n    //highlight-start\n    const [store] = useContext(StoreContext);\n    const { listProps } = useSimpleList<IProduct>({\n        permanentFilter: [\n            { field: "stores][id]", operator: "eq", value: store },\n        ],\n        metaData: { populate: ["image"] },\n    });\n    //highlight-end\n\n    return (\n        <List\n            pageHeaderProps={{\n                extra: <CreateButton onClick={() => createShow()} />,\n            }}\n        >\n            <AntdList\n                grid={{ gutter: 16, xs: 1 }}\n                style={{\n                    justifyContent: "center",\n                }}\n                {...listProps}\n                renderItem={(item) => (\n                    <AntdList.Item>\n                        <ProductItem item={item} editShow={editShow} />\n                    </AntdList.Item>\n                )}\n            />\n        </List>\n    );\n};\n')))),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:s.Z,alt:"Store Filter"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"product-create-page"},"Product Create Page"),(0,a.kt)("p",null,"Now let's see how we can create store-specific products. Which store we choose in Sider, the product we will create will automatically be the product of the selected store."),(0,a.kt)("p",null,"By overriding the ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"form")," and sending the selected store information, we specify which store it will be the product of."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"//highlight-start\nconst [store, setStore] = useContext(StoreContext);\n//highlight-end\n\n<Form\n    {...formProps}\n    ...\n     //highlight-start\n    onFinish={(values) => {\n        return (\n            formProps.onFinish?.({\n                ...values,\n                stores: store,\n            })\n        );\n    }}\n    //highlight-end\n>\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CreateProduct"',title:'"CreateProduct"'},'import { useContext } from "react";\nimport { useApiUrl } from "@pankod/refine-core";\nimport {\n    Create,\n    Drawer,\n    DrawerProps,\n    Form,\n    FormProps,\n    Input,\n    ButtonProps,\n    Upload,\n    Grid,\n} from "@pankod/refine-antd";\n\nimport { StoreContext } from "context/store";\n\nimport {\n    useStrapiUpload,\n    mediaUploadMapper,\n    getValueProps,\n} from "@pankod/refine-strapi-v4";\n\nimport { TOKEN_KEY } from "../../constants";\n\ntype CreateProductProps = {\n    drawerProps: DrawerProps;\n    formProps: FormProps;\n    saveButtonProps: ButtonProps;\n};\n\nexport const CreateProduct: React.FC<CreateProductProps> = ({\n    drawerProps,\n    formProps,\n    saveButtonProps,\n}) => {\n    const API_URL = useApiUrl();\n    //highlight-start\n    const [store, setStore] = useContext(StoreContext);\n    //highlight-end\n\n    const breakpoint = Grid.useBreakpoint();\n\n    const { ...uploadProps } = useStrapiUpload({\n        maxCount: 1,\n    });\n\n    return (\n        <Drawer\n            {...drawerProps}\n            width={breakpoint.sm ? "500px" : "100%"}\n            bodyStyle={{ padding: 0 }}\n        >\n            <Create saveButtonProps={saveButtonProps}>\n                <Form\n                    {...formProps}\n                    layout="vertical"\n                    initialValues={{\n                        isActive: true,\n                    }}\n                    //highlight-start\n                    onFinish={(values) => {\n                        return formProps.onFinish?.({\n                            ...mediaUploadMapper(values),\n                            stores: store,\n                        });\n                    }}\n                    //highlight-end\n                >\n                    <Form.Item\n                        label="Title"\n                        name="title"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label="Description" name="description">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label="Image">\n                        <Form.Item\n                            name="image"\n                            valuePropName="fileList"\n                            getValueProps={(data) =>\n                                getValueProps(data, API_URL)\n                            }\n                            noStyle\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Upload.Dragger\n                                name="files"\n                                action={`${API_URL}/upload`}\n                                headers={{\n                                    Authorization: `Bearer ${localStorage.getItem(\n                                        TOKEN_KEY,\n                                    )}`,\n                                }}\n                                listType="picture"\n                                multiple\n                                {...uploadProps}\n                            >\n                                <p className="ant-upload-text">\n                                    Drag & drop a file in this area\n                                </p>\n                            </Upload.Dragger>\n                        </Form.Item>\n                    </Form.Item>\n                </Form>\n            </Create>\n        </Drawer>\n    );\n};\n')))),(0,a.kt)("div",{class:"img-container"},(0,a.kt)("div",{class:"window"},(0,a.kt)("div",{class:"control red"}),(0,a.kt)("div",{class:"control orange"}),(0,a.kt)("div",{class:"control green"})),(0,a.kt)("img",{src:l.Z,alt:"Create Product"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"In this guide and in our example app, we talked about how we can build Multitenancy apps with ",(0,a.kt)("strong",{parentName:"p"},"refine"),". Developing a Multitenancy application with ",(0,a.kt)("strong",{parentName:"p"},"refine")," is quite simple. By creating a context and with the hooks that ",(0,a.kt)("strong",{parentName:"p"},"refine")," provides, you can quickly and easily produce similar applications in this logic."),(0,a.kt)("h2",{id:"live-codesandbox-example"},"Live Codesandbox Example"),(0,a.kt)("p",null,"Username: ",(0,a.kt)("inlineCode",{parentName:"p"},"refine-demo")),(0,a.kt)("p",null,"Password: ",(0,a.kt)("inlineCode",{parentName:"p"},"demodemo")),(0,a.kt)("iframe",{src:"https://codesandbox.io/embed/strapi-multi-tenant-example-t5d8x?fautoresize=1&fontsize=14&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"strapi-multi-tenant-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}v.isMDXComponent=!0},24946:function(e,t,n){t.Z=n.p+"assets/images/create-a4622675dfafb0b50808552efcab1948.gif"},32706:function(e,t,n){t.Z=n.p+"assets/images/orders-b98693202c1597d3a42fa4ebefc6a760.png"},55519:function(e,t,n){t.Z=n.p+"assets/images/products-e2cedae63e7d47375b82dd83e043f56c.png"},46434:function(e,t,n){t.Z=n.p+"assets/images/sider-1811563798d2877fa8eed5a00663ae20.png"},95433:function(e,t,n){t.Z=n.p+"assets/images/store-filter-b56f785c773806f481c4b20b6b8c6eb4.gif"},93349:function(e,t,n){t.Z=n.p+"assets/images/stores-7f58be6cf22847377bacb75dc34f97bf.png"}}]);