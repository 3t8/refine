"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[71717],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),m=p(a),c=n,f=m["".concat(i,".").concat(c)]||m[c]||l[c]||o;return a?r.createElement(f,s(s({ref:t},u),{},{components:a})):r.createElement(f,s({ref:t},u))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:n,s[1]=d;for(var p=2;p<o;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},86102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const o={id:"useUpdatePassword",title:"useUpdatePassword",siderbar_label:"useUpdatePassword",description:"useUpdatePassword data hook from refine is a modified version of react-query's useMutation for registration."},s=void 0,d={unversionedId:"core/hooks/auth/useUpdatePassword",id:"core/hooks/auth/useUpdatePassword",title:"useUpdatePassword",description:"useUpdatePassword data hook from refine is a modified version of react-query's useMutation for registration.",source:"@site/docs/core/hooks/auth/useUpdatePassword.md",sourceDirName:"core/hooks/auth",slug:"/core/hooks/auth/useUpdatePassword",permalink:"/docs/core/hooks/auth/useUpdatePassword",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/core/hooks/auth/useUpdatePassword.md",tags:[],version:"current",lastUpdatedBy:"Ayd\u0131n",lastUpdatedAt:1662036092,formattedLastUpdatedAt:"Sep 1, 2022",frontMatter:{id:"useUpdatePassword",title:"useUpdatePassword",siderbar_label:"useUpdatePassword",description:"useUpdatePassword data hook from refine is a modified version of react-query's useMutation for registration."},sidebar:"someSidebar",previous:{title:"useResetPassword",permalink:"/docs/core/hooks/auth/useResetPassword"},next:{title:"useLog",permalink:"/docs/core/hooks/audit-log/useLog"}},i={},p=[{value:"Usage",id:"usage",level:2},{value:"Redirection after updatePassword",id:"redirection-after-updatepassword",level:2}],u={toc:p};function l(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," calls ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method from ",(0,n.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider"},(0,n.kt)("inlineCode",{parentName:"a"},"authProvider"))," under the hood. It update passwords the user if ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method from ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider")," resolves and if it rejects shows an error notification."),(0,n.kt)("p",null,"It returns the result of ",(0,n.kt)("inlineCode",{parentName:"p"},"react-query"),"'s ",(0,n.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useMutation"},"useMutation"),"."),(0,n.kt)("p",null,"Data that is resolved from ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," will be returned as the ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," in the query result."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Normally refine provides a default update password page. If you prefer to use this default update password page, there is no need to handle update password flow manually.",(0,n.kt)("br",{parentName:"p"}),"\n","If we want to build a custom update password page instead of default one that comes with ",(0,n.kt)("strong",{parentName:"p"},"refine"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," can be used like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/customupdatePasswordPage"',title:'"pages/customupdatePasswordPage"'},'import { useUpdatePassword } from "@pankod/refine-core";\n\ntype updatePasswordVariables = {\n    password: string;\n};\n\nexport const updatePasswordPage = () => {\n    const { mutate: updatePassword } =\n        useUpdatePassword<updatePasswordVariables>();\n\n    const onSubmit = (values: updatePasswordVariables) => {\n        updatePassword(values);\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Password</label>\n            <input name="password" value="refine" />\n            <button type="submit">Submit</button>\n        </form>\n    );\n};\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"mutate")," acquired from ",(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," can accept any kind of object for values since the ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method from ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider")," doesn't have a restriction on its parameters.",(0,n.kt)("br",{parentName:"p"}),"\n","A type parameter for the values can be provided to ",(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword"),"."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const { mutate: updatePassword } = useUpdatePassword<{ newPassword: string }>();\n"))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," gives you query strings for the ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method from ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider"),". If you have a logic that sends a password regeneration email to the email address while resetting the password and proceeds through the access token. You can use ",(0,n.kt)("inlineCode",{parentName:"p"},"queryStrings")," variable ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method from ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider"),". For example, your regeneration link is ",(0,n.kt)("inlineCode",{parentName:"p"},"YOUR_DOMAIN/update-password?token=123"),". You can access the token from the parameters of the URL."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'const authProvider: AuthProvider = {\n    ...\n    updatePassword: (params) => {\n        // you can access query strings from params.queryStrings\n        console.log(params.token);\n        if(param.token === "123") {\n            // your logic to update the password\n        }\n        ...\n    }\n}\n'))),(0,n.kt)("h2",{id:"redirection-after-updatepassword"},"Redirection after updatePassword"),(0,n.kt)("p",null,"We have 2 options for redirecting the app after updatePassword successfully."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A custom url can be resolved from the promise returned from the ",(0,n.kt)("inlineCode",{parentName:"li"},"updatePassword")," method of the ",(0,n.kt)("a",{parentName:"li",href:"/docs/core/providers/auth-provider"},"authProvider"),".")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'const authProvider: AuthProvider = {\n    ...\n    updatePassword: () => {\n        ...\n        return Promise.resolve("/custom-url");\n    }\n}\n')),(0,n.kt)("p",null,"A custom url can be given to mutate the function from the ",(0,n.kt)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook if you want to redirect yourself to a certain url."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useUpdatePassword } from "@pankod/refine-core";\n\nconst { mutate: updatePassword } = useUpdatePassword();\n\nupdatePassword({ redirectPath: "/custom-url" });\n')),(0,n.kt)("p",null,"Then, you can handle this url in your ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," method of the ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"\nconst authProvider: AuthProvider = {\n    ...\n    updatePassword: ({ redirectPath }) => {\n        ...\n        return Promise.resolve(redirectPath);\n    }\n}\n\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the promise returned from the ",(0,n.kt)("inlineCode",{parentName:"li"},"updatePassword")," method of the ",(0,n.kt)("inlineCode",{parentName:"li"},"authProvider")," gets resolved with ",(0,n.kt)("inlineCode",{parentName:"li"},"false")," no redirection will occur.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const authProvider: AuthProvider = {\n    ...\n    updatePassword: () => {\n        ...\n        return Promise.resolve(false);\n    }\n}\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"If the promise returned from ",(0,n.kt)("inlineCode",{parentName:"p"},"updatePassword")," is resolved with nothing, app won't be redirected to any route by default.")),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"This hook can only be used if ",(0,n.kt)("inlineCode",{parentName:"p"},"authProvider")," is provided.")))}l.isMDXComponent=!0}}]);