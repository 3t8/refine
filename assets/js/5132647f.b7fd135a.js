"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[69159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(t),h=o,c=g["".concat(s,".").concat(h)]||g[h]||u[h]||a;return t?r.createElement(c,i(i({ref:n},p),{},{components:t})):r.createElement(c,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},49846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));const a={id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password."},i=void 0,l={unversionedId:"api-reference/core/components/auth-page",id:"api-reference/core/components/auth-page",title:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password.",source:"@site/docs/api-reference/core/components/auth-page.md",sourceDirName:"api-reference/core/components",slug:"/api-reference/core/components/auth-page",permalink:"/docs/api-reference/core/components/auth-page",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/api-reference/core/components/auth-page.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1664461731,formattedLastUpdatedAt:"Sep 29, 2022",frontMatter:{id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, forgot password and update password."},sidebar:"someSidebar",previous:{title:"useMenu",permalink:"/docs/api-reference/core/hooks/ui/useMenu"},next:{title:"<Refine>",permalink:"/docs/api-reference/core/components/refine-config"}},s={},d=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"Login",id:"login",level:2},{value:"<code>registerLink</code>",id:"registerlink",level:3},{value:"<code>forgotPasswordLink</code>",id:"forgotpasswordlink",level:3},{value:"<code>backLink</code>",id:"backlink",level:3},{value:"<code>submitButton</code>",id:"submitbutton",level:3},{value:"<code>providers</code>",id:"providers",level:3},{value:"Register",id:"register",level:2},{value:"<code>loginLink</code>",id:"loginlink",level:3},{value:"<code>backLink</code>",id:"backlink-1",level:3},{value:"<code>submitButton</code>",id:"submitbutton-1",level:3},{value:"Reset Password",id:"reset-password",level:2},{value:"<code>backLink</code>",id:"backlink-2",level:3},{value:"<code>submitButton</code>",id:"submitbutton-2",level:3},{value:"Update Password",id:"update-password",level:2},{value:"<code>backLink</code>",id:"backlink-3",level:3},{value:"<code>submitButton</code>",id:"submitbutton-3",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Interface",id:"interface",level:3}],p={toc:d};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component from ",(0,o.kt)("strong",{parentName:"p"},"refine")," contains authentication pages that can be used to login, register, forgot password and update password."),(0,o.kt)("p",null,"Before using ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component you need to add ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const { useNavigation: useNavigationShared } = RefineCore;\n\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst DashboardPage = () => {\n    const { replace } = useNavigationShared();\n    return (\n        <div>\n            <h1>Dashboard Page</h1>\n            <button\n                onClick={() => {\n                    replace("/login");\n                }}\n            >\n                Logout\n            </button>\n        </div>\n    );\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n')),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component can be used like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode previewHeight=333px url=http://localhost:3000/login",live:!0,disableScroll:!0,hideCode:!0,previewHeight:"333px",url:"http://localhost:3000/login"},'setInitialRoutes(["/login"]);\n\n// visible-block-start\nimport { Refine, AuthPage, useNavigation } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n    return (\n        <Refine\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    { path: "/login", element: <AuthPage type="login" /> },\n                ],\n            }}\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={AuthPage}\n            DashboardPage={DashboardPage}\n            resources={[\n                {\n                    name: "posts",\n                },\n            ]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component has the following types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"login"')," - a type of the login page and default type."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"register"')," - type of the registration page."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"forgotPassword"')," - type of the forgot password page."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"updatePassword"')," - type of the update password page.")),(0,o.kt)("h2",{id:"login"},"Login"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"login"'),":"),(0,o.kt)("h3",{id:"registerlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"registerLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"registerLink")," property defines the link to the registration page and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=390px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"390px"},'setInitialRoutes(["/login"]);\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="login"\n            registerLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/register">Don\'t have an account? Register</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst RegisterPage = () =>\n    Wrapper(<AuthPage type="register" loginLink="/login" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    // highlight-next-line\n                    { path: "/register", element: <RegisterPage /> },\n                    { path: "/login", element: <LoginPage /> }\n                ],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[\n                name: "posts",\n            ]}\n        />\n    );\n};\n// visible-block-end\nrender(<App/>);\n')),(0,o.kt)("h3",{id:"forgotpasswordlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"forgotPasswordLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"forgotPasswordLink")," property defines the link to the forgot password page and also you can a give node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'setInitialRoutes(["/login"]);\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { Wrapper } from "./Wrapper";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="login"\n            forgotPasswordLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/forgot-password">Forgot your password?</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst RegisterPage = () =>\n    Wrapper(<AuthPage type="register" loginLink="/login" />);\nconst ForgotPasswordPage = () =>\n    Wrapper(<AuthPage type="forgotPassword" backLink="/login" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    { path: "/register", element: <RegisterPage /> },\n                    {\n                        path: "/forgot-password",\n                        element: <ForgotPasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"backlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'setInitialRoutes(["/login"]);\n\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                <AuthPage\n                    type="login"\n                    backLink={\n                        <div\n                            style={{\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <Link to="/home">Go Home</Link>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\n\nconst HomePage = () => {\n    const { replace } = useNavigation();\n\n    return (\n        <div>\n            <h1>Home</h1>\n            <button\n                onClick={() => {\n                    replace("/login");\n                }}\n            >\n                Login\n            </button>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [\n                    { path: "/home", element: <HomePage /> },\n                    { path: "/login", element: <LoginPage /> },\n                ],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"submitbutton"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'setInitialRoutes(["/login"]);\n\nconst { useNavigation } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage, useLogin } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst LoginPage = () => {\n    const { mutate: login } = useLogin();\n\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                <AuthPage\n                    type="login"\n                    submitButton={\n                        <div\n                            style={{\n                                display: "flex",\n                                justifyContent: "center",\n                                padding: 5,\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <button\n                                type="submit"\n                                style={{\n                                    display: "flex",\n                                    flex: 1,\n                                    justifyContent: "center",\n                                }}\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    // you can access login form data from `event.target`\n                                    console.log("email", event.target.form);\n                                    // run your custom login logic\n                                    login();\n                                }}\n                            >\n                                Login\n                            </button>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            routerProvider={{\n                ...routerProvider,\n                routes: [{ path: "/login", element: <LoginPage /> }],\n            }}\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"providers"},(0,o.kt)("inlineCode",{parentName:"h3"},"providers")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"providers")," property defines the list of providers used to handle social login authentication."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=455px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"455px"},'setInitialRoutes(["/login"]);\n\nconst { useNavigation } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage, useLogin } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst LoginPage = () => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                    position: "relative",\n                    zIndex: 1,\n                }}\n            >\n                <AuthPage\n                    type="login"\n                    providers={[\n                        {\n                            name: "github",\n                            icon: (\n                                <svg\n                                    xmlns="http://www.w3.org/2000/svg"\n                                    width="24"\n                                    height="24"\n                                    viewBox="0 0 24 24"\n                                >\n                                    <path d="M12 0a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2.2c-3.3.7-4-1.4-4-1.4-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.4 1 .2-.8.5-1.3.8-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.1-.4-.6-1.6.1-3.2 0 0 1-.3 3.3 1.2a11.5 11.5 0 0 1 6 0C17.3 4.7 18.3 5 18.3 5c.7 1.6.2 2.9.1 3.2.8.8 1.3 1.9 1.3 3.2 0 4.6-2.9 5.6-5.5 5.9.4.4.8 1.1.8 2.2v3.3c0 .3.2.7.8.6A12 12 0 0 0 12 0z" />\n                                </svg>\n                            ),\n                            label: "Sign in with GitHub",\n                        },\n                        {\n                            name: "google",\n                            icon: (\n                                <svg\n                                    xmlns="http://www.w3.org/2000/svg"\n                                    width="24"\n                                    height="24"\n                                    viewBox="0 0 24 24"\n                                >\n                                    <path\n                                        fill="#4285F4"\n                                        d="m23.7 12.3-.1-2.3H12.3v4.5h6.4a5.6 5.6 0 0 1-2.4 3.6v3h3.9c2.2-2.1 3.5-5.2 3.5-8.8Z"\n                                    />\n                                    <path\n                                        fill="#34A853"\n                                        d="M12.3 24c3.2 0 6-1 7.9-3l-3.9-3a7.2 7.2 0 0 1-10.8-3.7h-4v3c2 4 6 6.7 10.8 6.7Z"\n                                    />\n                                    <path\n                                        fill="#FBBC05"\n                                        d="M5.5 14.3a7 7 0 0 1 0-4.6v-3h-4a11.9 11.9 0 0 0 0 10.7l4-3.1Z"\n                                    />\n                                    <path\n                                        fill="#EA4335"\n                                        d="M12.3 4.8c1.7 0 3.3.6 4.6 1.8L20.3 3A12 12 0 0 0 1.6 6.6l4 3.1c.9-2.8 3.5-5 6.7-5Z"\n                                    />\n                                </svg>\n                            ),\n                            label: "Sign in with Google",\n                        },\n                    ]}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            routerProvider={{\n                ...routerProvider,\n                routes: [{ path: "/login", element: <LoginPage /> }],\n            }}\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you want to use providers then you need to handle your provider name to use social authentication in the",(0,o.kt)("inlineCode",{parentName:"p"},"login")," method from ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication.\n",(0,o.kt)("inlineCode",{parentName:"p"},"providerName")," is the name of the selected provider from your list of providers."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const authProvider: AuthProvider = {\n    ...\n    login: ({ providerName }) => {\n        if (providerName === "github") {\n            window.location.href = "https://example.com/auth/github"; // your github auth url\n            return Promise.resolve(false);\n        }\n    }\n}\n'))),(0,o.kt)("h2",{id:"register"},"Register"),(0,o.kt)("p",null,"You can use following props for ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"register"'),":"),(0,o.kt)("h3",{id:"loginlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"loginLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"loginLink")," property defines the link to the login page and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'setInitialRoutes(["/register"]);\n\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst RegisterPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="register"\n            loginLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Have an account? Login</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    { path: "/register", element: <RegisterPage /> },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"backlink-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'setInitialRoutes(["/register"]);\n\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst RegisterPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="register"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    // highlight-next-line\n                    { path: "/register", element: <RegisterPage /> },\n                    { path: "/login", element: <LoginPage /> },\n                ],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"submitbutton-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'setInitialRoutes(["/register"]);\n\nconst { useNavigation } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage, useRegister } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst RegisterPage = () => {\n    const { mutate: register } = useRegister();\n\n    return Wrapper(\n        <AuthPage\n            type="register"\n            backLink="/login"\n            submitButton={\n                <div\n                    style={{\n                        display: "flex",\n                        justifyContent: "center",\n                        padding: 5,\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <button\n                        type="submit"\n                        style={{\n                            display: "flex",\n                            flex: 1,\n                            justifyContent: "center",\n                        }}\n                        onClick={(event) => {\n                            event.preventDefault();\n                            // you can access register form data from `event.target`\n                            console.log(event.target.form);\n                            // run your custom register logic(validation, etc.)\n                            register();\n                        }}\n                    >\n                        Register\n                    </button>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    // highlight-next-line\n                    { path: "/register", element: <RegisterPage /> },\n                    { path: "/login", element: <LoginPage /> },\n                ],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h2",{id:"reset-password"},"Reset Password"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"forgotPassword"'),":"),(0,o.kt)("h3",{id:"backlink-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/forgot-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/forgot-password"},'setInitialRoutes(["/forgot-password"]);\n\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst ForgotPasswordPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="forgotPassword"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" forgotPasswordLink="/forgot-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    {\n                        path: "/forgot-password",\n                        element: <ForgotPasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"submitbutton-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/forgot-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/forgot-password"},'setInitialRoutes(["/forgot-password"]);\n\nconst { useNavigation } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage, useForgotPassword } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst ForgotPasswordPage = () => {\n    const { mutate: forgotPassword } = useForgotPassword();\n    const { replace } = useNavigation();\n\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "375px",\n                }}\n            >\n                <AuthPage\n                    type="forgotPassword"\n                    backLink="/login"\n                    submitButton={\n                        <div\n                            style={{\n                                display: "flex",\n                                justifyContent: "center",\n                                padding: 5,\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <button\n                                type="submit"\n                                style={{\n                                    display: "flex",\n                                    flex: 1,\n                                    justifyContent: "center",\n                                }}\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    // you can access forgot password form data from `event.target`\n                                    console.log(event.target.form);\n                                    // run your custom forgot password logic(validation, etc.)\n                                    forgotPassword();\n                                    replace("/login");\n                                }}\n                            >\n                                Reset Password\n                            </button>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\nconst LoginPage = () => (\n    <AuthPage type="login" forgotPasswordLink="/forgot-password" />\n);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    {\n                        path: "/forgot-password",\n                        element: <ForgotPasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h2",{id:"update-password"},"Update Password"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"updatePassword"'),":"),(0,o.kt)("h3",{id:"backlink-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/update-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/update-password"},'setInitialRoutes(["/update-password"]);\n\nconst { useNavigation, useRouterContext } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst UpdatePasswordPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="updatePassword"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" backLink="/update-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    {\n                        path: "/update-password",\n                        element: <UpdatePasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h3",{id:"submitbutton-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/forgot-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/forgot-password"},'setInitialRoutes(["/update-password"]);\n\nconst { useNavigation } = RefineCore;\n\n// visible-block-start\nimport { Refine, AuthPage, useUpdatePassword } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst UpdatePasswordPage = () => {\n    const { mutate: updatePassword } = useUpdatePassword();\n\n    return Wrapper(\n        <AuthPage\n            type="updatePassword"\n            backLink="/login"\n            submitButton={\n                <div\n                    style={{\n                        display: "flex",\n                        justifyContent: "center",\n                        padding: 5,\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <button\n                        type="submit"\n                        style={{\n                            display: "flex",\n                            flex: 1,\n                            justifyContent: "center",\n                        }}\n                        onClick={(event) => {\n                            event.preventDefault();\n                            // you can access update password form data from `event.target`\n                            console.log(event.target.form);\n                            // run your custom update password logic(validation, etc.)\n                            updatePassword();\n                        }}\n                    >\n                        Update Password\n                    </button>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" backLink="/update-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/login", element: <LoginPage /> },\n                    {\n                        path: "/update-password",\n                        element: <UpdatePasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n            DashboardPage={DashboardPage}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"type"),(0,o.kt)("td",{parentName:"tr",align:null},"Render ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>")," forms by ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," property."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"login")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"register")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"forgotPassword")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"updatePassword"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"registerLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a register link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loginLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"forgotPasswordLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a forgot password link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"updatePasswordLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a update password link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"submitButton"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be used to submit form."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"backLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be displayed as a back link."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"providers"),(0,o.kt)("td",{parentName:"tr",align:null},"Render social logins if ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,o.kt)("inlineCode",{parentName:"td"},'"login"'),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#interface"},(0,o.kt)("inlineCode",{parentName:"a"},"IProvider[]")))))),(0,o.kt)("h3",{id:"interface"},"Interface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface IProvider {\n    name: string;\n    icon?: React.ReactNode;\n    label?: string;\n}\n")))}u.isMDXComponent=!0}}]);