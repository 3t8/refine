"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"customizable-issue-tracker-with-refine-and-supabase","metadata":{"permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase","source":"@site/blog/2021-11-12-issue-tracker-refine.md","title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","description":"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.","date":"2021-11-12T00:00:00.000Z","formattedDate":"November 12, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":17.63,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"nextItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"}},"content":"import start from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/start.png\';\\nimport login from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/login.gif\';\\nimport labelTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_table.png\';\\nimport common from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/common_table.png\';\\nimport userTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/user_table.png\';\\nimport taskTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_table.png\';\\nimport labelValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_value.png\';\\nimport priorityValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/priority_value.png\';\\nimport statusValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/status_value.png\';\\nimport list from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/list.png\';\\nimport taskList from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_list.png\';\\nimport create from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create.png\';\\nimport edit from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit.png\';\\nimport show from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/show.png\';\\nimport dashOverview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dash_overview.png\';\\nimport overview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/overview-project.gif\';\\nimport filter from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/filter.gif\';\\nimport dashboard from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dashboard.gif\';\\nimport taskTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_test.gif\';\\nimport createTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create_test.gif\';\\nimport editTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit_test.gif\';\\n\\n\\nIn this article, we will make a customizable internal issue tracker web application with supabase and refine.\\n\\n\x3c!--truncate--\x3e\\n\\nThis web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.\\n\\n\\nWe will use [Supabase](https://supabase.io/) in backend. Let\'s start by creating our Supabase account and tables.\\n\\n\\n## Create Supabase Database\\n\\nWe have to go to [Supabase](https://supabase.io/) and create an organization and database. Then we can start creating our tables.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={start} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nThe tables we need to create for our project are as follows:\\n\\n> label\\n* `id`: bigint\\n* `title`: varchar\\n* `color`: varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> priority \\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\n> status\\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> users\\n* `email` varchar\\n* `id` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={userTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n> tasks\\n* `id` bigint\\n* `title` varchar\\n* `description` varchar\\n* `start_time` date\\n* `end_time` date\\n* `label` bigint\\n* `priority` bigint\\n* `statuts` bigint\\n* `users` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe created our database tables. The important part here is that as you can see, in our tasks table, label, priority, status and users values \u200b\u200bare defined as bigint. To summarize the reason for this, we relation the label, priority, status and users tables that we created above with the corresponding values \u200b\u200bin our tasks table.\\n\\n:::tip\\n  Add Foreign key relationships steps:\\n\\n1. Got to a table, right click the column you wish to add a foreign key for\\n\\n2. Select \'edit column\'\\n\\n3. Select \'Add foreign key relation\'\\n\\n4. Select the table and column to make a foreign key for\\n\\n5. Click save\\n:::\\n\\n\\nSo we can take  reference their id and use their value in our tasks table.\\n\\nNow let\'s go to the Supabase Table editor and create our constant values.\\n\\n`Label Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Priority Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={priorityValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n`Status Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={statusValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s create a test task to better understand key relation. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, since we have defined the ids of our label, status, priority and users tables as references to our tasks table, we can now use their values.\\n\\nLet\'s look at how we can use this data we created on the Supabase side with refine .\\n\\n## Refine Project Setup\\n\\nNow let\'s refine the task-manager panel. With superplate, we can quickly create a refine project\\n\\n```bash\\n  npx superplate-cli refine-task-manager\\n```\\n\\n```bash\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 refine-task-manager\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to customize theme?: \xb7 css\\n\u2714 Data Provider: \xb7 supabase-data-provider\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nAfter the project setup is loaded, let\'s start by entering our project and making the necessary changes.\\n\\nLet\'s add our supabase url and key to our refine project.\\n\\n\\n```ts title=\\"src/utility/supabaseClient.ts\\"\\nimport { createClient } from \\"@pankod/refine-supabase\\";\\n\\nconst SUPABASE_URL = \\"YOUR_SUPABASE_URL\\";\\nconst SUPABASE_KEY = \\"YOUR_SUPABASE_API_KEY\\";\\n\\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\\n```\\n\\nNow we can access and list the tables we created via the supabase.\\n\\n- Add custom login and signup page in App.tsx\\n\\nOur purpose here is to log in if there is a registered user in the supabase. If you do not have a registered user, saving a user to the supabase with refine.\\n \\n## Custom Login Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useLogin,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport \\"./styles.css\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                 initialValues={{\\n                  email: \\"info@refine.dev\\",\\n                  password: \\"refine-supabase\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\", marginLeft:  12 }}\\n                    onClick={() => push(\\"signup\\")}\\n                  >\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n## Custom Signup Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ISignup {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Signup: React.FC = () => {\\n  const [form] = Form.useForm<ISignup>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign Up\\n    </Title>\\n  );\\n\\n  const signup = async (email: string, password: string) => {\\n    const { error } = await supabaseClient.auth.signUp({\\n      email,\\n      password,\\n    });\\n\\n    if (error) {\\n      return Promise.reject(error);\\n    }\\n  };\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ISignup>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  signup(values.email, values.password);\\n                  push(\\"login\\");\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button\\n                  type=\\"primary\\"\\n                  size=\\"large\\"\\n                  htmlType=\\"submit\\"\\n                  block\\n                  style={{ marginTop: 24 }}\\n                >\\n                  Create Account\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 16 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\" }}\\n                    onClick={() => push(\\"login\\")}\\n                  >\\n                    Sign in\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\n\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nHere we define our login and signup pages. We then use the refine\'s [router-provider](https://refine.dev/docs/next/api-references/providers/router-provider/) and [useNavigaton](https://refine.dev/docs/next/api-references/hooks/navigation/useNavigation/) hooks to switch between login and signup.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe can now create supabase users and log in from our refine interface.\\n \\n## Add Resource\\n**Adding resources according to the table name we created in Supabase**\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\"\\n        },\\n        {\\n          name: \\"tasks\\"\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={list} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nWe can now create lists of tasks and make changes to them.\\n\\n## Add List and Filter \\n\\n```tsx title=\\"src/pages/task/list.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  useMany,\\n  List,\\n  Table,\\n  TextField,\\n  TagField,\\n  DateField,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n  HttpError,\\n  CrudFilters,\\n  Row,\\n  Col,\\n  Card,\\n} from \\"@pankod/refine\\";\\n\\nimport {\\n  ILabel,\\n  IPriority,\\n  ITask,\\n  ITaskFilterVariables,\\n  IStatus,\\n  IAuthUser,\\n} from \\"interfaces\\";\\n\\nimport { Filter } from \\"../task\\";\\n\\nexport const TaskList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, searchFormProps } = useTable<\\n    ITask,\\n    HttpError,\\n    ITaskFilterVariables\\n  >({\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { title, label, priority, users, status, start_time, end_time } =\\n        params;\\n\\n      filters.push(\\n        {\\n          field: \\"title\\",\\n          operator: \\"eq\\",\\n          value: title,\\n        },\\n\\n        {\\n          field: \\"label\\",\\n          operator: \\"eq\\",\\n          value: label,\\n        },\\n\\n        {\\n          field: \\"priority\\",\\n          operator: \\"eq\\",\\n          value: priority,\\n        },\\n\\n        {\\n          field: \\"users\\",\\n          operator: \\"eq\\",\\n          value: users,\\n        },\\n\\n        {\\n          field: \\"status\\",\\n          operator: \\"eq\\",\\n          value: status,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"gte\\",\\n          value: start_time ? start_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"lte\\",\\n          value: start_time ? start_time[1].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"gte\\",\\n          value: end_time ? end_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"lte\\",\\n          value: end_time ? end_time[1].toISOString() : undefined,\\n        }\\n      );\\n      return filters;\\n    },\\n  });\\n\\n  const labelIds = tableProps?.dataSource?.map((item) => item.label) ?? [];\\n  const priorityIds = tableProps?.dataSource?.map((item) => item.priority) ?? [];\\n  const assignedIds = tableProps?.dataSource?.map((item) => item.users) ?? [];\\n  const statusIds = tableProps?.dataSource?.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds,\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds,\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds,\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds,\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col lg={6} xs={24}>\\n        <Card title=\\"Task Filter\\">\\n          <Filter formProps={searchFormProps} />\\n        </Card>\\n      </Col>\\n      <Col lg={18} xs={24}>\\n        <List>\\n          <Table {...tableProps} rowKey=\\"id\\">\\n            <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n            <Table.Column\\n              dataIndex=\\"label\\"\\n              title=\\"Label\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    color={\\n                      labels?.data.find((item) => item.id === value)?.color\\n                    }\\n                    value={\\n                      labels?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"priority\\"\\n              title=\\"Priority\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      priority?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"users\\"\\n              title=\\"Assigned\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    value={\\n                      assigned?.data.find((item) => item.id === value)?.email\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"status\\"\\n              title=\\"Status\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      status?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"start_time\\"\\n              title=\\"Start Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column\\n              dataIndex=\\"end_time\\"\\n              title=\\"Due Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column<ITask>\\n              title=\\"Actions\\"\\n              dataIndex=\\"actions\\"\\n              render={(_, record): React.ReactNode => {\\n                return (\\n                  <Space>\\n                    <ShowButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <EditButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <DeleteButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                  </Space>\\n                );\\n              }}\\n            />\\n          </Table>\\n        </List>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n\\n```tsx title=\\"src/pages/task/filter.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  Form,\\n  FormProps,\\n  Input,\\n  useSelect,\\n  Select,\\n  DatePicker,\\n  Icons,\\n  Button,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { RangePicker } = DatePicker\\n\\nexport const Filter: React.FC<{ formProps: FormProps }> = ({ formProps }) => {\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  return (\\n    <Form layout=\\"vertical\\" {...formProps}>\\n      <Form.Item label=\\"Search\\" name=\\"title\\">\\n        <Input\\n          placeholder=\\"Title\\"\\n          prefix={<Icons.SearchOutlined />}\\n        />\\n      </Form.Item>\\n      <Form.Item label=\\"Label\\" name=\\"label\\">\\n        <Select {...labelSelectProps} allowClear placeholder=\\"Seach Label\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n        <Select {...priorityProps} allowClear placeholder=\\"Seach Priority\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Status\\" name=\\"status\\">\\n        <Select {...statusProps} allowClear placeholder=\\"Search Status\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Assigned\\" name=\\"users\\">\\n        <Select {...assigneProps} allowClear placeholder=\\"Search Assignee\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item>\\n        <Button htmlType=\\"submit\\" type=\\"primary\\">\\n          Filter\\n        </Button>\\n      </Form.Item>\\n    </Form>\\n  );\\n};\\n```\\n\\n```ts title=\\"src/interfaces\\"\\nexport interface IAuthUser {\\n  id: string;\\n  email: string;\\n}\\n\\nexport interface ILabel {\\n  id: string;\\n  title: string;\\n  color: string;\\n}\\n\\nexport interface IPriority {\\n  id: string;\\n  title: string;\\n}\\n\\nexport interface IStatus {\\n  id: string;\\n  title: string\\n}\\n\\nexport interface ITask {\\n  id: string;\\n  title: string;\\n  description: string;\\n  start_time: string;\\n  end_time: string;\\n  label: string;\\n  priority: string;\\n  status: string;\\n  users: string\\n}\\n\\nexport interface ITaskFilterVariables {\\n  title: string;\\n  label: string;\\n  priority: string;\\n  users: string;\\n  status: string;\\n  start_time: [Dayjs, Dayjs];\\n  end_time: [Dayjs, Dayjs];\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskList} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n Using refine\'s [tableSearch](https://refine.dev/docs/guides-and-concepts/search/table-search) and list, we can create our list and perform filtering. \\n\\nAs seen in the example, we listed and showed the task table we created in supabase with refine. Now you can make changes as you want with refine.\\n\\nNow how do we create task? Let\'s examine how we can edit them and see their details.\\n\\n## Create Task\\n\\n```tsx title=\\"src/pages/task/create.tsx\\"\\nimport {\\n  useForm,\\n  Create,\\n  Form,\\n  Input,\\n  Select,\\n  useSelect,\\n  IResourceComponentsProps,\\n  DatePicker,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const TaskCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ILabel>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: prioritySelectPorps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneSelectProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusSelectProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  })\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Title\\"\\n          name=\\"title\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...prioritySelectPorps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne To\\" name=\\"users\\">\\n          <Select {...assigneSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Select Status\\" name=\\"status\\">\\n          <Select {...statusSelectProps}/>\\n        </Form.Item>\\n        <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n        <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={createTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n\\n## Edit Task\\n\\n```tsx title=\\"src/pages/task/edit.tsx\\"\\nimport {\\n  useForm,\\n  Form,\\n  Input,\\n  Select,\\n  Edit,\\n  useSelect,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority,  IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const EditTask: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\",\\n  });\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item label=\\"Title\\" name=\\"title\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...priorityProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Status\\" name=\\"status\\">\\n          <Select {...statusProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne\\" name=\\"users\\">\\n          <Select {...assigneProps} />\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={editTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Show Task\\n\\n```tsx title=\\"src/pages/task/show\\"\\nimport { useShow, Show, Typography, Tag, useOne, DateField } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const TaskShow: React.FC = () => {\\n  const { queryResult } = useShow<ITask>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { data: assigned } = useOne<IAuthUser>({\\n    resource: \\"users\\",\\n    id: record?.users || \\"\\",\\n  });\\n\\n  const { data: label } = useOne<ILabel>({\\n    resource: \\"label\\",\\n    id: record?.label || \\"\\",\\n  });\\n\\n  const { data: priority } = useOne<IPriority>({\\n    resource: \\"priority\\",\\n    id: record?.priority || \\"\\",\\n  });\\n\\n  const { data: status } = useOne<IStatus>({\\n    resource: \\"status\\",\\n    id: record?.status || \\"\\",\\n  });\\n\\n  return (\\n    <Show isLoading={isLoading}>\\n      <Title level={5}>Task:</Title>\\n      <Text>{record?.title || \\"-\\"}</Text>\\n\\n      <Title level={5}>Task Desciption:</Title>\\n      <Text>{record?.description}</Text>\\n\\n      <Title level={5}>Assigned To:</Title>\\n      <Text>\\n        <Tag>{assigned?.data?.email ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Label:</Title>\\n      <Text>\\n        <Tag>{label?.data?.title ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Priority:</Title>\\n      <Text>{priority?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Status:</Title>\\n      <Text>{status?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Start Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.start_time ?? \\"-\\"}/>\\n\\n      <Title level={5}>Due Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.end_time ?? \\"-\\"}/>\\n    </Show>\\n  );\\n};\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nBy using Refine\'s basic views such as [create](https://refine.dev/docs/api-references/components/basic-views/create), [edit](https://refine.dev/docs/api-references/components/basic-views/edit/) and [show](https://refine.dev/docs/api-references/components/basic-views/show/), we can now create tasks, edit these tasks and view their details.\\n\\n\\nLet\'s see how to add a dashboard page to our project together.\\n\\n## Add Custom Chart \\n\\n```tsx title=\\"src/components/task/pie.tsx\\"\\nimport React from \\"react\\";\\nimport { Pie } from \\"@ant-design/charts\\";\\n\\ninterface ChartProps {\\n  data: {\\n    type: any;\\n    value: any;\\n  }[];\\n}\\n\\nexport const TaskChart: React.FC<ChartProps> = ({ data }) => {\\n  var config = {\\n    data: data,\\n    angleField: \\"value\\",\\n    colorField: \\"type\\",\\n    radius: 0.9,\\n    label: {\\n      type: \\"inner\\",\\n      offset: \\"-30%\\",\\n      content: function content(_ref: any) {\\n        var percent = _ref.percent;\\n        return \\"\\".concat((percent * 100).toFixed(0), \\"%\\");\\n      },\\n      style: {\\n        fontSize: 14,\\n        textAlign: \\"center\\",\\n      },\\n    },\\n    interactions: [{ type: \\"element-active\\" }],\\n  };\\n  return <Pie {...config} />;\\n};\\n```\\n\\n```tsx title=\\"src/pages/dashboard/index.tsx\\"\\nimport React from \\"react\\";\\nimport { useList, useMany, Row, Col, Card } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\nimport { TaskChart } from \\"components/task/pie\\";\\nimport { groupBy } from \\"helper\\";\\n\\nexport const Dashboard = () => {\\n  const taskList = useList<ITask>({\\n    resource: \\"tasks\\",\\n  });\\n\\n  const labelIds = taskList.data?.data.map((item) => item.label) ?? [];\\n  const priorityIds = taskList.data?.data.map((item) => item.priority) ?? [];\\n  const assignedIds = taskList.data?.data.map((item) => item.users) ?? [];\\n  const statusIds = taskList.data?.data.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds || [],\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds || [],\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds || [],\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds || [],\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              labels?.data.map((i) => {\\n                return { type: i.title, value: groupBy(labelIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              priority?.data.map((i) => {\\n                return { type: i.title, value: groupBy(priorityIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              status?.data.map((i) => {\\n                return { type: i.title, value: groupBy(statusIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              assigned?.data.map((i) => {\\n                return { type: i.email, value: groupBy(assignedIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashOverview} alt=\\"overview\\" />\\n</div>\\n<br/>\\n\\n\\n \\nFinal version of our `<App.tsx/>`.\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      DashboardPage={Dashboard}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\",\\n          list: UserList,\\n        },\\n        {\\n          name: \\"tasks\\",\\n          list: TaskList,\\n          edit: EditTask,\\n          create: TaskCreate,\\n          show: TaskShow,\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\nOur project is done. Lets see how its look like.\\n\\n## Overview Project\\n\\n`Overview`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Task Filter`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={filter} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Dashboard Page`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashboard} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, we made a simple and short task manager application using refine on our front end and using its data-provider. \\n\\n[Here is repo](https://github.com/mlhekinci/refine-supabase-manage-task) \\n\\nFor more information about Refine: [Refine Github Page](https://github.com/pankod/refine)\\n\\nFor other examples and articles that will interest you with refine:  [https://refine.dev/blog/](https://refine.dev/blog/)\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-supabase-issue-tracker-ifuh4?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-supabase-issue-tracker\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"migrating-a-react-admin-application-to-refine","metadata":{"permalink":"/blog/migrating-a-react-admin-application-to-refine","source":"@site/blog/2021-10-6-migrating-react-admin-application-to-refine.md","title":"Migrating a React-Admin Application to Refine","description":"Recently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity.","date":"2021-10-06T00:00:00.000Z","formattedDate":"October 6, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react-admin","permalink":"/blog/tags/react-admin"},{"label":"adminpanel","permalink":"/blog/tags/adminpanel"},{"label":"crud","permalink":"/blog/tags/crud"}],"readingTime":6.025,"truncated":true,"authors":[{"name":"Umut \xd6zdemir","title":"Frontend Developer","url":"https://github.com/miyavsu-limited","imageURL":"https://github.com/miyavsu-limited.png","key":"umut"}],"prevItem":{"title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase"},"nextItem":{"title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi"}},"content":"import sider from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/sider.png\';\\nimport react_admin from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin.png\';\\nimport refine_table from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/refine_table.png\';\\nimport react_admin_create from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin_create.png\';\\n\\nRecently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity. My mission was to migrate it and it took one and a half days for me to rewrite the panel in refine.\\n\\n\x3c!--truncate--\x3e\\n### Migrating a React-Admin Application to refine\\n\\n[refine](https://refine.dev/) is an extremely customizable [Ant Desig](https://ant.design/) based [React](https://reactjs.org/) framework for data-intensive applications and it handles most of the CRUD functionality that can be a requirement in many applications, without much effort. Providing the rest of the desired functionality (outside CRUD) is up to you, like in any <strong>React</strong> application.\\n\\n[React-Admin](https://marmelab.com/react-admin/) is an amazing B2B application framework based on [Material Design](https://material.io/), using [Material UI](https://mui.com/). It provides ready-to-fetch-data components, so you just compose them together to create an application.\\n\\n<strong>refine</strong> is different in the way it makes you compose your application. refine directly provides <strong>Ant Design</strong> components and some hooks to work with those components. Hooks give you the required props for those Ant Design components.\\n\\nIt is, also, one step forward towards the dream of <strong>making it headless</strong>.\\n\\nTo learn more about refine, see: https://refine.dev/docs/getting-started/overview\\n\\nRecently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity. My mission was to migrate it and it took one and a half days for me to rewrite the panel in refine.\\n\\n|  <img src={sider} alt=\\"sider\\" /> | \\n|:--:| \\n| *Our panel has 7 resources (all listable), which 4 of them must have create and edit pages, 6 of them must be exportable to `.csv` files and some of those resources have images, all images must be uploaded in `base64` format.* |\\n\\nThis is how it looks before the migration (React-Admin):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nAnd this is how it looks like after the migration (refine):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nBoth of these images show a list page of a resource (campaign).\\n\\n## Migrating Listing Pages\\n\\nList pages have one/more tables inside them. Ideally, all table state should be managed by the framework in use.\\n\\nrefine is very flexible with tables. You can put them anywhere, configure it as much as you want with [useTable](https://refine.dev/docs/api-references/hooks/table/useTable/). See the [fineFoods example](https://refine.dev/demo/) and [it\'s code](https://github.com/pankod/refine/blob/master/examples/fineFoods/admin/src/pages/categories/list.tsx).\\n\\nHere is an example list page from React-Admin that shows you the list of `id`,`name`, `isActive`, `startDate`, `endDate` from the API endpoint for `campaigns` resource.\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List as ReactAdminList,\\n    Datagrid,\\n    TextField,\\n    BooleanField,\\n    EditButton,\\n} from \\"react-admin\\";\\n\\nimport LocalizeDateField from \\"../../fields/LocalizeDateField\\";\\n\\nconst List = (props) => (\\n    <ReactAdminList {...props}>\\n        <Datagrid>\\n            <TextField source=\\"id\\" label=\\"ID\\" />\\n            <TextField source=\\"name\\" label=\\"Name\\" />\\n            <BooleanField source=\\"isActive\\" label=\\"Active\\" />\\n            <LocalizeDateField source=\\"startDate\\" />\\n            <LocalizeDateField source=\\"endDate\\" />\\n            <EditButton basePath=\\"/campaigns\\" />\\n        </Datagrid>\\n    </ReactAdminList>\\n);\\n\\nexport default List;\\n```\\n\\nAnd looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nHere\'s the code that renders this same list in refine:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List,\\n    Table,\\n    Space,\\n    Button,\\n    BooleanField,\\n    DateField,\\n    CreateButton,\\n    EditButton,\\n    ExportButton,\\n    Icons,\\n    useTable,\\n    getDefaultSortOrder,\\n    useExport,\\n    useDeleteMany,\\n    IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ICampaign } from \\"interfaces\\";\\n\\nexport const CampaignsList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<ICampaign>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n    });\\n\\n    const { isLoading: isExportLoading, triggerExport } = useExport();\\n\\n    const [selectedRowKeys, setSelectedRowKeys] = React.useState<React.Key[]>(\\n        [],\\n    );\\n\\n    const handleSelectChange = (selectedRowKeys: React.Key[]) => {\\n        setSelectedRowKeys(selectedRowKeys);\\n    };\\n\\n    const rowSelection = {\\n        selectedRowKeys,\\n        onChange: handleSelectChange,\\n    };\\n\\n    const { mutate, isLoading } = useDeleteMany<ICampaign>();\\n\\n    const deleteSelectedItems = () => {\\n        mutate(\\n            {\\n                resource: \\"campaigns\\",\\n                ids: selectedRowKeys.map(String),\\n                mutationMode: \\"undoable\\",\\n            },\\n            {\\n                onSuccess: () => {\\n                    setSelectedRowKeys([]);\\n                },\\n            },\\n        );\\n    };\\n\\n    const hasSelected = selectedRowKeys.length > 0;\\n\\n    return (\\n        <List\\n            pageHeaderProps={{\\n                subTitle: hasSelected && (\\n                    <Button\\n                        type=\\"text\\"\\n                        onClick={() => deleteSelectedItems()}\\n                        loading={isLoading}\\n                        icon={\\n                            <Icons.DeleteOutlined style={{ color: \\"green\\" }} />\\n                        }\\n                    >\\n                        Delete\\n                    </Button>\\n                ),\\n                extra: (\\n                    <Space>\\n                        <CreateButton />\\n                        <ExportButton\\n                            onClick={triggerExport}\\n                            loading={isExportLoading}\\n                        />\\n                    </Space>\\n                ),\\n            }}\\n        >\\n            <Table {...tableProps} rowSelection={rowSelection} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                    width=\\"70px\\"\\n                />\\n                <Table.Column\\n                    dataIndex=\\"name\\"\\n                    title=\\"Name\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"name\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"isActive\\"\\n                    title=\\"Active\\"\\n                    render={(isActive) => <BooleanField value={isActive} />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"isActive\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"startDate\\"\\n                    title=\\"Start Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"startDate\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"endDate\\"\\n                    title=\\"End Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"endDate\\", sorter)}\\n                />\\n                <Table.Column<ICampaign>\\n                    fixed=\\"right\\"\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, { id }) => <EditButton recordItemId={id} />}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nIt is long. Because we had to handle selection and bulk delete button manually. That\'s because refine is decoupled from Ant Design components\' code, too. But the advantage here is that you use Ant Design. You can use the Ant Design\'s Table as however you like, and then connect its data with refine. The point is customizability.\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nIn refine, we use Ant Design\'s [Table](https://ant.design/components/table/) components.\\n\\n## Migrating Create/Edit Pages\\n\\nA resource creation page\'s code looked like this in React-Admin:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    required,\\n    Create as ReactAdminCreate,\\n    SimpleForm,\\n    BooleanInput,\\n    TextInput,\\n    DateTimeInput,\\n} from \\"react-admin\\";\\n\\nconst Create = (props: any) => (\\n    <ReactAdminCreate {...props}>\\n        <SimpleForm>\\n            <TextInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"name\\"\\n                validate={[required()]}\\n            />\\n            <BooleanInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"isActive\\"\\n                label=\\"Active\\"\\n            />\\n            <DateTimeInput\\n                source=\\"startDate\\"\\n                label=\\"Start Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n            <DateTimeInput\\n                source=\\"endDate\\"\\n                label=\\"End Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n        </SimpleForm>\\n    </ReactAdminCreate>\\n);\\n\\nexport default Create;\\n```\\n\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin_create} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nFor refine, code of our campaign create page looks like:\\n\\n```tsx\\nimport {\\n    Create,\\n    DatePicker,\\n    Form,\\n    Input,\\n    IResourceComponentsProps,\\n    Switch,\\n    useForm,\\n} from \\"@pankod/refine\\";\\nimport dayjs from \\"dayjs\\";\\n\\nexport const CampaignsCreate: React.FC<IResourceComponentsProps> = () => {\\n    const { formProps, saveButtonProps } = useForm();\\n\\n    return (\\n        <Create saveButtonProps={saveButtonProps}>\\n            <Form\\n                {...formProps}\\n                layout=\\"vertical\\"\\n                initialValues={{ isActive: false }}\\n            >\\n                <Form.Item\\n                    label=\\"Name\\"\\n                    name=\\"name\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Is Active\\"\\n                    name=\\"isActive\\"\\n                    valuePropName=\\"checked\\"\\n                >\\n                    <Switch />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Start Date\\"\\n                    name=\\"startDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"End Date\\"\\n                    name=\\"endDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n            </Form>\\n        </Create>\\n    );\\n};\\n```\\n\\nIn both refine and React-Admin, by default, there aren\'t much differences between new resource page\'s code and resource edit page\'s code.\\n\\nAlso note that for both refine and React-Admin, this is all customizable. These code examples and screenshots mean little or no extra customization in resource list/create/edit pages.\\n\\nAdvantage of refine is that you use Ant Design directly. Let\'s assume you have your own way around your Ant Design application. refine doesn\'t interfere. Instead, it provides you the necessary data for your Ant Design application. This way, refine gives you all the freedom to customize all the components as you wish.\\n\\nHappy hacking with refine \ud83e\ude84"},{"id":"create-a-feedback-admin-panel-with-refine-and-strapi","metadata":{"permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi","source":"@site/blog/2021-10-4-feedback-admin-panel.md","title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","description":"We will quickly create an api with Strapi and then develop its frontend with refine. Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":6.85,"truncated":true,"authors":[{"name":"Salih \xd6zdemir","title":"Software Developer","url":"https://github.com/salihozdemir","imageURL":"https://github.com/salihozdemir.png","key":"salih"}],"prevItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"}},"content":"import refine_welcome from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/refine_welcome.png\';\\nimport header from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/header.png\';\\nimport strapi_content from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/strapi_content.png\';\\nimport signin from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/signin.png\';\\nimport user from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/user.png\';\\nimport feedback from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback.png\';\\nimport feedbacks from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedbacks.png\';\\nimport feedback_overview from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback_overview.gif\';\\nimport widgets from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/widgets.gif\';\\n\\n\\nIn this article, we will create a panel where we can manage the feedback we receive from our web application. \\n\\n\x3c!--truncate--\x3e\\n\\nWe will quickly create an api with [Strapi.io](https://strapi.io) and then develop its frontend with [refine](https://refine.dev). Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.\\n\\nFeatures that our panel will have:\\n\\n- Authentication with strapi.io\\n- A page to list feedbacks\\n- Mutation on Feedbacks\\n\\n### Creating api with `Strapi`\\n\\nLet\'s create our backend project with Strapi\'s [quick start guide](https:/strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html).\\n\\n```bash\\nnpx create-strapi-app strapi-feedback-api --quickstart\\n```\\n\\nAfter the installation is complete, the tab will automatically open in the browser. Here, let\'s create a `feedback` collection with Content-Types Builder.\\n\\nQuite simply, a feedback should have a `description` text field, A `page` text field that shows the page the feedback was sent from, and a `type` enumeration field indicating the type of feedback (issue, idea, other, archive).\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={strapi_content} alt=\\"content\\" />\\n</div>\\n<br />\\n\\n### Creating panel with `refine`\\n\\nLet\'s create our frontend project with refine\'s [setting up guide](https://refine.dev/docs/#setting-up).\\n\\nThere are two alternative methods to set up a refine application. We will quickly create our application with [superplate](https://pankod.github.io/superplate).\\n\\n```bash\\nnpx superplate-cli refine-feedback-client\\n```\\n\\nSelect the following options to complete the CLI wizard:\\n\\n```\\n? Select your project type:\\n\u276f refine\\n\\n? What will be the name of your app:\\nrefine-strapi-web\\n\\n? Package manager:\\n\u276f Npm\\n\\n? Do you want to customize the theme?:\\n\u276f No (Ant Design default theme)\\n\\n? Data Provider :\\n\u276f Strapi\\n\\n? Do you want to customize layout?\\n\u276f Yes, I want\\n\\n? i18n - Internationalization:\\n\u276f No\\n```\\n\\nAfter the installation is completed, Strapi-specific [data provider](https://github.com/pankod/refine/blob/master/packages/strapi), auth provider, and also layout components that we can change the default view of Refine with the custom layout option will be included in our project.\\n\\nNow, bootstrap the app with the following command:\\n\\n```bash\\nnpm run dev\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_welcome} alt=\\"welcome\\" />\\n</div>\\n<br />\\n\\nNow let\'s list the changes we will make:\\n\\n- Change our Strapi API URL\\n- Remove components that we will not use when changing the refinement look\\n- Adding resources according to the collection name we created in Strapi\\n\\n```diff\\n+ import { Refine } from \\"@pankod/refine\\";\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi\\";\\nimport strapiAuthProvider from \\"authProvider\\";\\nimport {\\n- Title,\\n  Header,\\n- Sider,\\n- Footer,\\n  Layout,\\n  OffLayoutArea,\\n} from \\"components\\";\\n\\nfunction App() {\\n-  const API_URL = \\"your-strapi-api-url\\";\\n+  const API_URL = \\"http://localhost:1337\\";\\n\\n  const { authProvider, axiosInstance } = strapiAuthProvider(API_URL);\\n  const dataProvider = DataProvider(API_URL, axiosInstance);\\n  return (\\n    <Refine\\n      dataProvider={dataProvider}\\n      authProvider={authProvider}\\n-     Title={Title}\\n      Header={Header}\\n-     Sider={Sider}\\n-     Footer={Footer}\\n      Layout={Layout}\\n      OffLayoutArea={OffLayoutArea}\\n      routerProvider={routerProvider}\\n      resources={[\\n        {\\n          name: \\"feedbacks\\",\\n        },\\n      ]}\\n    />\\n  );\\n}\\n \\n\\nexport default App;\\n```\\n\\nAfter adding the resource, our auth provider was activated.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\nNow let\'s create a user on the Strapi to be able to login to the application.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={user} alt=\\"user\\" />\\n</div>\\n<br />\\n\\nWe created a user and login to the application with this user.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback} alt=\\"feedback\\" />\\n</div>\\n<br />\\n\\nLet\'s customize the layout component, remove the sider and add a header.\\n\\n### Custom Layout\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout as AntLayout } from \\"antd\\";\\n\\nimport { LayoutProps } from \\"@pankod/refine\\";\\n\\nexport const Layout: React.FC<LayoutProps> = ({\\n  children,\\n  Header,\\n  OffLayoutArea,\\n}) => {\\n  return (\\n    <AntLayout style={{ minHeight: \\"100vh\\", flexDirection: \\"row\\" }}>\\n      <AntLayout>\\n        <Header />\\n        <AntLayout.Content>\\n          {children}\\n          <OffLayoutArea />\\n        </AntLayout.Content>\\n      </AntLayout>\\n    </AntLayout>\\n  );\\n};\\n```\\n\\nLet\'s customize the header component too\\n\\n### Custom Header\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout } from \\"antd\\";\\n\\nexport const Header: React.FC = () => {\\n  return (\\n    <Layout.Header\\n      style={{\\n        display: \\"flex\\",\\n        justifyContent: \\"center\\",\\n        alignItems: \\"center\\",\\n        height: \\"64px\\",\\n        backgroundColor: \\"#FFF\\",\\n        borderBottom: \\"1px solid #f0f0f0\\",\\n      }}\\n    >\\n      <img src=\\"./refeedback.png\\" alt=\\"refeedback\\" style={{ width: \\"250px\\" }} />\\n    </Layout.Header>\\n  );\\n};\\n```\\n\\nIn the new view, there are no siders anymore and the header we have customized is here.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={header} alt=\\"header\\" />\\n</div>\\n<br />\\n\\nNow we come to the part where we can list our feedback and make changes to it. Before that, let\'s create dummy feedback records on Strapi.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedbacks} alt=\\"feedbacks\\" />\\n</div>\\n<br />\\n\\n\\nCreate a `FeedbackList.tsx` file under the `pages` folder. Then, let\'s create our component as follows with the components and hooks that come with refine.\\n\\n### Create FeedbackList\\n\\n```tsx\\nimport {\\n  List,\\n  Typography,\\n  AntdList,\\n  useSimpleList,\\n  CrudFilters,\\n  Form,\\n  HttpError,\\n  Row,\\n  Col,\\n  Tag,\\n  Radio,\\n  Space,\\n  Descriptions,\\n  Button,\\n  DateField,\\n  Card,\\n  useUpdate,\\n} from \\"@pankod/refine\\";\\n\\nimport { IFeedback, IFeedbackFilterVariables, FeedBackType } from \\"interfaces\\";\\n\\nconst { Paragraph } = Typography;\\n\\nconst addTagColor = (type: FeedBackType) => {\\n  switch (type) {\\n    case \\"issue\\":\\n      return \\"error\\";\\n    case \\"idea\\":\\n      return \\"orange\\";\\n    default:\\n      return \\"default\\";\\n  }\\n};\\n\\nexport const FeedbackList: React.FC = () => {\\n  const { listProps, searchFormProps } = useSimpleList<\\n    IFeedback,\\n    HttpError,\\n    IFeedbackFilterVariables\\n  >({\\n    initialSorter: [{ field: \\"created_at\\", order: \\"desc\\" }],\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { type } = params;\\n\\n      filters.push({\\n        field: \\"type\\",\\n        operator: \\"eq\\",\\n        value: type || undefined,\\n      });\\n\\n      return filters;\\n    },\\n  });\\n\\n  const { mutate, isLoading } = useUpdate();\\n\\n  const renderItem = (item: IFeedback) => {\\n    const { id, description, type, page, created_at } = item;\\n    return (\\n      <AntdList.Item>\\n        <Card hoverable>\\n          <AntdList.Item.Meta\\n            description={\\n              <div style={{ display: \\"flex\\", justifyContent: \\"space-between\\" }}>\\n                <Tag\\n                  color={addTagColor(type)}\\n                  style={{ textTransform: \\"capitalize\\" }}\\n                >\\n                  {type}\\n                </Tag>\\n                <DateField format=\\"LLL\\" value={created_at} />\\n              </div>\\n            }\\n          />\\n          <Paragraph strong>{description}</Paragraph>\\n          <Descriptions labelStyle={{ color: \\"grey\\", fontWeight: 600 }}>\\n            <Descriptions.Item label=\\"Path\\">{page}</Descriptions.Item>\\n          </Descriptions>\\n          <div style={{ display: \\"flex\\", justifyContent: \\"end\\", gap: \\"4px\\" }}>\\n            <Button\\n              size=\\"small\\"\\n              loading={isLoading}\\n              onClick={() =>\\n                mutate({\\n                  id,\\n                  resource: \\"feedbacks\\",\\n                  values: {\\n                    type: \\"archive\\",\\n                  },\\n                })\\n              }\\n            >\\n              Archive\\n            </Button>\\n          </div>\\n        </Card>\\n      </AntdList.Item>\\n    );\\n  };\\n\\n  return (\\n    <List title=\\"\\" pageHeaderProps={{ style: { height: \\"100%\\" } }}>\\n      <Row gutter={[64, 0]} justify=\\"center\\">\\n        <Col xs={24} sm={24} md={4} lg={4} xl={4}>\\n          <Form\\n            {...searchFormProps}\\n            layout=\\"vertical\\"\\n            onValuesChange={() => searchFormProps.form?.submit()}\\n            initialValues={{\\n              type: \\"\\",\\n            }}\\n          >\\n            <Form.Item label=\\"FILTERS\\" name=\\"type\\">\\n              <Radio.Group>\\n                <Space direction=\\"vertical\\">\\n                  <Radio.Button value=\\"\\">All</Radio.Button>\\n                  <Radio.Button value=\\"issue\\">Issue</Radio.Button>\\n                  <Radio.Button value=\\"idea\\">Idea</Radio.Button>\\n                  <Radio.Button value=\\"other\\">Other</Radio.Button>\\n                  <Radio.Button value=\\"archive\\">Archive</Radio.Button>\\n                </Space>\\n              </Radio.Group>\\n            </Form.Item>\\n          </Form>\\n        </Col>\\n        <Col xs={24} sm={24} md={14} lg={14} xl={14}>\\n          <AntdList\\n            {...listProps}\\n            split={false}\\n            renderItem={renderItem}\\n            itemLayout=\\"vertical\\"\\n          />\\n        </Col>\\n      </Row>\\n    </List>\\n  );\\n};\\n```\\n\\n```ts\\nexport type FeedBackType = \\"idea\\" | \\"issue\\" | \\"other\\" | \\"archive\\";\\n\\nexport interface IFeedback {\\n  id: string;\\n  description: string;\\n  page: string;\\n  user: string;\\n  type: FeedBackType;\\n  created_at: Date;\\n}\\n\\nexport interface IFeedbackFilterVariables {\\n  type: FeedBackType;\\n}\\n```\\n\\nIn this component\\n\\n- We listed our records using the [`useSimpleList`](https://refine.dev/docs/api-references/hooks/show/useSimpleList/) and [Ant Design](https://ant.design) [`<List>`](https://ant.design/components/list) component.\\n- We used Antd [`<Form>`](https://ant.design/components/form/) component to filter our records.\\n- We made it possible to change the `type` of our record with [`useUpdate`](https://refine.dev/docs/api-references/hooks/data/useUpdate)\\n\\nSee detailed usage of useSimpleList for adding new filters, adding search entries, dynamic sorting operations and more [here](https://refine.dev/docs/api-references/hooks/show/useSimpleList/).\\n\\n### Overview\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback_overview} alt=\\"feedback_overview\\" />\\n</div>\\n<br />\\n\\n \\n\\nLet\'s develop feedback widget where we can get feedback to expand the application a little more. For this application, I will develop this component with refine, but you can create this component with Strapi APIs in any way you want.\\n\\nYou can look at the code of the component I developed [here](https://github.com/pankod/refine-hackathon/tree/main/refeedback/src/components/feedback).\\n\\nNow let\'s add this component to the `OfflayouArea` component and create feedback on the page and see how it comes to our feedback list.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={widgets} alt=\\"widgets\\" />\\n</div>\\n<br />\\n\\nYou can find the source code of the project here: https://github.com/pankod/refine/tree/master/examples/blog/refeedback"}]}')}}]);