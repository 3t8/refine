"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"awesome-react-windows95-ui-with-refine","metadata":{"permalink":"/blog/awesome-react-windows95-ui-with-refine","source":"@site/blog/2022-03-22-refine-with-react95.md","title":"We are going back to 1995! The perfect harmony of Modern stack and Win95","description":"With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we\'ll create a Nostalgic-style admin panel using refine and React95 UI.","date":"2022-03-22T00:00:00.000Z","formattedDate":"March 22, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"Windows95","permalink":"/blog/tags/windows-95"},{"label":"React95","permalink":"/blog/tags/react-95"},{"label":"Supabase","permalink":"/blog/tags/supabase"},{"label":"B2B","permalink":"/blog/tags/b-2-b"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":14.8,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"nextItem":{"title":"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application","permalink":"/blog/best-internal-tool-react-frameworks"}},"content":"import refine_setup from \'@site/static/img/blog/2022-03-22-refine-with-react95/refine_setup.gif\';\\nimport refine_login from \'@site/static/img/blog/2022-03-22-refine-with-react95/refine_login.png\';\\nimport table from \'@site/static/img/blog/2022-03-22-refine-with-react95/table.png\';\\nimport advanced_table from \'@site/static/img/blog/2022-03-22-refine-with-react95/advanced_table.gif\';\\nimport create_edit from \'@site/static/img/blog/2022-03-22-refine-with-react95/create_edit.gif\';\\nimport menu from \'@site/static/img/blog/2022-03-22-refine-with-react95/menu.gif\';\\nimport top_menu from \'@site/static/img/blog/2022-03-22-refine-with-react95/top_menu.gif\';\\nimport overview from \'@site/static/img/blog/2022-03-22-refine-with-react95/overview.gif\';\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"Refine Overview\\" />\\n</div>\\n<br />\\n\\nWith **refine**\'s **headless** feature, you can include any UI in your project and take full advantage of all its features without worrying about compatibility. To build a project with a vintage `Windows95` style using [React95](https://react95.io/) UI components, we\'ll use the **refine** headless feature.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nIn this tutorial, we will use [Supabase](https://supabase.com/) Database in the backend of our project. Our goal with this is to create a `Windows95`-style admin panel using **refine** **headless** and [**refine** Supabase Data Provider](/docs/examples/data-provider/supabase/) features.\\n\\n## Project Setup\\n\\nLet\'s start by creating our **refine** project. You can use the superplate to create a refine project. superplate will quickly create our **refine** project according to the features we choose.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_setup} alt=\\"Refine Project Setup\\" />\\n</div>\\n<br />\\n\\nThat\'s it! After the installation process is finished, our **refine** project is ready. In addition, Supabase Data Provider features will also come ready. As we mentioned above, since we are using the headless feature of **refine**, we will manage the UI processes ourselves. In this project, we will use `React95` for the UI. Let\'s continue by installing the necessary packages in our **refine** Project directory.\\n\\n```bash\\nnpm i react95 styled-components\\n```\\n\\n### Manually Project Setup\\n\\n```bash\\nnpm install @pankod/refine-core @pankod/refine-supabase\\n\\nnpm install react95 styled-components\\n```\\n\\nLet\'s begin editing our project now that it\'s ready to use.\\n\\n## Usage\\n\\n**refine**, automatically creates `supabaseClient` and `AuthProvider` for you. All you have to do is define your Database URL and Secret_Key. You can see how to use it in detail below.\\n\\n### Supabase Client\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/utility/supabaseClient.ts\\"\\nimport { createClient } from \\"@pankod/refine-supabase\\";\\n\\nconst SUPABASE_URL = \\"YOUR_DATABASE_URL\\";\\nconst SUPABASE_KEY = \\"YOUR_SUPABASE_KEY\\";\\n\\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\\n```\\n\\n</p>\\n</details>\\n\\n### AuthProvider\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/authProvider.ts\\"\\nimport { AuthProvider } from \\"@pankod/refine-core\\";\\n\\nimport { supabaseClient } from \\"utility\\";\\n\\nconst authProvider: AuthProvider = {\\n    login: async ({ username, password }) => {\\n        const { user, error } = await supabaseClient.auth.signIn({\\n            email: username,\\n            password,\\n        });\\n\\n        if (error) {\\n            return Promise.reject(error);\\n        }\\n\\n        if (user) {\\n            return Promise.resolve();\\n        }\\n    },\\n    logout: async () => {\\n        const { error } = await supabaseClient.auth.signOut();\\n\\n        if (error) {\\n            return Promise.reject(error);\\n        }\\n\\n        return Promise.resolve(\\"/\\");\\n    },\\n    checkError: () => Promise.resolve(),\\n    checkAuth: () => {\\n        const session = supabaseClient.auth.session();\\n\\n        if (session) {\\n            return Promise.resolve();\\n        }\\n\\n        return Promise.reject();\\n    },\\n    getPermissions: async () => {\\n        const user = supabaseClient.auth.user();\\n\\n        if (user) {\\n            return Promise.resolve(user.role);\\n        }\\n    },\\n    getUserIdentity: async () => {\\n        const user = supabaseClient.auth.user();\\n\\n        if (user) {\\n            return Promise.resolve({\\n                ...user,\\n                name: user.email,\\n            });\\n        }\\n    },\\n};\\n\\nexport default authProvider;\\n```\\n\\n</p>\\n</details>\\n\\n### Configure Refine for Supabase\\n\\n```tsx title=\\"src/App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-react-router-v6\\";\\n\\n//highlight-start\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n//highlight-end\\n\\nfunction App() {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            //highlight-start\\n            dataProvider={dataProvider(supabaseClient)}\\n            authProvider={authProvider}\\n            //highlight-end\\n        />\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nWe\'ve completed our project structure. Now we can easily access our Supabase Database and utilize our data in our user interface. To begin, let\'s define the React95 library and create a Login page to access our Supabase data.\\n\\n### React95 Setup\\n\\n```tsx title=\\"src/App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-react-router-v6\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\n//highlight-start\\nimport original from \\"react95/dist/themes/original\\";\\nimport { ThemeProvider } from \\"styled-components\\";\\n//highlight-end\\n\\nfunction App() {\\n    return (\\n        //highlight-start\\n        <ThemeProvider theme={original}>\\n            <Refine\\n                routerProvider={routerProvider}\\n                dataProvider={dataProvider(supabaseClient)}\\n                authProvider={authProvider}\\n            />\\n        </ThemeProvider>\\n        //highlight-end\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nIn this step, we imported and defined the React95 library in our Refine project. We can now use React95 components and Refine features together in harmony. Let\'s design a Windows95-style Login page!\\n\\n## Refine Login Page\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/pages/login/LoginPage.tsx\\"\\nimport { useState } from \\"react\\";\\n//highlight-start\\nimport { useLogin } from \\"@pankod/refine-core\\";\\n\\nimport {\\n    Window,\\n    WindowHeader,\\n    WindowContent,\\n    TextField,\\n    Button,\\n} from \\"react95\\";\\n//highlight-end\\n\\ninterface ILoginForm {\\n    username: string;\\n    password: string;\\n}\\n\\nexport const LoginPage = () => {\\n    const [username, setUsername] = useState(\\"info@refine.dev\\");\\n    const [password, setPassword] = useState(\\"refine-supabase\\");\\n\\n    //highlight-next-line\\n    const { mutate: login } = useLogin<ILoginForm>();\\n\\n    return (\\n        <div\\n            style={{\\n                display: \\"flex\\",\\n                flexDirection: \\"column\\",\\n                justifyContent: \\"center\\",\\n                alignItems: \\"center\\",\\n                textAlign: \\"center\\",\\n                minHeight: \\"100vh\\",\\n                backgroundColor: \\"rgb(0, 128, 128)\\",\\n            }}\\n        >\\n            //highlight-start\\n            <Window>\\n                <WindowHeader active={true} className=\\"window-header\\">\\n                    <span> Refine Login</span>\\n                </WindowHeader>\\n                <div style={{ marginTop: 8 }}>\\n                    <img src=\\"./refine.png\\" alt=\\"refine-logo\\" width={100} />\\n                </div>\\n                <WindowContent>\\n                    <form\\n                        onSubmit={(e) => {\\n                            e.preventDefault();\\n                            login({ username, password });\\n                        }}\\n                    >\\n                        <div style={{ width: 500 }}>\\n                            <div style={{ display: \\"flex\\" }}>\\n                                <TextField\\n                                    placeholder=\\"User Name\\"\\n                                    fullWidth\\n                                    value={username}\\n                                    onChange={(\\n                                        e: React.ChangeEvent<HTMLInputElement>\\n                                    ) => {\\n                                        setUsername(e.target.value);\\n                                    }}\\n                                />\\n                            </div>\\n                            <br />\\n                            <TextField\\n                                placeholder=\\"Password\\"\\n                                fullWidth\\n                                type=\\"password\\"\\n                                value={password}\\n                                onChange={(\\n                                    e: React.ChangeEvent<HTMLInputElement>\\n                                ) => {\\n                                    setPassword(e.target.value);\\n                                }}\\n                            />\\n                            <br />\\n                            <Button type=\\"submit\\" value=\\"login\\">\\n                                Sign in\\n                            </Button>\\n                        </div>\\n                    </form>\\n                </WindowContent>\\n            </Window>\\n            //highlight-end\\n        </div>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_login} alt=\\"Refine Login Page\\" />\\n</div>\\n<br />\\n\\nWe used React95 components to construct our Login page design. Then, using the **refine** [`<AuthProvider>`](/docs/core/providers/auth-provider/) [`<useLogin>`](/docs/core/hooks/auth/useLogin/) hook, we carried out the database sign-in operation. We can now access our database and fetch our Posts and Categories, as well as create our pages.\\n\\n## Refine Post Page\\n\\nAfter our login process, we\'ll get the posts from our Supabase Database and display them in the table. We will use React95 components for the UI portion of our table, as well as refine-react-table package to handle pagination, sorting, and filtering. You can use all the features of [React Table](https://react-table.tanstack.com/) with the `refine-react-table` adapter. On this page, we will use this adapter of **refine** to manage the table.\\n\\nIn this step, we\'ll show how to use the refine-react-table package to create a data table. We will begin by examining this page in two parts. In the first step, we\'ll utilize our refine-react-table package and React95 UI components to only use our data. Then, in the following stage, we\'ll arrange the sorting, pagination processes and our UI part. Let\'s start!\\n\\n[Refer to the **refine** React Table packages documentation for detailed information. \u2192](/docs/packages/react-table/)\\n\\n<details>\\n<summary>Show Part I Code</summary>\\n<p>\\n\\n```tsx title=\\"src/pages/post/PostList.tsx\\"\\nimport { useMemo } from \\"react\\";\\nimport { useOne } from \\"@pankod/refine-core\\";\\nimport { useTable, Column } from \\"@pankod/refine-react-table\\";\\n\\nimport { IPost, ICategory, ICsvPost } from \\"interfaces\\";\\nimport {\\n    Table,\\n    TableBody,\\n    TableHead,\\n    TableRow,\\n    TableHeadCell,\\n    TableDataCell,\\n    Window,\\n    WindowHeader,\\n    WindowContent,\\n} from \\"react95\\";\\n\\nexport const PostList = () => {\\n    //highlight-start\\n    const columns: Array<Column> = useMemo(\\n        () => [\\n            {\\n                id: \\"id\\",\\n                Header: \\"ID\\",\\n                accessor: \\"id\\",\\n            },\\n            {\\n                id: \\"title\\",\\n                Header: \\"Title\\",\\n                accessor: \\"title\\",\\n            },\\n            {\\n                id: \\"category.id\\",\\n                Header: \\"Category\\",\\n                accessor: \\"category.id\\",\\n                Cell: ({ cell }) => {\\n                    const { data, isLoading } = useOne<ICategory>({\\n                        resource: \\"categories\\",\\n                        id: cell.row.original.categoryId,\\n                    });\\n\\n                    if (isLoading) {\\n                        return <p>loading..</p>;\\n                    }\\n\\n                    return data?.data.title ?? \\"Not Found\\";\\n                },\\n            },\\n        ],\\n        [],\\n    );\\n    //highlight-end\\n\\n    //highlight-start\\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\\n        useTable<IPost>({ columns });\\n    //highlight-end\\n\\n    return (\\n        <>\\n            //highlight-start\\n            <Window style={{ width: \\"100%\\" }}>\\n                <WindowHeader>Posts</WindowHeader>\\n                <WindowContent>\\n                    <Table {...getTableProps()}>\\n                        <TableHead>\\n                            {headerGroups.map((headerGroup) => (\\n                                <TableRow\\n                                    {...headerGroup.getHeaderGroupProps()}\\n                                >\\n                                    {headerGroup.headers.map((column) => (\\n                                        <TableHeadCell\\n                                            {...column.getHeaderProps()}\\n                                        >\\n                                            {column.render(\\"Header\\")}\\n                                        </TableHeadCell>\\n                                    ))}\\n                                </TableRow>\\n                            ))}\\n                        </TableHead>\\n                        <TableBody {...getTableBodyProps()}>\\n                            {rows.map((row, i) => {\\n                                prepareRow(row);\\n                                return (\\n                                    <TableRow {...row.getRowProps()}>\\n                                        {row.cells.map((cell) => {\\n                                            return (\\n                                                <TableDataCell\\n                                                    {...cell.getCellProps()}\\n                                                >\\n                                                    {cell.render(\\"Cell\\")}\\n                                                </TableDataCell>\\n                                            );\\n                                        })}\\n                                    </TableRow>\\n                                );\\n                            })}\\n                        </TableBody>\\n                    </Table>\\n                </WindowContent>\\n            </Window>\\n            //highlight-end\\n        </>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={table} alt=\\"Refine Table\\" />\\n</div>\\n<br />\\n\\nAs you can see, our first step is complete. Thanks to the refine-react-table adapter, we fetch our Supabase data and process as table data. Then we placed this data in React95 components. Now let\'s move on to the second step.\\n\\n<details>\\n<summary>Show Part II Code</summary>\\n<p>\\n\\n```tsx title=\\"src/pages/post/PostList.tsx\\"\\nimport { useMemo, useRef, useState } from \\"react\\";\\nimport { useOne, useNavigation, useDelete } from \\"@pankod/refine-core\\";\\nimport {\\n    useTable,\\n    Column,\\n    //highlight-start\\n    useSortBy,\\n    usePagination,\\n    useFilters,\\n    //highlight-end\\n} from \\"@pankod/refine-react-table\\";\\n\\nimport { IPost, ICategory } from \\"interfaces\\";\\nimport {\\n    Table,\\n    TableBody,\\n    TableHead,\\n    TableRow,\\n    TableHeadCell,\\n    TableDataCell,\\n    Window,\\n    WindowHeader,\\n    WindowContent,\\n    Button,\\n    Select,\\n    NumberField,\\n    Progress,\\n} from \\"react95\\";\\n\\nexport const PostList = () => {\\n    const { edit, create } = useNavigation();\\n    const { mutate } = useDelete();\\n\\n    const columns: Array<Column> = useMemo(\\n        () => [\\n            {\\n                id: \\"id\\",\\n                Header: \\"ID\\",\\n                accessor: \\"id\\",\\n            },\\n            {\\n                id: \\"title\\",\\n                Header: \\"Title\\",\\n                accessor: \\"title\\",\\n            },\\n            {\\n                id: \\"category.id\\",\\n                Header: \\"Category\\",\\n                accessor: \\"category.id\\",\\n                Cell: ({ cell }) => {\\n                    const { data, isLoading } = useOne<ICategory>({\\n                        resource: \\"categories\\",\\n                        id: cell.row.original.categoryId,\\n                    });\\n\\n                    if (isLoading) {\\n                        return <p>loading..</p>;\\n                    }\\n\\n                    return data?.data.title ?? \\"Not Found\\";\\n                },\\n            },\\n            //highlight-start\\n            {\\n                id: \\"action\\",\\n                Header: \\"Action\\",\\n                accessor: \\"id\\",\\n                Cell: ({ value }) => (\\n                    <div>\\n                        <Button onClick={() => edit(\\"posts\\", value)}>\\n                            Edit\\n                        </Button>\\n\\n                        <Button\\n                            style={{ marginLeft: 4, marginTop: 4 }}\\n                            onClick={() =>\\n                                mutate({ id: value, resource: \\"posts\\" })\\n                            }\\n                        >\\n                            Delete\\n                        </Button>\\n                    </div>\\n                ),\\n            },\\n            //highlight-end\\n        ],\\n        [],\\n    );\\n\\n    const {\\n        getTableProps,\\n        getTableBodyProps,\\n        headerGroups,\\n        rows,\\n        prepareRow,\\n        //highlight-start\\n        pageOptions,\\n        setPageSize,\\n        gotoPage,\\n        state: { pageIndex, pageSize },\\n    } = useTable<IPost>({ columns }, useFilters, useSortBy, usePagination);\\n    //highlight-end\\n\\n    return (\\n        <>\\n            <Window style={{ width: \\"100%\\" }}>\\n                <WindowHeader>Posts</WindowHeader>\\n                <WindowContent>\\n                    <Table {...getTableProps()}>\\n                        <TableHead>\\n                            {headerGroups.map((headerGroup) => (\\n                                <TableRow\\n                                    {...headerGroup.getHeaderGroupProps()}\\n                                >\\n                                    {headerGroup.headers.map((column) => (\\n                                        <TableHeadCell\\n                                            {...column.getHeaderProps(\\n                                                //highlight-next-line\\n                                                column.getSortByToggleProps(),\\n                                            )}\\n                                        >\\n                                            {column.render(\\"Header\\")}\\n                                        </TableHeadCell>\\n                                    ))}\\n                                </TableRow>\\n                            ))}\\n                        </TableHead>\\n                        <TableBody {...getTableBodyProps()}>\\n                            {rows.map((row, i) => {\\n                                prepareRow(row);\\n                                return (\\n                                    <TableRow {...row.getRowProps()}>\\n                                        {row.cells.map((cell) => {\\n                                            return (\\n                                                <TableDataCell\\n                                                    {...cell.getCellProps()}\\n                                                >\\n                                                    {cell.render(\\"Cell\\")}\\n                                                </TableDataCell>\\n                                            );\\n                                        })}\\n                                    </TableRow>\\n                                );\\n                            })}\\n                        </TableBody>\\n                    </Table>\\n                </WindowContent>\\n                //highlight-start\\n                <div\\n                    style={{\\n                        display: \\"flex\\",\\n                        justifyContent: \\"flex-end\\",\\n                        marginBottom: 8,\\n                        marginTop: 8,\\n                        alignItems: \\"flex-end\\",\\n                    }}\\n                >\\n                    <Select\\n                        style={{ marginLeft: 8 }}\\n                        value={pageSize}\\n                        onChange={(_, selection) => {\\n                            setPageSize(selection.value);\\n                        }}\\n                        options={opt}\\n                        defaultValue={\\"10\\"}\\n                    ></Select>\\n                    <span style={{ marginLeft: 8 }}>\\n                        Page{\\" \\"}\\n                        <strong>\\n                            {pageIndex + 1} of {pageOptions.length}\\n                        </strong>\\n                        <span style={{ marginLeft: 8 }}>\\n                            Go to page:\\n                            <NumberField\\n                                style={{ marginLeft: 8 }}\\n                                min={1}\\n                                defaultValue={pageIndex + 1}\\n                                width={130}\\n                                onChange={(value) => {\\n                                    const page = value ? Number(value) - 1 : 0;\\n                                    gotoPage(page);\\n                                }}\\n                            />\\n                        </span>\\n                    </span>\\n                </div>\\n                //highlight-end\\n            </Window>\\n        </>\\n    );\\n};\\n\\nexport const opt = [\\n    { value: 10, label: \\"10\\" },\\n    { value: 20, label: \\"20\\" },\\n    { value: 30, label: \\"30\\" },\\n    { value: 40, label: \\"40\\" },\\n];\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={advanced_table} alt=\\"Refine Table\\" />\\n</div>\\n<br />\\n\\nYou may quickly handle sorting and paging operations by simply adding a few lines thanks to **refine**\'s out-of-the-box features. We have completed our Post page by adding the pagination and sorting features provided by the Refine `useTable` hook to our table.\\n\\n## Refine Create and Edit Page\\n\\nWe have created our post page. Now we will create pages where we can create and edit posts. **refine** provides a [`refine-react-hook-form`](/docs/packages/react-hook-form/) adapter that you can use with the headless feature. All the features of [React Hook Form](https://react-hook-form.com/) work in harmony with **refine** and the form you will create.\\n\\n-   `Create Page`\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/pages/posts/Create.tsx\\"\\nimport { Controller, useForm } from \\"@pankod/refine-react-hook-form\\";\\nimport { useSelect, useNavigation } from \\"@pankod/refine-core\\";\\nimport {\\n    Select,\\n    Fieldset,\\n    Button,\\n    TextField,\\n    Window,\\n    WindowHeader,\\n    WindowContent,\\n    ListItem,\\n} from \\"react95\\";\\n\\nexport const PostCreate: React.FC = () => {\\n    const {\\n        refineCore: { onFinish, formLoading },\\n        register,\\n        handleSubmit,\\n        control,\\n        formState: { errors },\\n    } = useForm();\\n\\n    const { goBack } = useNavigation();\\n\\n    const { options } = useSelect({\\n        resource: \\"categories\\",\\n    });\\n\\n    return (\\n        <>\\n            <Window style={{ width: \\"100%\\", height: \\"100%\\" }}>\\n                <WindowHeader active={true} className=\\"window-header\\">\\n                    <span>Create Post</span>\\n                </WindowHeader>\\n                <form onSubmit={handleSubmit(onFinish)}>\\n                    <WindowContent>\\n                        <label>Title: </label>\\n                        <br />\\n                        <br />\\n                        <TextField\\n                            {...register(\\"title\\", { required: true })}\\n                            placeholder=\\"Type here...\\"\\n                        />\\n                        {errors.title && <span>This field is required</span>}\\n                        <br />\\n                        <br />\\n\\n                        <Controller\\n                            {...register(\\"categoryId\\", { required: true })}\\n                            control={control}\\n                            render={({ field: { onChange, value } }) => (\\n                                <Fieldset label={\\"Category\\"}>\\n                                    <Select\\n                                        options={options}\\n                                        menuMaxHeight={160}\\n                                        width={160}\\n                                        variant=\\"flat\\"\\n                                        onChange={onChange}\\n                                        value={value}\\n                                    />\\n                                </Fieldset>\\n                            )}\\n                        />\\n                        {errors.category && <span>This field is required</span>}\\n                        <br />\\n                        <label>Content: </label>\\n                        <br />\\n                        <TextField\\n                            {...register(\\"content\\", { required: true })}\\n                            multiline\\n                            rows={10}\\n                            cols={50}\\n                        />\\n\\n                        {errors.content && <span>This field is required</span>}\\n                        <br />\\n                        <Button type=\\"submit\\" value=\\"Submit\\">\\n                            Submit\\n                        </Button>\\n                        {formLoading && <p>Loading</p>}\\n                    </WindowContent>\\n                </form>\\n            </Window>\\n        </>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n-   `Edit Page`\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/pages/posts/Edit.tsx\\"\\nimport { useEffect } from \\"react\\";\\nimport { Controller, useForm } from \\"@pankod/refine-react-hook-form\\";\\nimport { useSelect, useNavigation } from \\"@pankod/refine-core\\";\\nimport {\\n    Select,\\n    Fieldset,\\n    Button,\\n    TextField,\\n    WindowContent,\\n    Window,\\n    WindowHeader,\\n    ListItem,\\n} from \\"react95\\";\\n\\nexport const PostEdit: React.FC = () => {\\n    const {\\n        refineCore: { onFinish, formLoading, queryResult },\\n        register,\\n        handleSubmit,\\n        resetField,\\n        control,\\n        formState: { errors },\\n    } = useForm();\\n\\n    const { goBack } = useNavigation();\\n\\n    const { options } = useSelect({\\n        resource: \\"categories\\",\\n        defaultValue: queryResult?.data?.data.categoryId,\\n    });\\n\\n    useEffect(() => {\\n        resetField(\\"categoryId\\");\\n    }, [options]);\\n\\n    return (\\n        <>\\n            <Window style={{ width: \\"100%\\", height: \\"100%\\" }}>\\n                <form onSubmit={handleSubmit(onFinish)}>\\n                    <WindowHeader active={true} className=\\"window-header\\">\\n                        <span>Edit Post</span>\\n                    </WindowHeader>\\n                    <WindowContent>\\n                        <label>Title: </label>\\n                        <br />\\n                        <TextField\\n                            {...register(\\"title\\", { required: true })}\\n                            placeholder=\\"Type here...\\"\\n                        />\\n                        {errors.title && <span>This field is required</span>}\\n                        <br />\\n                        <br />\\n\\n                        <Controller\\n                            {...register(\\"categoryId\\", { required: true })}\\n                            control={control}\\n                            render={({ field: { onChange, value } }) => (\\n                                <Fieldset label={\\"Category\\"}>\\n                                    <Select\\n                                        options={options}\\n                                        menuMaxHeight={160}\\n                                        width={160}\\n                                        variant=\\"flat\\"\\n                                        onChange={onChange}\\n                                        value={value}\\n                                    />\\n                                </Fieldset>\\n                            )}\\n                        />\\n                        {errors.category && <span>This field is required</span>}\\n                        <br />\\n                        <label>Content: </label>\\n                        <br />\\n                        <TextField\\n                            {...register(\\"content\\", { required: true })}\\n                            multiline\\n                            rows={10}\\n                            cols={50}\\n                        />\\n\\n                        {errors.content && <span>This field is required</span>}\\n                        <br />\\n                        <Button type=\\"submit\\" value=\\"Submit\\">\\n                            Submit\\n                        </Button>\\n                        {formLoading && <p>Loading</p>}\\n                    </WindowContent>\\n                </form>\\n            </Window>\\n        </>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create_edit} alt=\\"Refine Create and Edit Page\\" />\\n</div>\\n<br />\\n\\nWe can manage our forms and generate Posts thanks to the `refine-react-hook-form` adapter, and we may save the Post that we created with the **refine** `onFinish` method directly to Supabase.\\n\\n## Customize Refine Layout\\n\\nOur app is almost ready. As a final step, let\'s edit our Layout to make our application more like Window95. Let\'s create a footer component first and then define it as a **refine** Layout.\\n\\n[Refer to the refine Custom Layout docs for detailed usage. \u2192](/docs/guides-and-concepts/custom-layout/)\\n\\n-   `Footer`\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"components/Footer.tsx\\"\\nimport React, { useState } from \\"react\\";\\nimport { useLogout, useNavigation } from \\"@pankod/refine-core\\";\\nimport { AppBar, Toolbar, Button, List, ListItem } from \\"react95\\";\\n\\nexport const Footer: React.FC = () => {\\n    const [open, setOpen] = useState(false);\\n\\n    const { mutate: logout } = useLogout();\\n    const { push } = useNavigation();\\n\\n    return (\\n        <AppBar style={{ top: \\"unset\\", bottom: 0 }}>\\n            <Toolbar style={{ justifyContent: \\"space-between\\" }}>\\n                <div style={{ position: \\"relative\\", display: \\"inline-block\\" }}>\\n                    <Button\\n                        onClick={() => setOpen(!open)}\\n                        active={open}\\n                        style={{ fontWeight: \\"bold\\" }}\\n                    >\\n                        <img\\n                            src={\\"./refine.png\\"}\\n                            alt=\\"refine logo\\"\\n                            style={{ height: \\"20px\\", marginRight: 4 }}\\n                        />\\n                    </Button>\\n                    {open && (\\n                        <List\\n                            style={{\\n                                position: \\"absolute\\",\\n                                left: \\"0\\",\\n                                bottom: \\"100%\\",\\n                            }}\\n                            onClick={() => setOpen(false)}\\n                        >\\n                            <ListItem\\n                                onClick={() => {\\n                                    push(\\"posts\\");\\n                                }}\\n                            >\\n                                Posts\\n                            </ListItem>\\n                            <ListItem\\n                                onClick={() => {\\n                                    push(\\"categories\\");\\n                                }}\\n                            >\\n                                Categories\\n                            </ListItem>\\n                            <ListItem\\n                                onClick={() => {\\n                                    logout();\\n                                }}\\n                            >\\n                                <span role=\\"img\\" aria-label=\\"\ud83d\udd19\\">\\n                                    \ud83d\udd19\\n                                </span>\\n                                Logout\\n                            </ListItem>\\n                        </List>\\n                    )}\\n                </div>\\n            </Toolbar>\\n        </AppBar>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-react-router-v6\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport original from \\"react95/dist/themes/original\\";\\nimport { ThemeProvider } from \\"styled-components\\";\\n\\nimport { PostList, PostEdit, PostCreate } from \\"pages/posts\\";\\nimport { CategoryList, CategoryCreate, CategoryEdit } from \\"pages/category\\";\\nimport { LoginPage } from \\"pages/login\\";\\n//highlight-next-line\\nimport { Footer } from \\"./components/footer\\";\\n\\nimport \\"./app.css\\";\\n\\nfunction App() {\\n    return (\\n        <ThemeProvider theme={original}>\\n            <Refine\\n                routerProvider={routerProvider}\\n                dataProvider={dataProvider(supabaseClient)}\\n                authProvider={authProvider}\\n                LoginPage={LoginPage}\\n                //highlight-start\\n                Layout={({ children }) => {\\n                    return (\\n                        <div className=\\"main\\">\\n                            <div className=\\"layout\\">{children}</div>\\n                            <div>\\n                                <Footer />\\n                            </div>\\n                        </div>\\n                    );\\n                }}\\n                //highlight-end\\n                resources={[\\n                    {\\n                        name: \\"posts\\",\\n                        list: PostList,\\n                        create: PostCreate,\\n                        edit: PostEdit,\\n                    },\\n                ]}\\n            />\\n        </ThemeProvider>\\n    );\\n}\\n\\nexport default App;\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={menu} alt=\\"Refine95 Menu\\" />\\n</div>\\n<br />\\n\\nNow we\'ll make a top menu component that\'s specific to the Windows 95 design.\\n\\n-   Top Menu\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"components/bar/TopMenu\\"\\nimport React, { useState } from \\"react\\";\\nimport { AppBar, Toolbar, Button, List } from \\"react95\\";\\n\\ntype TopMenuProps = {\\n    children: React.ReactNode[] | React.ReactNode;\\n};\\n\\nexport const TopMenu: React.FC<TopMenuProps> = ({ children }) => {\\n    const [open, setOpen] = useState(false);\\n\\n    return (\\n        <AppBar style={{ zIndex: 1 }}>\\n            <Toolbar>\\n                <Button\\n                    variant=\\"menu\\"\\n                    onClick={() => setOpen(!open)}\\n                    active={open}\\n                >\\n                    File\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Edit\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    View\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Format\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Tools\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Table\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Window\\n                </Button>\\n                <Button variant=\\"menu\\" disabled>\\n                    Help\\n                </Button>\\n                {open && (\\n                    <List\\n                        style={{\\n                            position: \\"absolute\\",\\n                            left: \\"0\\",\\n                            top: \\"100%\\",\\n                        }}\\n                        onClick={() => setOpen(false)}\\n                    >\\n                        {children}\\n                    </List>\\n                )}\\n            </Toolbar>\\n        </AppBar>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={top_menu} alt=\\"Refine Top Menu\\" />\\n</div>\\n<br />\\n\\n## Project Overview\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"Refine Project Overview\\" />\\n</div>\\n<br />\\n\\n## Live CodeSandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-react95-example-beie0q?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-react95-example\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n## Conclusion\\n\\n**refine** is a very powerful and flexible internal tool development framework. The features it provides will greatly reduce your development time. In this example, we have shown step-by-step how a development can be quick and easy using a custom UI and refine-core features. **refine** does not restrict you, and it delivers almost all of your project\'s requirements via the hooks it provides, regardless of the UI."},{"id":"best-internal-tool-react-frameworks","metadata":{"permalink":"/blog/best-internal-tool-react-frameworks","source":"@site/blog/2022-03-16-internal-tool-frameworks.md","title":"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application","description":"We have listed Open source ReactJS frameworks that will help and speed you up while developing internal-tool applications.","date":"2022-03-16T00:00:00.000Z","formattedDate":"March 16, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"business-tool","permalink":"/blog/tags/business-tool"},{"label":"internal-tool","permalink":"/blog/tags/internal-tool"},{"label":"B2B","permalink":"/blog/tags/b-2-b"},{"label":"B2C","permalink":"/blog/tags/b-2-c"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":4.605,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"We are going back to 1995! The perfect harmony of Modern stack and Win95","permalink":"/blog/awesome-react-windows95-ui-with-refine"},"nextItem":{"title":"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II","permalink":"/blog/refine-invoice-generator"}},"content":"import superplate from \'@site/static/img/blog/2022-03-16-internal-tool-frameworks/superplate.gif\';\\nimport refine_admin_panel from \'@site/static/img/blog/2022-03-16-internal-tool-frameworks/refine-admin-panel.png\';\\nimport refine_client from \'@site/static/img/blog/2022-03-16-internal-tool-frameworks/refine_client.png\';\\nimport redwood from \'@site/static/img/blog/2022-03-16-internal-tool-frameworks/redwood.png\';\\nimport react_admin from \'@site/static/img/blog/2022-03-16-internal-tool-frameworks/react_admin.png\';\\n\\n## Best Internal Tool Frameworks for ReactJS\\n\\nIn this article, I will talk about new open-source React.js frameworks that will greatly contribute to your project while developing internal-tool applications and make your work easier with their features.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Internal Tool?\\n\\nInternal tools, also known as Backoffice applications, are software pieces developed to improve your corporate processes and make your work easier. Internal tool applications are generally used to control your business follow-up or to manage your product\'s internal processes.\\n\\nInternal tools manage the activities your company or product needs, such as tracking inventory, processing customer requests, controlling payments. Although its field is quite wide, the needs of each product or company differ. Here in this article, we will review React.js Frameworks that will help you quickly develop your own internal-tool applications according to your needs.\\n\\nInternal Tool React.js Frameworks that we will review:\\n\\n-   [Blitz.js](https://blitzjs.com/)\\n-   [Refine](https://refine.dev/)\\n-   [Redwood.js](https://redwoodjs.com/)\\n-   [React Admin](https://marmelab.com/react-admin/)\\n\\n## 1. Blitz.js\\n\\n[Blitz](https://blitzjs.com/) is a batteries-included is built on Next.js, and features a Zero-API data layer abstraction that eliminates the need for REST/GraphQL. Provides helpful defaults and conventions for things like routing, file structure, and authentication while also being extremely flexible.\\n\\n### Key Features\\n\\n-   The zero-api data layer\\n-   Authentication\\n-   Authorization\\n-   Conventions\\n-   New app templates\\n\\n### Installation\\n\\n```bash\\nyarn global add blitz\\n\\nor\\n\\nnpm install -g blitz\\n```\\n\\n[For Blitz.js examples, you can take a look at the showcase section. \u2192 ](https://blitzjs.com/showcase)\\n\\n## Refine\\n\\n[**refine**](https://refine.dev/) is a React-based framework for rapid building of internal tools. It\'s is a a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.\\n\\n**refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards\\n\\n### Key Features\u200b\\n\\n\ud83d\udd25 Headless : Works with any UI framework\\n\\n\u2699\ufe0f Zero-configuration : One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, GraphQL, NestJs CRUD, Airtable, Strapi, Strapi v4, Strapi GraphQL, Supabase, Hasura, Nhost, Appwrite, Firebase, Directus and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n### Installation\\n\\nYou can quickly create the project containing **refine** and all the features you will use with it, thanks to **refine**\'s Project Creator CLI (Superplate). No extra setup required!\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={superplate} alt=\\"Refine Project Creator CLI\\" />\\n</div>\\n<br />\\n\\nIf you want, you can manually install the refine packages.\\n\\n```bash\\nnpm i @pankod/refine-core @pankod/refine-antd\\n```\\n\\n### Refine Examples\\n\\n[**Refine** Admin Panel Example](https://example.admin.refine.dev/?current=1&pageSize=5)\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_admin_panel} alt=\\"Refine Admin Panel Example\\" />\\n</div>\\n\\n<br/>\\n\\n[**Refine** Headless + Tailwind CSS Client(B2C) Example](https://example.refine.dev/)\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_client} alt=\\"Refine Client Example\\" />\\n</div>\\n\\n## 3. RedwoodJS\\n\\n[Redwood](https://redwoodjs.com/) is an opinionated, full-stack, JavaScript/TypeScript web application framework designed to keep you moving fast as your app grows from side project to startup.\\n\\nRedwood includes deploy support for Netlify, Vercel, Render.com, AWS and more. Built on React, GraphQL, and Prisma, with full TypeScript support, and Webpack/Babel ready to go with zero config. Redwood gives you the workflow you love, but with simple conventions and helpers to make your experience even better.\\n\\n### Key Features\\n\\n-   Database and Data migrations\\n-   Automatic page-based code-splitting\\n-   Cells: a declarative way to fetch data from the backend API\\n-   Scaffold generator for CRUD operations specific to a DB table\\n-   Simple but powerful GraphQL Directives to validate access or transform resolved data\\n-   Simple but powerful routing (all routes defined in one file) with dynamic (typed)\\n-   Opinionated defaults for formatting, file organization, Webpack, Babel, and more\\n\\n### Installation\\n\\n```bash\\n  yarn create redwood-app my-redwood-app\\n```\\n\\n### RedwoodJS Example\\n\\n[Link](https://github.com/redwoodjs/example-blog)\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={redwood} alt=\\"Redwood Example\\" />\\n</div>\\n\\n## 4. React Admin\\n\\n[React Admin](https://marmelab.com/react-admin/) is a frontend Framework for building data-driven applications running in the browser, on top of REST/GraphQL APIs, using React and Material Design.\\n\\n### Key Features\\n\\n-   Powered by material-ui, redux, react-final-form, react-router and a few more\\n-   Adapts to any backend (REST, GraphQL, SOAP, etc.)\\n-   Internationalization (i18n)\\n-   Supports any authentication provider (REST API, OAuth, Basic Auth, ...)\\n-   Can be included in another React app\\n-   Powered by material-ui, redux, react-final-form, react-router and a few more\\n\\n### Installation\\n\\n```bash\\nnpm install react-admin\\n\\nor\\n\\nyarn add react-admin\\n```\\n\\n### React Admin Example\\n\\n[Link](https://marmelab.com/react-admin-demo/#/)\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"React Admin Example\\" />\\n</div>\\n\\n<br/>\\n<br/>\\n\\nIn this article, we have listed the popular open-source ReactJS internal-tool frameworks. If you want a more detailed review article, you can like and share this article. Thank you for your interest and reading.\\n\\n[For more information about **refine** ->](https://refine.dev/docs/getting-started/overview/)"},{"id":"refine-invoice-generator","metadata":{"permalink":"/blog/refine-invoice-generator","source":"@site/blog/2022-03-01-refine-invoice-genarator-p2.md","title":"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II","description":"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.","date":"2022-03-01T00:00:00.000Z","formattedDate":"March 1, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"invoice-generator","permalink":"/blog/tags/invoice-generator"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"business-tool","permalink":"/blog/tags/business-tool"},{"label":"internal-tool","permalink":"/blog/tags/internal-tool"},{"label":"strapi","permalink":"/blog/tags/strapi"}],"readingTime":12.715,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application","permalink":"/blog/best-internal-tool-react-frameworks"},"nextItem":{"title":"Develop your Own Customizable Invoice Generator with Refine and Strapi | Part I","permalink":"/blog/refine-react-admin-invoice-genarator"}},"content":"import missions from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/missions.png\';\\nimport invoice from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/invoice.png\';\\nimport mission_page from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/mission_page.png\';\\nimport mission_create from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/mission_create.gif\';\\nimport invoice_list from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/invoice_list.png\';\\nimport create_invoice from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/create_invoice.gif\';\\nimport invoice_pdf from \'@site/static/img/blog/2022-03-01-refine-invoice-generator-p2/invoice_pdf.gif\';\\n\\nLooking for an invoice generator that is easy to use and lets you customize your invoices? With **refine** simple and intuitive interface, you can create your own invoices in few hours. Plus, we offer a wide range of templates and customization options so you can get the exact look you want. Learn more about our invoice generator here!\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nWe are almost ready to launch our **refine** Invoice Generator. In this Part II article, we\'ll customize it just a little more and then take an in-depth look at what you can do with the finished **refine** product!\\n\\nIn this part, we will create a missions part for the services your company provides. Then we will create our invoice page using these missions and the clients and contacts we created in Part I. In addition, you will not only be able to create your invoices, but you will also be able to view and download these invoices as PDF.\\n\\n:::caution\\nThis article is written as a continuation of our [Develop your Own Customizable Invoice Generator with Refine](https://refine.dev/blog/refine-react-admin-invoice-genarator/) article. If you have not read Part I, we recommend that you read Part I before reading this article.\\n:::\\n\\nLet\'s see together how easily and in a short time we can develop our project with its refine features.\\n\\n## Create New Strapi Collections\\n\\nIn our Part I article, we created our company, contact and client collections. In this section, let\'s create the `Missions` and `Invoice` [Strapi](https://strapi.io/) collections for the missions and invoices pages.\\n\\n`Mission Collection:`\\n\\n-   Mission(Mission Title): Text\\n-   Mission_description: Text\\n-   Day: Number\\n-   Daily_rate: Number\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={missions} alt=\\"Strapi Mission Collection\\" />\\n</div>\\n<br />\\n\\n`Invoice Collection:`\\n\\n-   Name: Text\\n-   Date: Date\\n-   Company : Relation with Company\\n-   Discount : Number\\n-   Tax: Number\\n-   Custom_id: Text\\n-   Contact: Relation with Contact\\n-   Missions: Relation with Mission\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={invoice} alt=\\"Strapi Mission Collection\\" />\\n</div>\\n<br />\\n\\nWe created our missions and invoice collections fields. Our goal here is to define the products or services you offer specifically to your company and to create invoices based on them. By determining how many working days a product or service will last and its price on a daily basis, the total will be automatically reflected on your invoice. Now let\'s create our **refine** Missions page using this collection. And let\'s understand better by creating an example missions with **refine**.\\n\\n## Refine Missions Page\\n\\nLet\'s use the refine-antd package\'s [useTable](https://refine.dev/docs/ui-frameworks/antd/hooks/table/useTable/) hook to create our page, and let\'s define the fields in our Table Component.\\n\\n```tsx title=\\"src/pages/MissionList.tsx\\"\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    TagField,\\n    useModalForm,\\n    EditButton,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IMission } from \\"interfaces\\";\\n\\nexport const MissionList: React.FC = () => {\\n    //highlight-next-line\\n    const { tableProps } = useTable<IMission>();\\n\\n    return (\\n        <List>\\n            <Table {...tableProps}>\\n                //highlight-start\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column dataIndex=\\"mission\\" title=\\"Mission\\" />\\n                <Table.Column\\n                    dataIndex=\\"mission_description\\"\\n                    title=\\"Mission Description\\"\\n                />\\n                <Table.Column dataIndex=\\"day\\" title=\\"Day(s)\\" />\\n                <Table.Column\\n                    dataIndex=\\"daily_rate\\"\\n                    title=\\"Daily Rate\\"\\n                    render={(value) => <TagField value={value} color=\\"red\\" />}\\n                />\\n                <Table.Column<IMission>\\n                    title=\\"Total\\"\\n                    render={(_, record) => {\\n                        return (\\n                            <TagField\\n                                value={`${record.daily_rate * record.day} $`}\\n                                color=\\"green\\"\\n                            />\\n                        );\\n                    }}\\n                />\\n                <Table.Column<IMission>\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    key=\\"actions\\"\\n                    render={(_value, record) => (\\n                        <EditButton\\n                            hideText\\n                            size=\\"small\\"\\n                            recordItemId={record.id}\\n                            onClick={() => editShow(record.id)}\\n                        />\\n                    )}\\n                />\\n                //highlight-end\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nWe defined the fields we created on the strapi side with the **refine** Table and created our table. Let\'s take a look at how our table looks like.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={mission_page} alt=\\"Refine Missions Page\\" />\\n</div>\\n<br />\\n\\nAs you can see, we were able to create and display our table very simply thanks to the **refine**. Let\'s learn how to create a Mission from our refine interface now.\\n\\n### Refine Missions Create Page\\n\\nLet\'s create a modal component for our `Mission Create` page. Let\'s connect our fields using Modal and Form from the `refine-antd` package.\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/components/mission/CreateMission.tsx\\"\\nimport {\\n    //highlight-start\\n    Modal,\\n    Form,\\n    //highlight-end\\n    Input,\\n    ModalProps,\\n    FormProps,\\n    InputNumber,\\n} from \\"@pankod/refine-antd\\";\\n\\ntype CreateMissionProps = {\\n    modalProps: ModalProps;\\n    formProps: FormProps;\\n};\\n\\nexport const CreateMission: React.FC<CreateMissionProps> = ({\\n    modalProps,\\n    formProps,\\n}) => {\\n    return (\\n        //highlight-start\\n        <Modal {...modalProps} title=\\"Create Contact\\">\\n            <Form {...formProps} layout=\\"vertical\\">\\n                <Form.Item\\n                    label=\\"Title\\"\\n                    name=\\"mission\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item label=\\"Description\\" name=\\"mission_description\\">\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item label=\\"Day(s)\\" name=\\"day\\">\\n                    <InputNumber defaultValue={1} />\\n                </Form.Item>\\n                <Form.Item label=\\"Daily Rate\\" name=\\"daily_rate\\">\\n                    <InputNumber defaultValue={1} />\\n                </Form.Item>\\n            </Form>\\n        </Modal>\\n        //highlight-end\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\nLet\'s define the `CreateMission` component we created above in our `MissionList` and fill its props with **refine** [**useModalForm**](https://refine.dev/docs/ui-frameworks/antd/hooks/form/useModalForm/).\\n\\n```tsx title=\\"src/pages/MissionList.tsx\\"\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    TagField,\\n    useModalForm,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IMission } from \\"interfaces\\";\\nimport { CreateMission, EditMission } from \\"components/mission\\";\\n\\nexport const MissionList: React.FC = () => {\\n    const { tableProps } = useTable<IMission>();\\n\\n    //highlight-start\\n    const { formProps, modalProps, show } = useModalForm({\\n        resource: \\"missions\\",\\n        action: \\"create\\",\\n    });\\n    //highlight-end\\n\\n    return (\\n        <>\\n            <List\\n                //highlight-start\\n                createButtonProps={{\\n                    onClick: () => {\\n                        show();\\n                    },\\n                }}\\n                //highlight-end\\n            >\\n                <Table {...tableProps}>\\n                    <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                    <Table.Column dataIndex=\\"mission\\" title=\\"Mission\\" />\\n                    <Table.Column\\n                        dataIndex=\\"mission_description\\"\\n                        title=\\"Mission Description\\"\\n                    />\\n                    <Table.Column dataIndex=\\"day\\" title=\\"Day(s)\\" />\\n                    <Table.Column\\n                        dataIndex=\\"daily_rate\\"\\n                        title=\\"Daily Rate\\"\\n                        render={(value) => (\\n                            <TagField value={value} color=\\"red\\" />\\n                        )}\\n                    />\\n                    <Table.Column<IMission>\\n                        title=\\"Total\\"\\n                        render={(_, record) => {\\n                            return (\\n                                <TagField\\n                                    value={`${\\n                                        record.daily_rate * record.day\\n                                    } $`}\\n                                    color=\\"green\\"\\n                                />\\n                            );\\n                        }}\\n                    />\\n                </Table>\\n            </List>\\n            //highlight-start\\n            <CreateMission modalProps={modalProps} formProps={formProps} />\\n            //highlight-end\\n        </>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={mission_create} alt=\\"Refine Mission Create Page\\" />\\n</div>\\n<br />\\n\\nMissions Page is now ready, you can create and manage your business\'s products or services here with **refine**.\\n\\nOur next step is to create invoices according to these tasks and clients. Let\'s create, organize and display invoices with **refine**.\\n\\n## Refine Invoices Page\\n\\nLet\'s put the `Invoice Collections` fields that we created with Strapi into our Table by fetch the refine-antd useTable. Our Invoice collection has a relation with the client, company and missions collections.\\n\\nThanks to the [refine-strapi-v4 dataProvider](https://refine.dev/docs/guides-and-concepts/data-provider/strapi-v4/#relations-population), we can use the data of collections that are related to each other.\\n\\nIn order to use the fields of the collections that are related to each other, we must populate the collections in `metaData`.\\n\\nPopulate the contacts, companies and missions related with our Invoice collection in metaData.\\n\\n<details>\\n<summary>Show Code</summary>\\n\\n<p>\\n\\n```tsx title=\\"src/pages/InvoiceList.tsx\\"\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    DateField,\\n    TagField,\\n    EmailField,\\n    Space,\\n    DeleteButton,\\n    EditButton,\\n    Icons,\\n    Button,\\n    Modal,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IInvoice } from \\"interfaces\\";\\nimport { PdfLayout } from \\"components/pdf\\";\\n\\nconst { FilePdfOutlined } = Icons;\\n\\nexport const InvoiceList: React.FC = () => {\\n    //highlight-start\\n    const { tableProps } = useTable<IInvoice>({\\n        metaData: {\\n            populate: {\\n                contact: { populate: [\\"client\\"] },\\n                company: { populate: [\\"logo\\"] },\\n                missions: \\"*\\",\\n            },\\n        },\\n    });\\n    //highlight-end\\n\\n    return (\\n        <>\\n            <List>\\n                <Table {...tableProps}>\\n                    <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                    <Table.Column<IInvoice>\\n                        dataIndex=\\"name\\"\\n                        title=\\"Invoice Name\\"\\n                        render={(_, record) => {\\n                            return `Invoice_#${record.id}${record.name}`;\\n                        }}\\n                    />\\n                    <Table.Column<IInvoice>\\n                        dataIndex=\\"date\\"\\n                        title=\\"Invoice Date\\"\\n                        render={(value) => (\\n                            <DateField format=\\"LL\\" value={value} />\\n                        )}\\n                    />\\n                    <Table.Column\\n                        dataIndex={[\\"company\\", \\"name\\"]}\\n                        title=\\"Your Company\\"\\n                    />\\n                    <Table.Column\\n                        dataIndex={\\"missions\\"}\\n                        title=\\"Missions\\"\\n                        render={(value) => {\\n                            return value.map((item: any) => {\\n                                return (\\n                                    <TagField\\n                                        color=\\"blue\\"\\n                                        value={item.mission}\\n                                    />\\n                                );\\n                            });\\n                        }}\\n                    />\\n                    <Table.Column\\n                        dataIndex=\\"discount\\"\\n                        title=\\"Discount(%)\\"\\n                        render={(value) => (\\n                            <TagField color=\\"blue\\" value={value} />\\n                        )}\\n                    />\\n                    <Table.Column\\n                        dataIndex=\\"tax\\"\\n                        title=\\"Tax(%)\\"\\n                        render={(value) => (\\n                            <TagField color=\\"cyan\\" value={value} />\\n                        )}\\n                    />\\n                    <Table.Column\\n                        dataIndex=\\"custom_id\\"\\n                        title=\\"Custom Invoice ID\\"\\n                    />\\n\\n                    <Table.Column\\n                        dataIndex={[\\"contact\\", \\"email\\"]}\\n                        title=\\"Contact\\"\\n                        render={(value) => <EmailField value={value} />}\\n                    />\\n                    <Table.Column<IInvoice>\\n                        title=\\"Actions\\"\\n                        dataIndex=\\"actions\\"\\n                        render={(_, record) => {\\n                            return (\\n                                <Space>\\n                                    <EditButton\\n                                        hideText\\n                                        size=\\"small\\"\\n                                        recordItemId={record.id}\\n                                    />\\n                                    <DeleteButton\\n                                        hideText\\n                                        size=\\"small\\"\\n                                        recordItemId={record.id}\\n                                    />\\n                                </Space>\\n                            );\\n                        }}\\n                    />\\n                </Table>\\n            </List>\\n        </>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={invoice_list} alt=\\"Refine Invoice List Page\\" />\\n</div>\\n<br />\\n\\nAs you can see, we were able to list invoices with **refine**. Using the Invoice collection and the fields associated with it, we can create a fully featured Invoice.\\n\\nOur invoice contains all the information. With `Refine Invoice Generator` you can define the company issuing the invoice, discount percentage, tax percentage, customId and similar information in a single invoice.\\n\\nLet\'s understand better by creating an invoice example from our **refine** UI.\\n\\n### Refine Create Invoice Page\\n\\nHere, we first fetch the company, contacts and missions using the **refine**\'s [useSelect](https://refine.dev/docs/ui-frameworks/antd/hooks/field/useSelect/) hook, and by giving it to the Select component, we create selectable components to detail our invoice.\\n\\nThen, we fill our refine [Create](https://refine.dev/docs/ui-frameworks/antd/components/basic-views/create/) and Form components with the fields of the collection in the strap to perform a creation process as we did in our previous examples.\\n\\n<details>\\n<summary>Show Code</summary>\\n\\n<p>\\n\\n```tsx title=\\"src/pages/invoice/CreateInvoice\\"\\nimport { IResourceComponentsProps } from \\"@pankod/refine-core\\";\\n\\nimport {\\n    Create,\\n    Form,\\n    Input,\\n    Select,\\n    useForm,\\n    useSelect,\\n    DatePicker,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { ICompany, IContact, IMission, IInvoice } from \\"interfaces\\";\\n\\nexport const CreateInvoice: React.FC<IResourceComponentsProps> = () => {\\n    const { formProps, saveButtonProps } = useForm<IInvoice>();\\n\\n    const { selectProps: companySelectProps } = useSelect<ICompany>({\\n        resource: \\"companies\\",\\n        optionLabel: \\"name\\",\\n    });\\n\\n    const { selectProps: contactSelectProps } = useSelect<IContact>({\\n        resource: \\"contacts\\",\\n        optionLabel: \\"first_name\\",\\n    });\\n\\n    const { selectProps: missionSelectProps } = useSelect<IMission>({\\n        resource: \\"missions\\",\\n        optionLabel: \\"mission\\",\\n    });\\n\\n    return (\\n        <Create saveButtonProps={saveButtonProps}>\\n            <Form {...formProps} layout=\\"vertical\\">\\n                <Form.Item label=\\"Invoice Name\\" name=\\"name\\">\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Select Your Company\\"\\n                    name=\\"company\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Select {...companySelectProps} />\\n                </Form.Item>\\n\\n                <Form.Item\\n                    label=\\"Mission\\"\\n                    name=\\"missions\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Select {...missionSelectProps} mode=\\"multiple\\" />\\n                </Form.Item>\\n                <Form.Item label=\\"Discount(%)\\" name=\\"discount\\">\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item label=\\"Tax(%)\\" name=\\"tax\\">\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item label=\\"Custom ID\\" name=\\"custom_id\\">\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Contact\\"\\n                    name=\\"contact\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Select {...contactSelectProps} />\\n                </Form.Item>\\n                <Form.Item label=\\"Invoice Date\\" name=\\"date\\">\\n                    <DatePicker style={{ width: \\"50%\\" }} />\\n                </Form.Item>\\n            </Form>\\n        </Create>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create_invoice} alt=\\"Refine Invoice Create\\" />\\n</div>\\n<br />\\n\\nOur invoice generator is almost ready! As you can see, we can now create a fully featured invoice with **refine** and display it in our table. As the last step, let\'s view and download the invoices we created as PDF.\\n\\n## View and Download Invoice as PDF\\n\\nIn this example, we will use the [KendoReact PDF](https://www.telerik.com/kendo-react-ui/components/pdfprocessing/) package to view as PDF. Let\'s start our process by installing our package.\\n\\nLet\'s start our process by installing our package.\\n\\n### Installation\\n\\n```bash\\nnpm i @progress/kendo-react-pdf\\n```\\n\\n### Usage\\n\\nTo begin, let\'s create a pdf layout and add props to receive the data in our Invoice List.\\n\\n```tsx title=\\"src/components/pdf/PdfLayout.tsx\\"\\nimport { useRef } from \\"react\\";\\n\\nimport \\"./pdf.css\\";\\n//highlight-next-line\\nimport { PDFExport } from \\"@progress/kendo-react-pdf\\";\\nimport { IInvoice } from \\"interfaces\\";\\n\\n//highlight-start\\ntype PdfProps = {\\n    record: IInvoice | undefined;\\n};\\n//highlight-end\\n\\nexport const PdfLayout: React.FC<PdfProps> = ({ record }) => {\\n    return <></>;\\n};\\n```\\n\\nLet\'s create a button to display our PDF arrangement in the Invoice List, as well as a modal component for this field to appear.\\n\\n```tsx title=\\"src/pages/invoice/InvoiceList.tsx\\"\\nimport { useState } from \\"react\\";\\n//highlight-next-line\\nimport { useModal } from \\"@pankod/refine-core\\";\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    DateField,\\n    TagField,\\n    EmailField,\\n    Space,\\n    DeleteButton,\\n    EditButton,\\n    Icons,\\n    Button,\\n    Modal,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IInvoice } from \\"interfaces\\";\\nimport { PdfLayout } from \\"components/pdf\\";\\n\\nconst { FilePdfOutlined } = Icons;\\n\\nexport const InvoiceList: React.FC = () => {\\n    //highlight-next-line\\n    const [record, setRecord] = useState<IInvoice>();\\n\\n    const { tableProps } = useTable<IInvoice>({\\n        metaData: {\\n            populate: {\\n                contact: { populate: [\\"client\\"] },\\n                company: { populate: [\\"logo\\"] },\\n                missions: \\"*\\",\\n            },\\n        },\\n    });\\n\\n    //highlight-next-line\\n    const { show, visible, close } = useModal();\\n\\n    return (\\n        <>\\n            <List>\\n                <Table {...tableProps}>\\n                    ...\\n                    <Table.Column<IInvoice>\\n                        title=\\"Actions\\"\\n                        dataIndex=\\"actions\\"\\n                        render={(_, record) => {\\n                            return (\\n                                <Space>\\n                                    <EditButton\\n                                        hideText\\n                                        size=\\"small\\"\\n                                        recordItemId={record.id}\\n                                    />\\n                                    <DeleteButton\\n                                        hideText\\n                                        size=\\"small\\"\\n                                        recordItemId={record.id}\\n                                    />\\n                                    //highlight-start\\n                                    <Button\\n                                        size=\\"small\\"\\n                                        icon={<FilePdfOutlined />}\\n                                        onClick={() => {\\n                                            setRecord(record);\\n                                            show();\\n                                        }}\\n                                    />\\n                                    //highlight-end\\n                                </Space>\\n                            );\\n                        }}\\n                    />\\n                </Table>\\n            </List>\\n            //highlight-start\\n            <Modal visible={visible} onCancel={close} width={700} footer={null}>\\n                <PdfLayout record={record} />\\n            </Modal>\\n            //highlight-end\\n        </>\\n    );\\n};\\n```\\n\\nWe`ve created a button in our Invoice List and when this button is pressed, we show the Modal component that contains the PdfLayout we created. Finally, as you can see, we passed the record data in the Invoice List as PdfLayout props.\\n\\nNow that we have the data of the Invoices we can edit the PdfLayout.\\n\\n<details>\\n<summary>Show Code</summary>\\n\\n<p>\\n\\n```tsx title=\\"src/components/pdf/PdfLayout.tsx\\"\\nimport { useRef } from \\"react\\";\\nimport { ExportButton } from \\"@pankod/refine-antd\\";\\n\\nimport \\"./pdf.css\\";\\n\\n//highlight-next-line\\nimport { PDFExport } from \\"@progress/kendo-react-pdf\\";\\nimport { IInvoice } from \\"interfaces\\";\\nimport { API_URL } from \\"../../constants\\";\\n\\ntype PdfProps = {\\n    record: IInvoice | undefined;\\n};\\n\\nexport const PdfLayout: React.FC<PdfProps> = ({ record }) => {\\n    //highlight-start\\n    const pdfExportComponent = useRef<any>();\\n\\n    const handleExportWithComponent = () => {\\n        pdfExportComponent?.current?.save();\\n    };\\n    //highlight-end\\n\\n    const total = record?.missions.reduce((prev: any, cur: any): any => {\\n        return prev + cur.day * cur.daily_rate;\\n    }, 0);\\n\\n    return (\\n        <div>\\n            <div className=\\"page-container hidden-on-narrow\\">\\n                //highlight-start\\n                <PDFExport ref={pdfExportComponent}>\\n                    <div className={`pdf-page ${\\"size-a4\\"}`}>\\n                        <div className=\\"inner-page\\">\\n                            <div className=\\"pdf-header\\">\\n                                <span className=\\"company-logo\\">\\n                                    <img\\n                                        src={\\n                                            API_URL + record?.company?.logo?.url\\n                                        }\\n                                        width={100}\\n                                        alt=\\"company_logo\\"\\n                                    />\\n                                    <br />\\n                                    {`Invoice: Invoice_#${record?.id}${record?.name}`}\\n                                </span>\\n                                <span className=\\"invoice-number\\">{`Invoice ID: INVOICE_#${record?.id}`}</span>\\n                            </div>\\n                            <div className=\\"pdf-footer\\">\\n                                <p>\\n                                    {record?.company.city}\\n                                    <br />\\n                                    {record?.company.address},{\\" \\"}\\n                                    {record?.company.country}, 10785\\n                                </p>\\n                            </div>\\n                            <div className=\\"addresses\\">\\n                                <div className=\\"for\\">\\n                                    <h3>Invoice For:</h3>\\n                                    <p>\\n                                        {record?.contact?.client?.name}\\n                                        <br />\\n                                        {`${\\n                                            record?.contact?.first_name || \\"\\"\\n                                        } ${record?.contact?.last_name || \\"\\"}`}\\n                                        <br />\\n                                        {record?.contact?.email}\\n                                    </p>\\n                                </div>\\n\\n                                <div className=\\"from\\">\\n                                    <h3>From:</h3>\\n                                    <p>\\n                                        {record?.company.name}\\n                                        <br />\\n                                        {record?.company.city}\\n                                        <br />\\n                                        {record?.company.address},{\\" \\"}\\n                                        {record?.company.country}, 10785\\n                                    </p>\\n                                    <p>\\n                                        {`Invoice ID: ${record?.id}`}\\n                                        <br />\\n                                        {`Invoice Custom ID: ${record?.custom_id}`}\\n                                        <br />\\n                                        {`Invoice Date: ${record?.date}`}\\n                                    </p>\\n                                </div>\\n                            </div>\\n                            <table className=\\"infoTable\\">\\n                                <tr className=\\"infoTable\\">\\n                                    <th>Mission</th>\\n                                    <th>Day(s)</th>\\n                                    <th>Day Rate</th>\\n                                    <th>Total</th>\\n                                </tr>\\n                                {record?.missions.map((item) => {\\n                                    return (\\n                                        <tr>\\n                                            <td>{item.mission}</td>\\n                                            <td>{item.day}</td>\\n                                            <td>{item.daily_rate}</td>\\n                                            <td>\\n                                                {item.daily_rate * item.day}\\n                                            </td>\\n                                        </tr>\\n                                    );\\n                                })}\\n                            </table>\\n                        </div>\\n                        <div className=\\"from\\" style={{ marginTop: 48 }}>\\n                            <p>SUBTOTAL: {total}</p>\\n                            <p>Discount(%): {record?.discount}</p>\\n                            <p>Tax(%): {record?.tax}</p>\\n                            <p>\\n                                Total($):\\n                                {total +\\n                                    (total * record?.tax!!) / 100 -\\n                                    (total * record?.discount!!) / 100}\\n                            </p>\\n                        </div>\\n                        <div className=\\"pdf-body\\">\\n                            <div id=\\"grid\\"></div>\\n                            <p className=\\"signature\\">\\n                                Signature: ________________ <br />\\n                                <br />\\n                                Date: {record?.date}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </PDFExport>\\n                //highlight-end\\n            </div>\\n            <div\\n                style={{\\n                    marginTop: 16,\\n                    display: \\"flex\\",\\n                    justifyContent: \\"center\\",\\n                }}\\n            >\\n                //highlight-start\\n                <ExportButton onClick={handleExportWithComponent}>\\n                    Download Invoice\\n                </ExportButton>\\n                //highlight-end\\n            </div>\\n        </div>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={invoice_pdf} alt=\\"Refine Invoice PDF Export\\" />\\n</div>\\n<br />\\n\\n## Live CodeSandbox Example\\n\\n-   `Username`: demo\\n-   `Password`: demodemo\\n\\n:::note\\nPDF download may not work in codeSandbox mode. With [**this**](https://n59710.csb.app/invoices) link, you can open the example in the browser and try it.\\n:::\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-invoice-genarator-n59710?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-invoice-generator\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n## Conclusion\\n\\nIn this post, we\'ve created a fully customizable and completely functional Invoice Generator app. If you want to construct an application similar to this, you may add any feature with **refine** and personalize your invoice generator to your liking. We developed in very short amount of time, thanks to **refine**\'s features and the possibilities it provides for customization.\\n\\nYou can develop any web application or admin panel you want in a very short time with **refine**.\\n\\nWith **refine**\'s headless and SSR-Next.js features, it is possible and very easy to develop both **B2B** and **B2C** applications using a single framework."},{"id":"refine-react-admin-invoice-genarator","metadata":{"permalink":"/blog/refine-react-admin-invoice-genarator","source":"@site/blog/2022-02-22-refine-invoice-genarator.md","title":"Develop your Own Customizable Invoice Generator with Refine and Strapi | Part I","description":"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.","date":"2022-02-22T00:00:00.000Z","formattedDate":"February 22, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"invoice-generator","permalink":"/blog/tags/invoice-generator"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"business-tool","permalink":"/blog/tags/business-tool"},{"label":"internal-tool","permalink":"/blog/tags/internal-tool"},{"label":"strapi","permalink":"/blog/tags/strapi"}],"readingTime":11.215,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II","permalink":"/blog/refine-invoice-generator"},"nextItem":{"title":"How to Become A Production Hero as Developer with Refine in 2022","permalink":"/blog/how-to-become-a-production-hero-refine-2022"}},"content":"import company from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/company.png\';\\nimport client from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/client.png\';\\nimport contact from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/contact.png\';\\nimport refine_company from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/refine_company.png\';\\nimport refine_contacts from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/refine_contacts.png\';\\nimport clients_overview from \'@site/static/img/blog/2022-02-22-refine-invoice-genarator/clients_overview.gif\';\\n\\nInvoice management can be a daunting task for any business. With so many different software programs and options, it\'s hard to know where you need start or what will work best with your company culture! You can solve this problem with **refine**. With Refine, you can develop your own customizable invoice generator with ease.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nWe are going to develop an invoice generator application for our business using **refine** and [Strapi](https://strapi.io/). Let\'s see together how simple yet functional it can be!\\n\\nThis article will consist of two parts and we will try to explain each step in detail. In this section, we will create the basic parts of our application.\\n\\nIn this part, we will create a panel where our own company information is included, where we can create customers and create contacts with customer companies.\\n\\n## Setup Refine Project\\n\\nLet\'s start by creating our refine project. You can use the [superplate](https://github.com/pankod/superplate) to create a refine project.\\n\\n```bash\\nnpx superplate-cli -p refine-react refine-invoice-genarator\\n```\\n\\n```bash\\n\u2714 What will be the name of your app \xb7refine-invoice-genarator\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to using UI Framework? > Yes, I want Ant Design\\n\u2714 Do you want to customize theme?: \u2026 no\\n\u2714 Data Provider: Strapi\\n\u2714 Do you want to customize layout? \u2026 no\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nsuperplate will quickly create our refine project according to the features we choose. Let\'s continue by install the [refine Strapi-v4 Data Provider](https://refine.dev/docs/guides-and-concepts/data-provider/strapi-v4/) that we will use later.\\n\\n```bash\\nnpm i @pankod/refine-strapi-v4\\n```\\n\\nOur refine project and installations are now ready! Let\'s start using it.\\n\\n## Usage\\n\\n### Auth Provider\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/authProvider.ts\\"\\nimport { AuthProvider } from \\"@pankod/refine-core\\";\\nimport { AuthHelper } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { TOKEN_KEY, API_URL } from \\"./constants\\";\\n\\nimport axios from \\"axios\\";\\n\\nexport const axiosInstance = axios.create();\\nconst strapiAuthHelper = AuthHelper(API_URL + \\"/api\\");\\n\\nexport const authProvider: AuthProvider = {\\n    login: async ({ username, password }) => {\\n        const { data, status } = await strapiAuthHelper.login(\\n            username,\\n            password,\\n        );\\n        if (status === 200) {\\n            localStorage.setItem(TOKEN_KEY, data.jwt);\\n\\n            // set header axios instance\\n            axiosInstance.defaults.headers = {\\n                Authorization: `Bearer ${data.jwt}`,\\n            };\\n\\n            return Promise.resolve();\\n        }\\n        return Promise.reject();\\n    },\\n    logout: () => {\\n        localStorage.removeItem(TOKEN_KEY);\\n        return Promise.resolve();\\n    },\\n    checkError: () => Promise.resolve(),\\n    checkAuth: () => {\\n        const token = localStorage.getItem(TOKEN_KEY);\\n        if (token) {\\n            axiosInstance.defaults.headers = {\\n                Authorization: `Bearer ${token}`,\\n            };\\n            return Promise.resolve();\\n        }\\n\\n        return Promise.reject();\\n    },\\n    getPermissions: () => Promise.resolve(),\\n    getUserIdentity: async () => {\\n        const token = localStorage.getItem(TOKEN_KEY);\\n        if (!token) {\\n            return Promise.reject();\\n        }\\n\\n        const { data, status } = await strapiAuthHelper.me(token);\\n        if (status === 200) {\\n            const { id, username, email } = data;\\n            return Promise.resolve({\\n                id,\\n                username,\\n                email,\\n            });\\n        }\\n\\n        return Promise.reject();\\n    },\\n};\\n```\\n\\n</p>\\n</details>\\n\\n### Configure Refine for Strapi-v4\u200b\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport { notificationProvider, Layout, LoginPage } from \\"@pankod/refine-antd\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\n//highlight-start\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\nimport { authProvider, axiosInstance } from \\"./authProvider\\";\\n//highlight-end\\n\\nimport \\"@pankod/refine-antd/dist/styles.min.css\\";\\n\\nfunction App() {\\n    const API_URL = \\"Your_Strapi_Url\\";\\n    //highlight-next-line\\n    const dataProvider = DataProvider(API_URL + \\"/api\\", axiosInstance);\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            notificationProvider={notificationProvider}\\n            Layout={Layout}\\n            //highlight-start\\n            dataProvider={dataProvider}\\n            authProvider={authProvider}\\n            //highlight-end\\n            LoginPage={LoginPage}\\n        />\\n    );\\n}\\n```\\n\\n## Create Strapi Collections\u200b\\n\\nWe created three collections on Strapi as `company`, `client` and `contact` and added a relation between them. For detailed information on how to create a collection, you can check [here](https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html).\\n\\n`Company:`\\n\\n-   Logo: Media\\n-   Name: Text\\n-   Address: Text\\n-   Country: Text\\n-   City: Text\\n-   email: Email\\n-   Website: Text\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={company} alt=\\"Strapi Company Collection\\" />\\n</div>\\n<br />\\n\\n`Client:`\\n\\n-   Name: Text\\n-   Contacts: Relation with Contact\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={client} alt=\\"Strapi Client Collection\\" />\\n</div>\\n<br />\\n\\n`Contact:`\\n\\n-   First_name: Text\\n-   Last_name: Text\\n-   Phone_number Text\\n-   Email: email\\n-   Job: Text\\n-   Client: Relation with Client\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={contact} alt=\\"Strapi Contact Collection\\" />\\n</div>\\n<br />\\n\\nWe have created our collections by Strapi, now we can create Clients and their contacts with **refine**.\\n\\n## Your Company Detail Page\\n\\nAs a first step, let\'s start to create the part where our own `Company` will be located. If there are other companies you need to manage you can create them on the Your Company page and view them here.\\n\\n### Company Card Component\\n\\nLet\'s design a component that includes the details of our company. Then let\'s show it using `refine-antd` `List`. We will put the information such as name, logo and address from the Company collection we created on Strapi into Card component.\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/components/company/CompanyItem.tsx\\"\\nimport {\\n    Card,\\n    DeleteButton,\\n    UrlField,\\n    EmailField,\\n    EditButton,\\n    Typography,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { ICompany } from \\"interfaces\\";\\nimport { API_URL } from \\"../../constants\\";\\n\\nconst { Title, Text } = Typography;\\n\\n//highlight-start\\ntype CompanyItemProps = {\\n    item: ICompany;\\n};\\n//highlight-end\\n\\nexport const CompanyItem: React.FC<CompanyItemProps> = ({ item }) => {\\n    const image = item.logo ? API_URL + item.logo.url : \\"./error.png\\";\\n\\n    return (\\n        //highlight-start\\n        <Card\\n            style={{ width: \\"300px\\" }}\\n            cover={\\n                <div style={{ display: \\"flex\\", justifyContent: \\"center\\" }}>\\n                    <img\\n                        style={{\\n                            width: 220,\\n                            height: 100,\\n                            padding: 24,\\n                        }}\\n                        src={image}\\n                        alt=\\"logo\\"\\n                    />\\n                </div>\\n            }\\n            actions={[\\n                <EditButton key=\\"edit\\" size=\\"small\\" hideText />,\\n                <DeleteButton\\n                    key=\\"delete\\"\\n                    size=\\"small\\"\\n                    hideText\\n                    recordItemId={item.id}\\n                />,\\n            ]}\\n        >\\n            <Title level={5}>Company Name:</Title>\\n            <Text>{item.name}</Text>\\n            <Title level={5}>Company Address:</Title>\\n            <Text>{item.address}</Text>\\n            <Title level={5}>County:</Title>\\n            <Text>{item.country}</Text>\\n            <Title level={5}>City:</Title>\\n            <Text>{item.city}</Text>\\n            <Title level={5}>Email:</Title>\\n            <EmailField value={item.email} />\\n            <Title level={5}>Website:</Title>\\n            <UrlField value={item.website} />\\n        </Card>\\n        //highlight-end\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n### Company List Page\\n\\nLet\'s place the `CompanyItem` component that we created above in the [refine-antd List](https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList/) and display company information.\\n\\n```tsx title=\\"src/pages/company/CompanyList.tsx\\"\\nimport { IResourceComponentsProps } from \\"@pankod/refine-core\\";\\n//highlight-next-line\\nimport { useSimpleList, AntdList, List } from \\"@pankod/refine-antd\\";\\n\\n//highlight-next-line\\nimport { CompanyItem } from \\"components/company\\";\\n\\nexport const CompanyList: React.FC<IResourceComponentsProps> = () => {\\n    const { listProps } = useSimpleList<ICompany>({\\n        metaData: { populate: [\\"logo\\"] },\\n    });\\n\\n    return (\\n        //highlight-start\\n        <List title={\\"Your Companies\\"}>\\n            <AntdList\\n                grid={{ gutter: 16 }}\\n                {...listProps}\\n                renderItem={(item) => (\\n                    <AntdList.Item>\\n                        //highlight-next-line\\n                        <CompanyItem item={item} />\\n                    </AntdList.Item>\\n                )}\\n            />\\n        </List>\\n        //highlight-end\\n    );\\n};\\n```\\n\\n```tsx title=\\"App.tsx\\"\\n...\\n\\n//highlight-next-line\\nimport { CompanyList } from \\"pages/company\\";\\n\\nfunction App() {\\n    const API_URL = \\"Your_Strapi_Url\\";\\n    const dataProvider = DataProvider(API_URL + \\"/api\\", axiosInstance);\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            notificationProvider={notificationProvider}\\n            Layout={Layout}\\n            dataProvider={dataProvider}\\n            authProvider={authProvider}\\n            LoginPage={LoginPage}\\n            //highlight-start\\n            resources={[\\n                {\\n                    name: \\"companies\\",\\n                    options: { label: \\"Your Company\\" },\\n                    list: CompanyList,\\n                },\\n            ]}\\n             //highlight-end\\n        />\\n    );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_company} alt=\\"Refine Company List\\" />\\n</div>\\n<br />\\n\\nWe fetch the data of the `Company` collection that we created by Strapi, thanks to the **refine** `dataProvider`, and put it into the card component we created.\\n\\n## Contact Page\\n\\nOur `Contact Page` is a page related to `Clients`. Communication with client companies will be through the contacts we create here. The Contact Page will contain the information of the people we will contact. Let\'s create our list using **refine** [useTable](https://refine.dev/docs/ui-frameworks/antd/hooks/table/useTable/) hook.\\n\\n```tsx title=\\"src/pages/contact/ContactList.tsx\\"\\nimport {\\n    List,\\n    Table,\\n    TagField,\\n    useTable,\\n    Space,\\n    EditButton,\\n    DeleteButton,\\n    useModalForm,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IContact } from \\"interfaces\\";\\nimport { CreateContact } from \\"components/contacts\\";\\n\\nexport const ContactsList: React.FC = () => {\\n    //highlight-start\\n    const { tableProps } = useTable<IContact>({\\n        metaData: { populate: [\\"client\\"] },\\n    });\\n    //highlight-end\\n\\n    const {\\n        formProps: createContactFormProps,\\n        modalProps,\\n        show,\\n    } = useModalForm({\\n        resource: \\"contacts\\",\\n        action: \\"create\\",\\n        redirect: false,\\n    });\\n\\n    return (\\n        <>\\n            <List\\n                createButtonProps={{\\n                    onClick: () => {\\n                        show();\\n                    },\\n                }}\\n            >\\n                //highlight-start\\n                <Table {...tableProps} rowKey=\\"id\\">\\n                    <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                    <Table.Column dataIndex=\\"first_name\\" title=\\"First Name\\" />\\n                    <Table.Column dataIndex=\\"last_name\\" title=\\"Last Name\\" />\\n                    <Table.Column\\n                        dataIndex=\\"phone_number\\"\\n                        title=\\"Phone Number\\"\\n                    />\\n                    <Table.Column dataIndex=\\"email\\" title=\\"Email\\" />\\n                    <Table.Column\\n                        dataIndex=\\"job\\"\\n                        title=\\"Job\\"\\n                        render={(value: string) => (\\n                            <TagField color={\\"blue\\"} value={value} />\\n                        )}\\n                    />\\n                    <Table.Column<{ id: string }>\\n                        title=\\"Actions\\"\\n                        dataIndex=\\"actions\\"\\n                        render={(_, record) => (\\n                            <Space>\\n                                <EditButton\\n                                    hideText\\n                                    size=\\"small\\"\\n                                    recordItemId={record.id}\\n                                />\\n                                <DeleteButton\\n                                    hideText\\n                                    size=\\"small\\"\\n                                    recordItemId={record.id}\\n                                />\\n                            </Space>\\n                        )}\\n                    />\\n                </Table>\\n                //highlight-end\\n            </List>\\n            <CreateContact\\n                modalProps={modalProps}\\n                formProps={createContactFormProps}\\n            />\\n        </>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_contacts} alt=\\"Refine Contacts List\\" />\\n</div>\\n<br />\\n\\n## Client List Page\\n\\nWe have created example company and contacts above. Now let\'s create a `Client List` where we can view our clients.\\n\\n### Client Card Component\\n\\nLet\'s design the cards that will appear in our Client List.\\n\\n<details>\\n<summary>Show Code</summary>\\n<p>\\n\\n```tsx title=\\"src/components/client/ClientItem.tsx\\"\\nimport { useDelete } from \\"@pankod/refine-core\\";\\nimport {\\n    Card,\\n    TagField,\\n    Typography,\\n    Dropdown,\\n    Menu,\\n    Icons,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IClient } from \\"interfaces\\";\\n\\nconst { FormOutlined, DeleteOutlined } = Icons;\\nconst { Title, Text } = Typography;\\n\\ntype ClientItemProps = {\\n    item: IClient;\\n    editShow: (id?: string | undefined) => void;\\n};\\n\\nexport const ClientItem: React.FC<ClientItemProps> = ({ item, editShow }) => {\\n    const { mutate } = useDelete();\\n\\n    return (\\n        <Card style={{ width: 300, height: 300, borderColor: \\"black\\" }}>\\n            <div style={{ position: \\"absolute\\", top: \\"10px\\", right: \\"5px\\" }}>\\n                <Dropdown\\n                    overlay={\\n                        <Menu mode=\\"vertical\\">\\n                            <Menu.Item\\n                                key=\\"1\\"\\n                                style={{\\n                                    fontWeight: 500,\\n                                }}\\n                                icon={\\n                                    <FormOutlined\\n                                        style={{\\n                                            color: \\"green\\",\\n                                        }}\\n                                    />\\n                                }\\n                                onClick={() => editShow(item.id)}\\n                            >\\n                                Edit Client\\n                            </Menu.Item>\\n                            <Menu.Item\\n                                key=\\"2\\"\\n                                style={{\\n                                    fontWeight: 500,\\n                                }}\\n                                icon={\\n                                    <DeleteOutlined\\n                                        style={{\\n                                            color: \\"red\\",\\n                                        }}\\n                                    />\\n                                }\\n                                onClick={() =>\\n                                    mutate({\\n                                        resource: \\"clients\\",\\n                                        id: item.id,\\n                                        mutationMode: \\"undoable\\",\\n                                        undoableTimeout: 5000,\\n                                    })\\n                                }\\n                            >\\n                                Delete Client\\n                            </Menu.Item>\\n                        </Menu>\\n                    }\\n                    trigger={[\\"click\\"]}\\n                >\\n                    <Icons.MoreOutlined\\n                        style={{\\n                            fontSize: 24,\\n                        }}\\n                    />\\n                </Dropdown>\\n            </div>\\n\\n            <Title level={4}>{item.name}</Title>\\n            <Title level={5}>Client Id:</Title>\\n            <Text>{item.id}</Text>\\n            <Title level={5}>Contacts:</Title>\\n\\n            {item.contacts.map((item) => {\\n                return (\\n                    <TagField\\n                        color={\\"#d1c4e9\\"}\\n                        value={`${item.first_name} ${item.last_name}`}\\n                    />\\n                );\\n            })}\\n        </Card>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n### Client Create and Edit Page\\n\\nThe client page is a place where you can update your client info and add new clients. Let\'s create the Create and Edit pages to create new customers and update existing customers.\\n\\n-   Create Client\\n\\n<details>\\n<summary>Show Create Component</summary>\\n<p>\\n\\n```tsx title=\\"src/components/client/CreateClient.tsx\\"\\nimport {\\n    Create,\\n    Drawer,\\n    DrawerProps,\\n    Form,\\n    FormProps,\\n    Input,\\n    ButtonProps,\\n    Grid,\\n    Select,\\n    useSelect,\\n    useModalForm,\\n    Button,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IContact } from \\"interfaces\\";\\nimport { CreateContact } from \\"components/contacts\\";\\n\\ntype CreateClientProps = {\\n    drawerProps: DrawerProps;\\n    formProps: FormProps;\\n    saveButtonProps: ButtonProps;\\n};\\n\\nexport const CreateClient: React.FC<CreateClientProps> = ({\\n    drawerProps,\\n    formProps,\\n    saveButtonProps,\\n}) => {\\n    const breakpoint = Grid.useBreakpoint();\\n\\n    const { selectProps } = useSelect<IContact>({\\n        resource: \\"contacts\\",\\n        optionLabel: \\"first_name\\",\\n    });\\n\\n    const {\\n        formProps: createContactFormProps,\\n        modalProps,\\n        show,\\n    } = useModalForm({\\n        resource: \\"contacts\\",\\n        action: \\"create\\",\\n        redirect: false,\\n    });\\n\\n    return (\\n        <>\\n            <Drawer\\n                {...drawerProps}\\n                width={breakpoint.sm ? \\"500px\\" : \\"100%\\"}\\n                bodyStyle={{ padding: 0 }}\\n            >\\n                <Create saveButtonProps={saveButtonProps}>\\n                    <Form\\n                        {...formProps}\\n                        layout=\\"vertical\\"\\n                        initialValues={{\\n                            isActive: true,\\n                        }}\\n                    >\\n                        <Form.Item\\n                            label=\\"Client Company Name\\"\\n                            name=\\"name\\"\\n                            rules={[\\n                                {\\n                                    required: true,\\n                                },\\n                            ]}\\n                        >\\n                            <Input />\\n                        </Form.Item>\\n                        <Form.Item label=\\"Select Contact\\">\\n                            <div style={{ display: \\"flex\\" }}>\\n                                <Form.Item name={\\"contacts\\"} noStyle>\\n                                    <Select {...selectProps} mode=\\"multiple\\" />\\n                                </Form.Item>\\n                                <Button type=\\"link\\" onClick={() => show()}>\\n                                    Create Contact\\n                                </Button>\\n                            </div>\\n                        </Form.Item>\\n                    </Form>\\n                </Create>\\n            </Drawer>\\n\\n            <CreateContact\\n                modalProps={modalProps}\\n                formProps={createContactFormProps}\\n            />\\n        </>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n-   Edit Client\\n\\n<details>\\n<summary>Show Edit Component</summary>\\n<p>\\n\\n```tsx title=\\"src/components/client/EditClient.tsx\\"\\nimport {\\n    Edit,\\n    Drawer,\\n    DrawerProps,\\n    Form,\\n    FormProps,\\n    Input,\\n    ButtonProps,\\n    Grid,\\n    Select,\\n    useSelect,\\n} from \\"@pankod/refine-antd\\";\\n\\ntype EditClientProps = {\\n    drawerProps: DrawerProps;\\n    formProps: FormProps;\\n    saveButtonProps: ButtonProps;\\n};\\n\\nexport const EditClient: React.FC<EditClientProps> = ({\\n    drawerProps,\\n    formProps,\\n    saveButtonProps,\\n}) => {\\n    const breakpoint = Grid.useBreakpoint();\\n\\n    const { selectProps } = useSelect({\\n        resource: \\"contacts\\",\\n        optionLabel: \\"first_name\\",\\n    });\\n\\n    return (\\n        <Drawer\\n            {...drawerProps}\\n            width={breakpoint.sm ? \\"500px\\" : \\"100%\\"}\\n            bodyStyle={{ padding: 0 }}\\n        >\\n            <Edit saveButtonProps={saveButtonProps}>\\n                <Form\\n                    {...formProps}\\n                    layout=\\"vertical\\"\\n                    initialValues={{\\n                        isActive: true,\\n                    }}\\n                >\\n                    <Form.Item\\n                        label=\\"Client Company Name\\"\\n                        name=\\"name\\"\\n                        rules={[\\n                            {\\n                                required: true,\\n                            },\\n                        ]}\\n                    >\\n                        <Input />\\n                    </Form.Item>\\n                    <Form.Item label=\\"Select Contact\\" name=\\"contacts\\">\\n                        <Select {...selectProps} mode=\\"multiple\\" />\\n                    </Form.Item>\\n                </Form>\\n            </Edit>\\n        </Drawer>\\n    );\\n};\\n```\\n\\n</p>\\n</details>\\n\\n### Client List Page\\n\\nAbove, we created Card, Create and Edit components. Let\'s define and use these components we have created in our `ClientList`.\\n\\n```tsx title=\\"src/pages/client/ClientList.tsx\\"\\nimport { IResourceComponentsProps, HttpError } from \\"@pankod/refine-core\\";\\n\\nimport {\\n    useSimpleList,\\n    AntdList,\\n    List,\\n    useDrawerForm,\\n    CreateButton,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IClient } from \\"interfaces\\";\\n//highlight-next-line\\nimport { ClientItem, CreateClient, EditClient } from \\"components/client\\";\\n\\nexport const ClientList: React.FC<IResourceComponentsProps> = () => {\\n    const { listProps } = useSimpleList<IClient>({\\n        metaData: { populate: [\\"contacts\\"] },\\n    });\\n\\n    const {\\n        drawerProps: createDrawerProps,\\n        formProps: createFormProps,\\n        saveButtonProps: createSaveButtonProps,\\n        show: createShow,\\n    } = useDrawerForm<IClient, HttpError, IClient>({\\n        action: \\"create\\",\\n        resource: \\"clients\\",\\n        redirect: false,\\n    });\\n\\n    const {\\n        drawerProps: editDrawerProps,\\n        formProps: editFormProps,\\n        saveButtonProps: editSaveButtonProps,\\n        show: editShow,\\n    } = useDrawerForm<IClient, HttpError, IClient>({\\n        action: \\"edit\\",\\n        resource: \\"clients\\",\\n        redirect: false,\\n    });\\n\\n    return (\\n        <>\\n            <List\\n                pageHeaderProps={{\\n                    extra: <CreateButton onClick={() => createShow()} />,\\n                }}\\n            >\\n                <AntdList\\n                    grid={{ gutter: 24, xs: 1 }}\\n                    {...listProps}\\n                    renderItem={(item) => (\\n                        <AntdList.Item>\\n                            //highlight-next-line\\n                            <ClientItem item={item} editShow={editShow} />\\n                        </AntdList.Item>\\n                    )}\\n                />\\n            </List>\\n            //highlight-start\\n            <CreateClient\\n                drawerProps={createDrawerProps}\\n                formProps={createFormProps}\\n                saveButtonProps={createSaveButtonProps}\\n            />\\n            <EditClient\\n                drawerProps={editDrawerProps}\\n                formProps={editFormProps}\\n                saveButtonProps={editSaveButtonProps}\\n            />\\n            //highlight-end\\n        </>\\n    );\\n};\\n```\\n\\nWe created our `Client` and `Contact` pages. Now, let\'s create a Client with **refine** and define contacts for our clients.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={clients_overview} alt=\\"Refine Clients Overview\\" />\\n</div>\\n<br />\\n\\n## Live CodeSandbox Example\\n\\n`Username`: demo\\n\\n`Password`: demodemo\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-invoice-genarator-basics-i7h78z?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-invoice-genarator-basics\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n## Conclusion\\n\\nWe have completed the first step of our project, creating a basic platform for users to create their company and clients. In the next section, we will add more functionality to this program by allowing users to generate invoices and track payments. Stay tuned as we continue working on `Refine Invoice Generator`!\\n\\n[You can find the Refine Invoice Generator Part II article here \u2192](/blog/refine-invoice-generator/)"},{"id":"how-to-become-a-production-hero-refine-2022","metadata":{"permalink":"/blog/how-to-become-a-production-hero-refine-2022","source":"@site/blog/2022-02-21-become-production-hero.md","title":"How to Become A Production Hero as Developer with Refine in 2022","description":"Focus on your production, Everything you need is in Refine.","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react","permalink":"/blog/tags/react"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"opensource","permalink":"/blog/tags/opensource"}],"readingTime":2.03,"truncated":true,"authors":[{"name":"Melih \xd6zkalay","title":"Frontend Developer","url":"https://github.com/ozkalai","imageURL":"https://github.com/ozkalai.png","key":"ozkalai"}],"prevItem":{"title":"Develop your Own Customizable Invoice Generator with Refine and Strapi | Part I","permalink":"/blog/refine-react-admin-invoice-genarator"},"nextItem":{"title":"Build internal tools using Low-Code with Refine, React-based framework","permalink":"/blog/build-internal-tools-using-low-code-with-refine"}},"content":"With 2022, a new future in our careers as software developers. We will meet new technologies this year and continue to pursue innovations as before.\\n\\n\x3c!--truncate--\x3e\\n\\n### Production Oriented Approach \ud83e\uddf0 \\n\\n`{ Production }`\\n\\nDeveloping is often a real challenge. It is necessary to follow the innovations and use all these in the right place at the right time and again in the right way. Sometimes all these prevent us from producing or slow down our production process. It is our responsibility to ensure that technology serves us in a development environment where we prioritize production.\\n\\n### Is speed everything?\\n\\nSo is speed exactly everything?\\n\\n3 main components affect production in traditional production methods.\\n\\nSpeed \ud83d\udca8\\nQuality\ud83d\udc4c \\nTime \u231b\\n\\nCan you imagine what a development environment would be like where we provided all 3 components at the same time?\\n\\n### Briefly Refine\\n\\nA React-based <u>headless</u> framework for building internal tools, rapidly.\\n\\n#### What gives us Refine?\\n\\nThe word headless is underlined above. So Refine drop you into UI heaven, meanwhile, you can also use Antd library support.\\n\\n#### Routing\\n\\n- React Router\\n- React Location\\n- Next.js Router\\n\\n\\t\\n\\n#### Data Provider\\n\\n- Rest API\\n- GraphQL\\n- NestJs CRUD\\n- Airtable\\n- Strapi\\n- Strapi v4\\n- Strapi GraphQL\\n- Supabase\\n- Hasura\\n- Nhost\\n- Appwrite\\n- Firebase\\n- Directus\\n- Altogic\\n\\t\\n\\n#### State Management\\n\\nRefine uses React Query for all state management processes.\\n\\n#### Authentication & Authorization\\n\\nAuthentication and authorization processes are performed with the auth provider.\\n\\n#### i18n\\n\\nInternationalization...\\n\\nYes, of course.Both for React and Next.\\n\\n#### Realtime\\n\\nRealtime support to your app via liveProvider, there\'s even an [example](https://refine.dev/docs/examples/live-provider/ably/) made for you with Ably.\\n\\n\\n### What makes Refine Unique?\\n\\nRefine stands out with its wide _**routing**_, **_access control_** options, supporting the ability to use _**any UI Framework**_ and **_NextJS SSR_** support when compared to  React Admin, retool, adminBro.\\n\\n### Look at your productivity without worrying about is everything on the way\\n\\nAs you can see, you can find all the support you need to develop a data-intensive application in Refine. The best part is Refine is open-source. All you have to do is focus on your idea and project and experience the confidence of developing with React-based Refine.\\n\\nIf you want to take a closer look at [Refine](https://refine.dev/)\\n\\nIf you say you don\'t want to be alone while developing a product, the community is ready to meet you. Click for the [Discord link](https://discord.com/invite/UuU3XCc3J5)."},{"id":"build-internal-tools-using-low-code-with-refine","metadata":{"permalink":"/blog/build-internal-tools-using-low-code-with-refine","source":"@site/blog/2022-02-21-build-internal-tools-with-refine.md","title":"Build internal tools using Low-Code with Refine, React-based framework","description":"Why you should be using low-code app Refine to build internal tools? Learn how to build low-code apps using Refine, React and Ant Design.","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"fundamentals","permalink":"/blog/tags/fundamentals"},{"label":"react","permalink":"/blog/tags/react"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"low-code","permalink":"/blog/tags/low-code"},{"label":"internal-tools","permalink":"/blog/tags/internal-tools"}],"readingTime":9.61,"truncated":true,"authors":[{"name":"Salih \xd6zdemir","title":"Software Developer","url":"https://github.com/salihozdemir","imageURL":"https://github.com/salihozdemir.png","key":"salih"}],"prevItem":{"title":"How to Become A Production Hero as Developer with Refine in 2022","permalink":"/blog/how-to-become-a-production-hero-refine-2022"},"nextItem":{"title":"Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.","permalink":"/blog/how-to-access-control-with-nestjs"}},"content":"When it comes to creating internal tools, low-code platforms are the way to go. With Refine, a React-based low-code platform, you can quickly build data-intensive applications without having to worry about scalability or ease of use. Other low-code platforms may allow you to develop your applications, but they are often limited in terms of flexibility and customizability. With Refine, you have full control over your application and can add any business logic that you need. So if you\'re looking for a platform that will let you build internal tools quickly and easily, Refine is the right choice!\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Refine?\\n\\nRefine is a React-based framework that allows you to build data-intensive applications quickly and with ease. Rapid development and headless at the same time how is it? Well, Refine supports [Ant Design](https://ant.design) for quick and easy solutions. In addition, it allows you to use your design system, or to integrate with other popular design frameworks.\\n\\nRefer to the [Refine](https://refine.dev) for more information.\\n\\n## Why you should use Refine?\\n\\n-   It is Open Source under the MIT license.\\n-   Easy to use and it is easy to learn. There are many examples to help you get started, as well as documentation.\\n-   Is a framework that does not require you to use any UI libraries or frameworks.\\n-   Supports Ant Design for quick and easy solutions.\\n-   Backend agnostic, so you can connect to any backend you want.\\n-   Customizable, which means you can change it to fit your needs.\\n-   Refine is fully compatible with server side rendering with [Next.js](https://nextjs.org).\\n\\n## Features of Refine\\n\\nSome of the main features of Refine are:\\n\\n-   Data fetching and state management\\n-   Routings\\n-   Authentication\\n-   Authorization\\n-   Internationalization\\n-   Real-time\\n-   Mutation modes with optimistic and pessimistic and undoadable modes\\n\\n## How does Refine work?\\n\\nRefine is completely agnostic; just wrap your application with the Refine component and pass the property you need. For example, it takes properties such as `dataProvider` to communicate with the API and `authProvider` to authentication. Then you have hooks that you can use throughout the whole application. These hooks are compatible with [React Query](https://react-query.tanstack.com).\\n\\nTo understand how Refine works, let\'s explore the following titles:\\n\\n## Communicate with the API\\n\\nThe `dataProvider` allows communication with the API. All the data fetching and mutations are done through this property.\\n\\nA data provider must have the following properties:\\n\\n```tsx\\nconst dataProvider = {\\n    create: ({ resource, variables, metaData }) => Promise,\\n    createMany: ({ resource, variables, metaData }) => Promise,\\n    deleteOne: ({ resource, id, metaData }) => Promise,\\n    deleteMany: ({ resource, ids, metaData }) => Promise,\\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\\n    getMany: ({ resource, ids, metaData }) => Promise,\\n    getOne: ({ resource, id, metaData }) => Promise,\\n    update: ({ resource, id, variables, metaData }) => Promise,\\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\\n};\\n```\\n\\nRefine offers hooks to help you with data fetching and mutations using the data provider\'s properties. For example, when you use the `useTable` or `useList` hook, it will call the `getList` method underneath the hood.\\n\\nRefer to the [`useTable`](https://refine.dev/docs/ui-frameworks/antd/hooks/table/useTable/) and [data hooks](https://refine.dev/docs/core/hooks/data/useCreate/) for more information.\\n\\nFor example, let\'s look at what happens when `useTable` is called.\\n\\n```tsx\\nimport { List, Table, TextField, useTable } from \\"@pankod/refine-antd\\";\\n\\ninterface IPost {\\n    id: string;\\n    title: string;\\n    content: string;\\n    status: \\"published\\" | \\"draft\\" | \\"rejected\\";\\n}\\n\\nexport const PostList: React.FC = () => {\\n    const { tableProps } = useTable({\\n        resource: \\"posts\\",\\n        initialSorter: [\\n            {\\n                field: \\"title\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n        initialFilter: [\\n            {\\n                field: \\"status\\",\\n                operator: \\"eq\\",\\n                value: \\"draft\\",\\n            },\\n        ],\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n                <Table.Column dataIndex=\\"content\\" title=\\"Content\\" />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nThe `useTable` in the example calls the `getList` method of the data provider with the following properties:\\n\\n```ts\\ngetList({\\n    resource: \\"posts\\",\\n    pagination: {\\n        page: 1,\\n        perPage: 10,\\n    },\\n    sort: [\\n        {\\n            field: \\"title\\",\\n            order: \\"asc\\",\\n        },\\n    ],\\n    filters: [\\n        {\\n            field: \\"status\\",\\n            operator: \\"eq\\",\\n            value: \\"draft\\",\\n        },\\n    ],\\n});\\n```\\n\\nWith `metaData` you can pass any parameters that you need to the data provider. You can handle it in the data provider.\\n\\nAll hooks that use data provider methods such as `useTable` work with [React Query](https://react-query.tanstack.com). So you can use all the features of React Query.\\n\\nRefer to the [`dataProvider`](https://refine.dev/docs/core/providers/data-provider) for more information.\\n\\n### Out-of-the-box data providers\\n\\nRefine includes many out-of-the-box data providers to use in your projects like:\\n\\n-   [Simple REST API](https://github.com/pankod/refine/tree/master/packages/simple-rest)\\n-   [GraphQL](https://github.com/pankod/refine/tree/master/packages/graphql)\\n-   [NestJS CRUD](https://github.com/pankod/refine/tree/master/packages/nestjsx-crud)\\n-   [Airtable](https://github.com/pankod/refine/tree/master/packages/airtable)\\n-   [Strapi](https://github.com/pankod/refine/tree/master/packages/strapi) - [Strapi v4](https://github.com/pankod/refine/tree/master/packages/strapi-v4)\\n-   [Strapi GraphQL](https://github.com/pankod/refine/tree/master/packages/strapi-graphql)\\n-   [Supabase](https://github.com/pankod/refine/tree/master/packages/supabase)\\n-   [Hasura](https://github.com/pankod/refine/tree/master/packages/hasura)\\n-   [Nhost](https://github.com/pankod/refine/tree/master/packages/nhost)\\n-   [Appwrite](https://github.com/pankod/refine/tree/master/packages/appwrite)\\n-   [Altogic](https://github.com/pankod/refine/tree/master/packages/altogic)\\n\\n## Add routing to the application\\n\\nRefine needs some router functions to create resource pages, navigation, and so on. It uses the `routerProvider` property to pass the router functions to Refine. In this way, it allows you to use any router library that you want.\\n\\nIf you don\'t need any customization in your router, we not recommend making this provider. Instead, try `nextjs-router` for your Next.js project and `react-router` or `react-location` for your React project.\\n\\nRefer to the [`routerProvider`](https://refine.dev/docs/core/providers/router-provider) for more information.\\n\\n### Out-of-the-box router providers\\n\\nRefine includes many out-of-the-box data providers to use in your projects like:\\n\\n-   [React Router](https://github.com/pankod/refine/tree/master/packages/react-router)\\n-   [React Location](https://github.com/pankod/refine/tree/master/packages/react-location)\\n-   [Next.js Router](https://github.com/pankod/refine/tree/master/packages/nextjs-router)\\n\\n## Create pages via `resources`\\n\\nThe main building blocks of a Refine app are `resources`. A resource is an entity in the API\'s endpoint (e.g., https://api.fake-rest.refine.dev/posts). It connects data from the API with page components, allowing pages to access data from the API.\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport dataProvider from \\"@pankod/refine-json-server\\";\\nimport \\"@pankod/refine-antd/dist/styles.min.css\\";\\n\\nimport { PostList, PostCreate, PostEdit, PostShow } from \\"pages/posts\\";\\n\\nconst App: React.FC = () => {\\n    return (\\n        <Refine\\n            dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n            resources={[\\n                {\\n                    name: \\"posts\\",\\n                    list: PostList,\\n                    create: PostCreate,\\n                    edit: PostEdit,\\n                    show: PostShow,\\n                },\\n            ]}\\n        />\\n    );\\n};\\n\\nexport default App;\\n```\\n\\nEach resource component is assigned a route by Refine. The `/posts` route, for example, displays the list page of the `posts` resource, which is implemented using the `PostList` component. The `PostCreate` component is the create page of the `posts` resource and it is rendered by the `/posts/create` route. The `PostEdit` component is the edit page of the `posts` resource and it is rendered by the `/posts/edit/:id` route. The `PostShow` component is the show page of the `posts` resource and it is rendered by the `/posts/show/:id` route.\\n\\nRefine hooks used in these pages read some values from the route by default. For example, `useForm` hook takes the `resource`, `action`, and `id` from the route by default.\\n\\n## Authentication\\n\\nThe `authProvider` allows you to add authentication your application. You can use any authentication library that you want. All your authentication logic is managed with this `authProvider`.\\n\\nA auth provider must have the following properties:\\n\\n```tsx\\nconst authProvider = {\\n    login: () => Promise,\\n    logout: () => Promise,\\n    checkAuth: () => Promise,\\n    checkError: () => Promise,\\n    getPermissions: () => Promise,\\n    getUserIdentity: () => Promise,\\n};\\n```\\n\\nRefine uses these methods via [authorization hooks](https://refine.dev/docs/core/hooks/auth/useLogin/). Authentication and authorization procedures such as login, logout, checking user credentials, and catching HTTP errors are all handled using authorization hooks. For example, `checkAuth`is called when the user tries to access a page that requires authentication.\\n\\nRefer to the [`authProvider`](https://refine.dev/docs/core/providers/auth-provider) for more information.\\n\\n### Out-of-the-box router providers\\n\\n-   Auth0 - [Source Code](https://github.com/pankod/refine/tree/master/examples/authProvider/auth0/) - [Demo](https://refine.dev/docs/examples/auth-provider/auth0)\\n-   Google - [Source Code](https://github.com/pankod/refine/tree/master/examples/authProvider/googleLogin) - [Demo](https://refine.dev/docs/examples/auth-provider/google-auth)\\n-   OTP Login - [Source Code](https://github.com/pankod/refine/tree/master/examples/authProvider/otpLogin) - [Demo](https://refine.dev/docs/examples/auth-provider/otpLogin)\\n\\n## Authorization\\n\\nRefine provides `accessControlProvider` that you can use to control who has access to what in your app. You can use any access control library that you want. In addition, you can choose the access control models that work best for you (RBAC, ABAC, ACL, etc.).\\n\\nAn `accessControlProvider` must have one async method called `can` to check if the person asking for access is allowed to have it.\\n\\n```tsx\\ntype CanParams = {\\n    resource: string;\\n    action: string;\\n    params?: any;\\n};\\n\\ntype CanReturnType = {\\n    can: boolean;\\n    reason?: string;\\n}\\n\\nconst accessControlProvider = {\\n    can: ({ resource, action, params }: CanParams) => Promise<CanReturnType>;\\n}\\n```\\n\\n[`useCan`](https://refine.dev/docs/core/hooks/accessControl/useCan) and [`<CanAccess>`](https://refine.dev/docs/core/components/accessControl/can-access/) component use this method to check if the user is allowed to access.\\n\\nFor example, we can stop non-admin users from editing the post resource.\\n\\n```tsx\\nconst App: React.FC = () => {\\n    <Refine\\n        accessControlProvider={{\\n            can: async ({ resource, action, params }) => {\\n                if (resource === \\"posts\\" && action === \\"edit\\") {\\n                    const userRole = getUserRole();\\n\\n                    if (userRole === \\"admin\\") {\\n                        return { can: true };\\n                    }\\n\\n                    return Promise.resolve({\\n                        can: false,\\n                        reason: \\"Unauthorized\\",\\n                    });\\n                }\\n\\n                return Promise.resolve({ can: true });\\n            },\\n        }}\\n    />;\\n};\\n```\\n\\nRefer to the [`accessControlProvider`](https://refine.dev/docs/core/providers/accessControl-provider) for more information.\\n\\n### Out-of-the-box access control providers\\n\\n-   Casbin - [Source Code](https://github.com/pankod/refine/tree/master/examples/accessControl/casbin) - [Demo](https://codesandbox.io/s/access-control-casbin-react-l06vy)\\n-   Cerbos - [Source Code](https://github.com/pankod/refine/tree/master/examples/accessControl/cerbos) - [Demo](https://codesandbox.io/s/access-control-cerbos-react-mbhei)\\n\\n## Internationalization\\n\\nThe `i18nProvider` is used to give localization features to your application. This will allow you to change the text in your application to different languages.\\n\\nAn i18n provider must have the following properties:\\n\\n```ts\\nconst i18nProvider = {\\n    translate: (key: string, params: object) => string,\\n    changeLocale: (lang: string) => Promise,\\n    getLocale: () => string,\\n};\\n```\\n\\nRefine uses these methods via [translation hooks](https://refine.dev/docs/core/hooks/translate/useTranslate/).\\n\\nRefer to [Refine i18nProvider](https://refine.dev/docs/core/providers/i18n-provider) for more details and how to use the [react-i18next](https://react.i18next.com) package.\\n\\n## Real-time support\\n\\nThe `liveProvider` is used to add real-time support to your application. You can use any real-time library or tool that you want.\\n\\nA live provider must have the following properties:\\n\\n```tsx\\nconst liveProvider = {\\n    subscribe: ({ channel, params: { ids }, types, callback }) => any,\\n    unsubscribe: (subscription) => void,\\n    publish?: (event) => void,\\n};\\n```\\n\\nRefine data hooks are subscribed to using the subscribe method given with the live provider. The subscribe method returns a subscription object that can be used to unsubscribe. The unsubscribe method is used to unsubscribe from the subscription. The publish method is used to publish an event to the channel on the client side.\\n\\nIf you send an event after the relevant operations on the server, Refine will invalidate the related queries. If the `liveMode` is `manual`, queries of related resources are not invalidated in real-time; instead `onLiveEvent` is run with the event as new events from the subscription arrive.\\n\\n### Out-of-the-box access control providers\\n\\n-   Ably - [Source Code](https://github.com/pankod/refine/blob/master/packages/ably/src/index.ts) - [Demo](https://codesandbox.io/s/refine-ably-example-9swpp)\\n-   Supabase - [Source Code](https://github.com/pankod/refine/blob/master/packages/supabase/src/index.ts#L187)\\n-   Appwrite - [Source Code](https://github.com/pankod/refine/blob/master/packages/appwrite/src/index.ts#L252)\\n\\n## Other features of Refine\\n\\n### `notificationProvider`\\n\\nThe `notificationProvider` is used to display notifications to the user when mutations are performed. You can use any notification library that you want.\\n\\n### `mutationMode`\\n\\nThe `mutationMode` is used to determine how to handle mutations. You can use `pessimistic` `optimistic` or `undoable` mode. When using the pessimistic mode, UI updates are delayed until the mutation is confirmed by the server. When using the optimistic mode, UI updates are immediately updated. When using the undoable mode, UI updates are immediately updated, but you can undo the mutation.\\n\\n### `syncWithLocation`\\n\\nIf `syncWithLocation` is turned on, the list of query parameters may be modified manually by editing directly in the URL.\\n\\n```\\n/posts?current=1&pageSize=8&sort[]=createdAt&order[]=desc\\n```\\n\\n<br/>\\n\\nCheck out all of Refine\'s [features](https://refine.dev/docs/core/components/refine-config) for more information.\\n\\n## Conclusion\\n\\nIf you\'re looking for a way to quickly and easily create an internal tool without sacrificing customization, Refine is worth checking out. It allows you to choose any library that you want for your requirements. Plus, if you need help or have feedback, the team at Refine is responsive and happy to help out. Give [Refine](https://github.com/pankod/refine) a star on GitHub if you like it - your support will help us continue making this tool amazing!"},{"id":"how-to-access-control-with-nestjs","metadata":{"permalink":"/blog/how-to-access-control-with-nestjs","source":"@site/blog/2022-02-21-build-low-code-customizable-and-authorization-ready-accesscontrol-admin-panel-with-nestjs.md","title":"Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.","description":"Build authorization ready admin panel with NestJS.","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"nestjs","permalink":"/blog/tags/nestjs"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"accesscontrol","permalink":"/blog/tags/accesscontrol"},{"label":"refine","permalink":"/blog/tags/refine"}],"readingTime":3.19,"truncated":true,"authors":[{"name":"Y\u0131ld\u0131ray \xdcnl\xfc","title":"Software Developer","url":"https://github.com/yildirayunlu","imageURL":"https://github.com/yildirayunlu.png","key":"yildiray"}],"prevItem":{"title":"Build internal tools using Low-Code with Refine, React-based framework","permalink":"/blog/build-internal-tools-using-low-code-with-refine"},"nextItem":{"title":"Create Full Featured Admin Panel with React and Ant Design","permalink":"/blog/refine-react-ant-design-admin-panel-framework"}},"content":"In the [previous blog post](https://refine.dev/blog/customizable-admin-panel-with-nestjs), we used [nestjs](https://nestjs.com) with an api and [refine](https://refine.dev) in the admin panel. In this blog, let\'s add **authorization** to both api and admin panel.\\n\\n\x3c!--truncate--\x3e\\n\\n**All the steps described are in this [repo](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app).**\\n\\n## Intro\\n\\nIn the [previous blog post](https://dev.to/pankod/build-fast-and-customizable-admin-panel-with-nestjs-291), we used [nestjs](https://nestjs.com) with an api and [refine](https://refine.dev) in the admin panel. In this blog, let\'s add **authorization** to both api and admin panel.\\n\\n## Scenario\\nLet\'s have two roles in this system, they are `admin` and `editor`. In the API we prepared, we had two crud processes that we categorized as `companies` and `jobs`.\\n\\nIn this scenario; `editor` can only list companies, not any deletion or additions. Have the authority to list and create job postings. Let `admin` have authorization for all transactions.\\n\\n## Authorization\\n\\nI used [nestjsx-crud](https://github.com/nestjsx/crud) in the api we prepared. This library makes `CRUD` operations very easy. However, there is no support on the authorization side. That\'s why I made use of the [accesscontrol](https://github.com/onury/accesscontrol) library, which can be easily integrated with both `nestjs` and `refine`. \\n\\n## Using AccessControl in API\\n\\nIn the first step, let\'s install [nestjs-access-control](https://github.com/nestjsx/nest-access-control) in our project for `accesscontrol` integration to the api.\\n\\n```\\nnpm install nest-access-control\\n```\\n\\nI\'m specifying a role as the `AccessControl` supports. According to our scenario, this should be as follows:\\n\\n```ts\\n// app.roles.ts\\n\\nimport { RolesBuilder } from \'nest-access-control\';\\n\\nexport enum AppRoles {\\n  ADMIN = \'ADMIN\',\\n  EDITOR = \'EDITOR\',\\n}\\n\\nexport const roles: RolesBuilder = new RolesBuilder();\\n\\nroles\\n  // editor\\n  .grant(AppRoles.EDITOR)\\n  .create(\'jobs\')\\n  .update(\'jobs\')\\n  // admin\\n  .grant(AppRoles.ADMIN)\\n  .extend(AppRoles.EDITOR)\\n  .create([\'companies\'])\\n  .update([\'companies\'])\\n  .delete([\'companies\', \'jobs\']);\\n```\\n\\nNow I import `AccessControlModule`.\\n\\n```ts\\n  // app.module.ts\\n\\n  import { roles } from \'./app.roles\';\\n\\n    @Module({\\n      imports: [\\n        ...\\n        AccessControlModule.forRoles(roles)\\n      ],\\n      controllers: [...],\\n      providers: [...],\\n    })\\n    export class AppModule {}\\n```\\n\\nAfter determining the roles and privileges, we add the `ACGuard` class to the controller `UseGuards`.\\n\\n```ts\\nimport { ACGuard } from \'nest-access-control\';\\n\\n...\\n@UseGuards(JwtAuthGuard, ACGuard)\\n@Controller(\'companies\')\\nexport class CompanyController implements CrudController<CompanyEntity> {}\\n...\\n```\\n\\nNow we define resource and action for methods using `UseRoles` decorator. For example, we **override** for the `companies` resource and the `create` action as follows.\\n\\n```ts\\nimport { ACGuard, UseRoles } from \'nest-access-control\';\\n\\n...\\n@UseGuards(JwtAuthGuard, ACGuard)\\n@Controller(\'companies\')\\nexport class CompanyController implements CrudController<CompanyEntity> {\\n  constructor(public service: CompanyService) {}\\n\\n  get base(): CrudController<CompanyEntity> {\\n    return this;\\n  }\\n\\n  @Override()\\n  @UseRoles({\\n    resource: \'companies\',\\n    action: \'create\',\\n  })\\n  createOne(\\n    @ParsedRequest() req: CrudRequest,\\n    @ParsedBody() dto: CompanyCreateDto,\\n  ) {\\n    return this.base.createOneBase(req, <CompanyEntity>dto);\\n  }\\n...\\n```\\n\\nSimilarly, we add this decorator for other methods.\\n\\nAfter these operations, we complete the authorization process on the API side. Now we will do the authorization to the admin panel that we created with `refine`.\\n\\n## Using AccessControl in refine (dashboard)\\n\\nrefine; It supports many authorization tools, very flexible. What we need to do; Defining an `accessControlProvider` inside the `<Refine />` component.\\n\\n`accessControlProvider` is implemented only one asynchronous method named \\"can\\" to be used to control whether the requested access is granted. This method takes `resource` and `action` with parameters.\\n\\n```tsx\\n// App.tsx\\n\\n<Refine\\n  ...\\n  accessControlProvider={{\\n    can: async ({ resource, action }) => {\\n      let can: boolean = false;\\n      const stringifyUser = localStorage.getItem(\'refine-user\');\\n      if (stringifyUser) {\\n        const { roles } = JSON.parse(stringifyUser);\\n\\n        roles.forEach((role: string) => {\\n          switch (action) {\\n            case \'list\':\\n            case \'show\':\\n              can = ac.can(role).read(resource).granted;\\n              break;\\n            case \'create\':\\n              can = ac.can(role).create(resource).granted;\\n              break;\\n            case \'edit\':\\n              can = ac.can(role).update(resource).granted;\\n              break;\\n            case \'delete\':\\n              can = ac.can(role).delete(resource).granted;\\n              break;\\n          }\\n        });\\n      }\\n      return Promise.resolve({ can });\\n    },\\n  }}\\n/>****\\n```\\n\\nNow let me explain a little bit of this code I wrote. First we need the role of the logged in user. We saved it to local storage during login.\\nThen we match the refine `actions` with the accessControl\'s actions and check its authorization with the `granted` method. I also resolve the returned result.\\n\\n## Conclusion\\nAs a result, we have done the authorization on both the ui (dashboard) side and the api side."},{"id":"refine-react-ant-design-admin-panel-framework","metadata":{"permalink":"/blog/refine-react-ant-design-admin-panel-framework","source":"@site/blog/2022-02-21-react-antd-admin.md","title":"Create Full Featured Admin Panel with React and Ant Design","description":"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"antd","permalink":"/blog/tags/antd"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin","permalink":"/blog/tags/admin"}],"readingTime":12.64,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.","permalink":"/blog/how-to-access-control-with-nestjs"},"nextItem":{"title":"Top React JS Frameworks Every Developer Should Know","permalink":"/blog/best-react-frameworks"}},"content":"import i18n_overview from \'@site/static/img/blog/2022-02-21-react-antd-admin/i8n-overview.gif\';\\nimport access_control from \'@site/static/img/blog/2022-02-21-react-antd-admin/access-control.gif\';\\nimport access_button from \'@site/static/img/blog/2022-02-21-react-antd-admin/access_button.png\';\\nimport realtime from \'@site/static/img/blog/2022-02-21-react-antd-admin/realtime.gif\';\\nimport tutorial from \'@site/static/img/blog/2022-02-21-react-antd-admin/refine_tutorial.gif\';\\nimport table_i18n from \'@site/static/img/blog/2022-02-21-react-antd-admin/table-i18n.gif\';\\n\\n[**refine**](https://refine.dev/) is a **headless** [React](https://en.reactjs.org/) **internal tool** framework. It helps you develop quickly while developing both B2B and B2C applications. While speeding you up, it is never restricted and has a fully customizable structure.\\n\\n\x3c!--truncate--\x3e\\n\\n#### Key features\u200b\\n\\n\ud83d\udd25 Headless : Works with any UI framework\\n\\n\u2699\ufe0f Zero-configuration : One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, GraphQL, NestJs CRUD, Airtable, Strapi, Strapi v4, Strapi GraphQL, Supabase, Hasura, Nhost, Appwrite, Firebase and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\nYou can use it with any UI library you want without any problems. Also, [Ant Design](https://ant.design/) as out-of-the-box is supported.\\n\\n**refine** directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.\\n\\n## Refine Advanced Tutorial\\n\\nThis article will proceed through refine\'s [Refine Basic Tutorial](https://refine.dev/docs/ui-frameworks/antd/tutorial/). That\'s why I suggest you read the basic tutorial of refine.\\n\\nIn this tutorial, we will learn how to include the features(i18n, Realtime, Access Control) provided by the refine in our project and how we can use it.\\n\\n### Create Refine Project\\n\\nLet\'s start by creating our refine project. You can use the [superplate](https://github.com/pankod/superplate) to create a refine project.\\n\\n```bash\\nnpx superplate-cli -p refine-react refine-advanced-tutorial\\n```\\n\\n```bash\\n\u2714 What will be the name of your app \u203a refine-advanced-tutorial\\n\\n\u2714 Package manager: \xb7 npm\\n\\n\u2714 Do you want to use an UI Framework?: \xb7 antd\\n\\n\u2714 Do you want to customize theme?: \xb7 css\\n\\n\u2714 Data Provider: \xb7 custom-json-rest-data-provider\\n\\n\u2714 Auth Provider: \xb7 none\\n\\n\u2714 Do you want to add an example page? \xb7 example-resource\\n\\n\u2714 Do you want to customize layout? \xb7 no\\n```\\n\\n`\u2714 Do you want to add an example page? \xb7example-resource` By selecting you can view the tutorial in your local.\\n\\n```bash\\ncd refine-advanced-tutorial\\n\\nnpm run dev\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={tutorial} alt=\\"Refine Tutorial\\" />\\n</div>\\n<br />\\n\\nAs you have seen, our example project is ready. Now let\'s examine how the features offered by **refine** are included in a project and how they are used.\\n\\n## Adding i18n Provider to Your Project\\n\\n### Create i18n Instance\\n\\nFirst, we will create an i18n instance using react-i18next.\\n\\n```tsx title=\\"src/i18n.ts\\"\\nimport i18n from \\"i18next\\";\\nimport { initReactI18next } from \\"react-i18next\\";\\nimport Backend from \\"i18next-xhr-backend\\";\\nimport detector from \\"i18next-browser-languagedetector\\";\\n\\ni18n.use(Backend)\\n    .use(detector)\\n    .use(initReactI18next)\\n    .init({\\n        supportedLngs: [\\"en\\", \\"de\\"],\\n        backend: {\\n            loadPath: \\"/locales/{{lng}}/{{ns}}.json\\",\\n        },\\n        defaultNS: \\"common\\",\\n        fallbackLng: [\\"en\\", \\"de\\"],\\n    });\\n\\nexport default i18n;\\n```\\n\\nLet\'s import the `i18n` instance we created in index.tsx. Then let\'s wrap the App in `React.Suspense`.\\n\\n```tsx title=\\"src/index.tsx\\"\\nimport React from \\"react\\";\\nimport ReactDOM from \\"react-dom\\";\\nimport App from \\"./App\\";\\n\\nimport \\"./i18n\\";\\n\\nReactDOM.render(\\n    <React.StrictMode>\\n        <React.Suspense fallback=\\"loading\\">\\n            <App />\\n        </React.Suspense>\\n    </React.StrictMode>,\\n    document.getElementById(\\"root\\"),\\n);\\n```\\n\\nLet\'s define our i18n provider and give it a **refine**.\\n\\n```tsx title=\\"src/App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport { notificationProvider, Layout } from \\"@pankod/refine-antd\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\n\\nimport \\"@pankod/refine-antd/dist/styles.min.css\\";\\n\\nimport { PostList, PostCreate, PostEdit, PostShow } from \\"pages/posts\\";\\n//highlight-next-line\\nimport { useTranslation } from \\"react-i18next\\";\\n\\nfunction App() {\\n    //highlight-start\\n    const { t, i18n } = useTranslation();\\n\\n    const i18nProvider = {\\n        translate: (key: string, params: object) => t(key, params),\\n        changeLocale: (lang: string) => i18n.changeLanguage(lang),\\n        getLocale: () => i18n.language,\\n    };\\n    //highlight-end\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            notificationProvider={notificationProvider}\\n            Layout={Layout}\\n            dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n            resources={[\\n                {\\n                    name: \\"posts\\",\\n                    list: PostList,\\n                    create: PostCreate,\\n                    edit: PostEdit,\\n                    show: PostShow,\\n                },\\n            ]}\\n            //highlight-next-line\\n            i18nProvider={i18nProvider}\\n        />\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nNow let\'s add our own translation. Let\'s create two separate json files in English and German.\\n\\n```json title=\\"/public/locales/en/common.json\\"\\n{\\n    \\"posts\\": {\\n        \\"posts\\": \\"Posts\\",\\n        \\"fields\\": {\\n            \\"id\\": \\"Id\\",\\n            \\"title\\": \\"Title\\",\\n            \\"category\\": \\"Category\\",\\n            \\"status\\": {\\n                \\"title\\": \\"Status\\",\\n                \\"published\\": \\"Published\\",\\n                \\"draft\\": \\"Draft\\",\\n                \\"rejected\\": \\"Rejected\\"\\n            },\\n            \\"content\\": \\"Content\\",\\n            \\"createdAt\\": \\"Created At\\"\\n        },\\n        \\"titles\\": {\\n            \\"create\\": \\"Create Post\\",\\n            \\"edit\\": \\"Edit Post\\",\\n            \\"list\\": \\"Posts\\",\\n            \\"show\\": \\"Show Post\\"\\n        }\\n    },\\n    \\"table\\": {\\n        \\"actions\\": \\"Actions\\"\\n    }\\n}\\n```\\n\\n```json title=\\"/public/locales/de/common.json\\"\\n{\\n    \\"posts\\": {\\n        \\"posts\\": \\"Eintr\xe4ge\\",\\n        \\"fields\\": {\\n            \\"id\\": \\"Id\\",\\n            \\"title\\": \\"Titel\\",\\n            \\"category\\": \\"Kategorie\\",\\n            \\"status\\": {\\n                \\"title\\": \\"Status\\",\\n                \\"published\\": \\"Ver\xf6ffentlicht\\",\\n                \\"draft\\": \\"Draft\\",\\n                \\"rejected\\": \\"Abgelehnt\\"\\n            },\\n            \\"content\\": \\"Inhalh\\",\\n            \\"createdAt\\": \\"Erstellt am\\"\\n        },\\n        \\"titles\\": {\\n            \\"create\\": \\"Erstellen\\",\\n            \\"edit\\": \\"Bearbeiten\\",\\n            \\"list\\": \\"Eintr\xe4ge\\",\\n            \\"show\\": \\"Eintrag zeigen\\"\\n        }\\n    },\\n    \\"table\\": {\\n        \\"actions\\": \\"Aktionen\\"\\n    }\\n}\\n```\\n\\nIn this article, we have included the translation of only a small part as an example.\\n\\nNow, let\'s create a select component in the header and examine our posts according to the language we have chosen.\\n\\n```tsx title=\\"src/components/header.tsx\\"\\nimport { useGetLocale, useSetLocale } from \\"@pankod/refine-core\\";\\nimport {\\n    AntdLayout,\\n    Space,\\n    Menu,\\n    Button,\\n    Icons,\\n    Dropdown,\\n} from \\"@pankod/refine-antd\\";\\n//highlight-next-line\\nimport { useTranslation } from \\"react-i18next\\";\\n\\nconst { DownOutlined } = Icons;\\n\\nexport const Header: React.FC = () => {\\n    //highlight-start\\n    const { i18n } = useTranslation();\\n    const locale = useGetLocale();\\n    const changeLanguage = useSetLocale();\\n\\n    const currentLocale = locale();\\n\\n    const menu = (\\n        <Menu selectedKeys={[currentLocale]}>\\n            {[...(i18n.languages || [])].sort().map((lang: string) => (\\n                <Menu.Item key={lang} onClick={() => changeLanguage(lang)}>\\n                    {lang === \\"en\\" ? \\"English\\" : \\"German\\"}\\n                </Menu.Item>\\n            ))}\\n        </Menu>\\n    );\\n    //highlight-end\\n\\n    return (\\n        <AntdLayout.Header\\n            style={{\\n                display: \\"flex\\",\\n                justifyContent: \\"flex-end\\",\\n                alignItems: \\"center\\",\\n                padding: \\"0px 24px\\",\\n                height: \\"48px\\",\\n                backgroundColor: \\"#FFF\\",\\n            }}\\n        >\\n            <Dropdown overlay={menu}>\\n                <Button type=\\"link\\">\\n                    <Space>\\n                        {currentLocale === \\"en\\" ? \\"English\\" : \\"German\\"}\\n                        <DownOutlined />\\n                    </Space>\\n                </Button>\\n            </Dropdown>\\n        </AntdLayout.Header>\\n    );\\n};\\n```\\n\\nLet\'s define the header we created within the refine.\\n\\n```tsx\\nreturn (\\n    <Refine\\n        routerProvider={routerProvider}\\n        notificationProvider={notificationProvider}\\n        Layout={Layout}\\n        i18nProvider={i18nProvider}\\n        dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n        //highlight-next-line\\n        Header={Header}\\n        resources={[\\n            {\\n                name: \\"posts\\",\\n                list: PostList,\\n                create: PostCreate,\\n                edit: PostEdit,\\n                show: PostShow,\\n            },\\n        ]}\\n    />\\n);\\n```\\n\\nNow our i18n Provider is ready to use, let\'s test it together.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={i18n_overview} alt=\\"Refine i18n Provider\\" />\\n</div>\\n<br />\\n\\n### Use the translation with Table Content\\n\\n```tsx\\nimport {\\n    //highlight-next-line\\n    useTranslate,\\n    useMany,\\n} from \\"@pankod/refine-core\\";\\nimport {\\n    List,\\n    Table,\\n    TextField,\\n    useTable,\\n    Space,\\n    EditButton,\\n    ShowButton,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IPost, ICategory } from \\"interfaces\\";\\n\\nexport const PostList: React.FC = () => {\\n    //highlight-next-line\\n    const translate = useTranslate();\\n    const { tableProps } = useTable<IPost>();\\n\\n    const categoryIds =\\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\\n    const { data, isLoading } = useMany<ICategory>({\\n        resource: \\"categories\\",\\n        ids: categoryIds,\\n        queryOptions: {\\n            enabled: categoryIds.length > 0,\\n        },\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column\\n                    dataIndex=\\"title\\"\\n                    //highlight-next-line\\n                    title={translate(\\"posts.fields.title\\")}\\n                />\\n                <Table.Column\\n                    dataIndex={[\\"category\\", \\"id\\"]}\\n                    //highlight-next-line\\n                    title={translate(\\"posts.fields.category\\")}\\n                    render={(value) => {\\n                        if (isLoading) {\\n                            return <TextField value=\\"Loading...\\" />;\\n                        }\\n\\n                        return (\\n                            <TextField\\n                                value={\\n                                    data?.data.find((item) => item.id === value)\\n                                        ?.title\\n                                }\\n                            />\\n                        );\\n                    }}\\n                />\\n                <Table.Column<IPost>\\n                    //highlight-next-line\\n                    title={translate(\\"table.actions\\")}\\n                    dataIndex=\\"actions\\"\\n                    key=\\"actions\\"\\n                    render={(_value, record) => (\\n                        <Space>\\n                            <EditButton size=\\"small\\" recordItemId={record.id} />\\n                            <ShowButton size=\\"small\\" recordItemId={record.id} />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={table_i18n} alt=\\"Refine i18n Provider\\" />\\n</div>\\n<br />\\n\\nYou can add the translation you want and organize your content according to different languages \u200b\u200btogether with the **refine** i18n Provider.\\n\\nCheck out [refine i18n Provider](https://refine.dev/docs/core/providers/i18n-provider/) for more detailed information and step-by-step guide\\n\\n## Add Live Provider(Realtime) to Your Project with Refine\\n\\nrefine lets you add Realtime support to your app via liveProvider prop for `<Refine>`. It can be used to update and show data in Realtime throughout your app.\\n\\nNow let\'s make our application Realtime using the [refine Live Provider](https://refine.dev/docs/guides-and-concepts/real-time/)\\n\\nWe will using [Ably](https://ably.com/) in this article to provide Realtime features.\\n\\n### Installation\\n\\nWe need to install Ably live provider package from refine.\\n\\n```bash\\n npm install @pankod/refine-ably\\n```\\n\\nFirst, let\'s create ably-client and define our Ably API key.\\n\\n```tsx title=\\"src/utility/client.ts\\"\\nimport { Ably } from \\"@pankod/refine-ably\\";\\n\\nexport const ablyClient = new Ably.Realtime(\\"YOUR_ABLY_API_KEY\\");\\n```\\n\\nThen pass liveProvider from @pankod/refine-ably to `<Refine>`.\\n\\n```tsx title=\\"src/App.tsx\\"\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport { notificationProvider, Layout } from \\"@pankod/refine-antd\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\n//highlight-start\\nimport { liveProvider } from \\"@pankod/refine-ably\\";\\nimport { ablyClient } from \\"utility\\";\\n//highlight-end\\n\\nimport \\"@pankod/refine-antd/dist/styles.min.css\\";\\n\\nimport { PostList, PostCreate, PostEdit, PostShow } from \\"pages/posts\\";\\nimport { Header } from \\"./components/header\\";\\nimport { useTranslation } from \\"react-i18next\\";\\n\\nfunction App() {\\n    const { t, i18n } = useTranslation();\\n\\n    const i18nProvider = {\\n        translate: (key: string, params: object) => t(key, params),\\n        changeLocale: (lang: string) => i18n.changeLanguage(lang),\\n        getLocale: () => i18n.language,\\n    };\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            notificationProvider={notificationProvider}\\n            Layout={Layout}\\n            i18nProvider={i18nProvider}\\n            dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n            Header={Header}\\n            //highlight-start\\n            liveProvider={liveProvider(ablyClient)}\\n            liveMode=\\"auto\\"\\n            //highlight-end\\n            resources={[\\n                {\\n                    name: \\"posts\\",\\n                    list: PostList,\\n                    create: PostCreate,\\n                    edit: PostEdit,\\n                    show: PostShow,\\n                },\\n            ]}\\n        />\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nYou can configure `liveMode`, this example use \\"auto\\" mode.\\n\\nCheck out [Refine Live Provider](https://refine.dev/docs/guides-and-concepts/real-time/) for more detailed information and step-by-step guide.\\n\\nOur project is now Realtime! Thanks to **refine** Live Provider, we made our project Realtime by adding only 2 lines.\\n\\nLet\'s see how our RealTime Project works.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={realtime} alt=\\"Refine Live Provider\\" />\\n</div>\\n<br />\\n\\n## Add Access Control to Your Project with Refine\\n\\nYou can control your project as you wish with the **refine react admin framework**. Now let\'s add [Access Control Provider](https://refine.dev/docs/core/providers/accessControl-provider/) to our refine project.\\n\\nAccess control is a broad topic where there are lots of advanced solutions that provide different set of features. refine is deliberately agnostic for its own API to be able to integrate different methods (RBAC, ABAC, ACL, etc.) and different libraries (Casbin, CASL, Cerbos, AccessControl.js). can method would be the entry point for those solutions.\\n\\n[Refer to the Access Control Provider documentation for detailed information. \u2192](https://refine.dev/docs/core/providers/accessControl-provider/)\\n\\nLet\'s create two Roles, Admin and Editor. Admin have full CRUD authority on the posts. The Editor role, on the other hand, only has the authority to create and edit new posts. In other words, the person in the editor role cannot delete the posts and cannot view all the rows on the table.\\n\\nLet\'s start by creating two buttons for the `Admin` and `Editor` roles in our created Header Component.\\n\\n```tsx title=\\"/src/componets/header.tsx\\"\\nimport { useGetLocale, useSetLocale } from \\"@pankod/refine-core\\";\\nimport {\\n    AntdLayout,\\n    Space,\\n    Menu,\\n    Button,\\n    Icons,\\n    Dropdown,\\n    Radio,\\n} from \\"@pankod/refine-antd\\";\\nimport { useTranslation } from \\"react-i18next\\";\\n\\nconst { DownOutlined } = Icons;\\n\\n//highlight-start\\ninterface HeaderProps {\\n    role: string;\\n}\\n//highlight-end\\n\\nexport const Header: React.FC<HeaderProps> = ({ role }) => {\\n    const { i18n } = useTranslation();\\n    const locale = useGetLocale();\\n    const changeLanguage = useSetLocale();\\n\\n    const currentLocale = locale();\\n\\n    const menu = (\\n        <Menu selectedKeys={[currentLocale]}>\\n            {[...(i18n.languages || [])].sort().map((lang: string) => (\\n                <Menu.Item key={lang} onClick={() => changeLanguage(lang)}>\\n                    {lang === \\"en\\" ? \\"English\\" : \\"German\\"}\\n                </Menu.Item>\\n            ))}\\n        </Menu>\\n    );\\n\\n    return (\\n        <AntdLayout.Header\\n            style={{\\n                display: \\"flex\\",\\n                justifyContent: \\"space-between\\",\\n                alignItems: \\"center\\",\\n                padding: \\"0px 24px\\",\\n                height: \\"48px\\",\\n                backgroundColor: \\"#FFF\\",\\n            }}\\n        >\\n            //highlight-start\\n            <Radio.Group\\n                value={role}\\n                onChange={(event) => {\\n                    localStorage.setItem(\\"role\\", event.target.value);\\n                    location.reload();\\n                }}\\n            >\\n                <Radio.Button value=\\"admin\\">Admin</Radio.Button>\\n                <Radio.Button value=\\"editor\\">Editor</Radio.Button>\\n            </Radio.Group>\\n            //highlight-end\\n            <Dropdown overlay={menu}>\\n                <Button type=\\"link\\">\\n                    <Space>\\n                        {currentLocale === \\"en\\" ? \\"English\\" : \\"German\\"}\\n                        <DownOutlined />\\n                    </Space>\\n                </Button>\\n            </Dropdown>\\n        </AntdLayout.Header>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={access_button} alt=\\"Refine Access Control Provider\\" />\\n</div>\\n<br />\\n\\nIn this article, we will use [Cerbos](https://cerbos.dev/) to **refine** Access Control.\\n\\n```bash\\nnpm install cerbos\\n```\\n\\nAfter the installation is complete, let\'s create a Cerbos object in the App.tsx file and define it in `<Refine>`.\\n\\n```tsx\\nimport { Cerbos } from \\"cerbos\\";\\n\\nconst cerbos = new Cerbos({\\n    hostname: \\"https://demo-pdp.cerbos.cloud\\", // The Cerbos PDP instance\\n    playgroundInstance: \\"WS961950bd85QNYlAvTmJYubP0bqF7e3\\", // The playground instance ID to test\\n});\\n```\\n\\n```tsx\\n<Refine\\n    routerProvider={routerProvider}\\n    notificationProvider={notificationProvider}\\n    Layout={Layout}\\n    i18nProvider={i18nProvider}\\n    dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n    Header={() => <Header role={role} />}\\n    liveProvider={liveProvider(ablyClient)}\\n    liveMode=\\"auto\\"\\n    //highlight-start\\n    accessControlProvider={{\\n        can: async ({ action, params, resource }) => {\\n            const cerbosPayload = {\\n                principal: {\\n                    id: \\"demoUser\\", // Fake a user ID\\n                    roles: [role],\\n                    attr: {},\\n                },\\n                resource: {\\n                    kind: resource,\\n                    instances: {\\n                        [params?.id || \\"new\\"]: {\\n                            attr: params,\\n                        },\\n                    },\\n                },\\n                actions: [action],\\n            };\\n            const result = await cerbos.check(cerbosPayload);\\n            return Promise.resolve({\\n                can: result.isAuthorized(params?.id || \\"new\\", action),\\n            });\\n        },\\n    }}\\n    //highlight-end\\n    resources={[\\n        {\\n            name: \\"posts\\",\\n            list: PostList,\\n            create: PostCreate,\\n            edit: PostEdit,\\n            show: PostShow,\\n            canDelete: true,\\n        },\\n    ]}\\n/>\\n```\\n\\nWe will perform our actions according to the role we choose from the header. As you can see above, we set this with the `access Control Provider` `can` method.\\n\\nNow using the **refine** [`useCan`](https://refine.dev/docs/core/hooks/accessControl/useCan/)hook Let\'s perform operations according to roles within our list.\\n\\n```tsx title=\\"src/pages/PostList.tsx\\"\\nimport {\\n    IResourceComponentsProps,\\n    useMany,\\n    useTranslate,\\n    //highligt-next-line\\n    useCan,\\n} from \\"@pankod/refine-core\\";\\n\\nimport {\\n    List,\\n    Table,\\n    TextField,\\n    useTable,\\n    Space,\\n    EditButton,\\n    ShowButton,\\n    FilterDropdown,\\n    useSelect,\\n    Select,\\n    Radio,\\n    TagField,\\n    NumberField,\\n} from \\"@pankod/refine-antd\\";\\n\\nimport { IPost, ICategory } from \\"interfaces\\";\\n\\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\\n    const translate = useTranslate();\\n    const { tableProps } = useTable<IPost>();\\n\\n    const categoryIds =\\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\\n    const { data, isLoading } = useMany<ICategory>({\\n        resource: \\"categories\\",\\n        ids: categoryIds,\\n        queryOptions: {\\n            enabled: categoryIds.length > 0,\\n        },\\n    });\\n\\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\\n        resource: \\"categories\\",\\n        optionLabel: \\"title\\",\\n        optionValue: \\"id\\",\\n    });\\n\\n    //highlight-start\\n    const { data: canAccess } = useCan({\\n        resource: \\"posts\\",\\n        action: \\"field\\",\\n        params: { field: \\"hit\\" },\\n    });\\n    //highlight-end\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column\\n                    dataIndex=\\"title\\"\\n                    title={translate(\\"posts.fields.title\\")}\\n                />\\n                <Table.Column\\n                    dataIndex={[\\"category\\", \\"id\\"]}\\n                    title={translate(\\"posts.fields.category\\")}\\n                    render={(value) => {\\n                        if (isLoading) {\\n                            return <TextField value=\\"Loading...\\" />;\\n                        }\\n\\n                        return (\\n                            <TextField\\n                                value={\\n                                    data?.data.find((item) => item.id === value)\\n                                        ?.title\\n                                }\\n                            />\\n                        );\\n                    }}\\n                    filterDropdown={(props) => (\\n                        <FilterDropdown {...props}>\\n                            <Select\\n                                style={{ minWidth: 200 }}\\n                                mode=\\"multiple\\"\\n                                placeholder=\\"Select Category\\"\\n                                {...categorySelectProps}\\n                            />\\n                        </FilterDropdown>\\n                    )}\\n                />\\n                //highlight-start\\n                {canAccess?.can && (\\n                    <Table.Column\\n                        dataIndex=\\"hit\\"\\n                        title=\\"Hit\\"\\n                        render={(value: number) => (\\n                            <NumberField\\n                                value={value}\\n                                options={{\\n                                    notation: \\"compact\\",\\n                                }}\\n                            />\\n                        )}\\n                    />\\n                )}\\n                //highlight-end\\n                <Table.Column\\n                    dataIndex=\\"status\\"\\n                    title=\\"Status\\"\\n                    render={(value: string) => <TagField value={value} />}\\n                    filterDropdown={(props: any) => (\\n                        <FilterDropdown {...props}>\\n                            <Radio.Group>\\n                                <Radio value=\\"published\\">Published</Radio>\\n                                <Radio value=\\"draft\\">Draft</Radio>\\n                                <Radio value=\\"rejected\\">Rejected</Radio>\\n                            </Radio.Group>\\n                        </FilterDropdown>\\n                    )}\\n                />\\n                <Table.Column<IPost>\\n                    title={translate(\\"table.actions\\")}\\n                    dataIndex=\\"actions\\"\\n                    render={(_, record) => (\\n                        <Space>\\n                            <EditButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <ShowButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nHere, if the selected role is Admin, the \'Hit\' section will appear in our Table. We have stated that the Editor role cannot display this section.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={access_control} alt=\\"Refine Access Control Provider\\" />\\n</div>\\n<br />\\n\\nCheck out [**refine** Access Control](https://refine.dev/docs/guides-and-concepts/access-control/) Provider for more detailed information and step-by-step guide\\n\\n## Conclusion\\n\\nIn this tutorial, we have shown that the features of the **refine** internal tool Framework are useful and how simple it is. These features will shorten your development time considerably. While Refine offers you the opportunity to develop quickly, it does not limit you and gives you the opportunity to customize your project as you wish.\\n\\nWe saw how simple it was for refine to include and use the Internationalization (i18n), Live Provider(Realtime) and Access Control features. You can develop more complex applications in a simple way with **refine**.\\n\\nWith **refine** react admin, you can develop any web application you want with `Admin Panel`, Basic `Crud App` or Next.js-SSR Support.\\n\\n**refine** offers the opportunity to develop `B2B` and `B2C` applications without any restrictions and in a fully customizable manner."},{"id":"best-react-frameworks","metadata":{"permalink":"/blog/best-react-frameworks","source":"@site/blog/2022-02-21-top-react-frameworks.md","title":"Top React JS Frameworks Every Developer Should Know","description":"We will compare the features of refine and react-admin","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react","permalink":"/blog/tags/react"},{"label":"framework","permalink":"/blog/tags/framework"},{"label":"webdev","permalink":"/blog/tags/webdev"},{"label":"create-react-app","permalink":"/blog/tags/create-react-app"},{"label":"ant-design","permalink":"/blog/tags/ant-design"},{"label":"material-ui","permalink":"/blog/tags/material-ui"},{"label":"react-bootstrap","permalink":"/blog/tags/react-bootstrap"}],"readingTime":4.25,"truncated":true,"authors":[{"name":"Ayd\u0131n Akyol","title":"Software Developer","url":"https://github.com/biskuvit","imageURL":"https://github.com/biskuvit.png","key":"aydin"}],"prevItem":{"title":"Create Full Featured Admin Panel with React and Ant Design","permalink":"/blog/refine-react-ant-design-admin-panel-framework"},"nextItem":{"title":"Next.js E-commerce App with Strapi and Chakra UI","permalink":"/blog/handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui"}},"content":"import antd from \'@site/static/img/blog/2022-02-21-top-react-frameworks/antd.png\';\\nimport cra from \'@site/static/img/blog/2022-02-21-top-react-frameworks/create-react-app.png\';\\nimport mui from \'@site/static/img/blog/2022-02-21-top-react-frameworks/material-ui.png\';\\nimport reactBootstrap from \'@site/static/img/blog/2022-02-21-top-react-frameworks/react-bootstrap.png\';\\nimport refineAdmin from \'@site/static/img/blog/2022-02-21-top-react-frameworks/refine.png\';\\nimport refine from \'@site/static/img/blog/2022-02-21-top-react-frameworks/refine-2.png\';\\n\\n##     Best UI Frameworks for React.js\\n\\n\\nIn this post, I have listed some of the best React frameworks that are most popular and that I believe will be popular in 2022.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is React?\\n\\nReact is a JavaScript library that was developed by Facebook. It is one of the most popular libraries for building user interfaces.\\nReact has a number of features that make it an attractive option for developers to use when building their next front-end project. React is very easy to learn and can be used in any type of project. It also has a large community, which means you will always find help when you need it.\\n\\nReact has a number of frameworks that are competing to be the best framework in 2022. It is not easy to create a React project from scratch, but with the help of some libraries and frameworks, it can be done in no time.\\n\\nTable of Contents\\n\\n1. [Create React App](#cra)\\n2. [Material-UI](#mui)\\n3. [Ant Design](#antd)\\n4. [React Bootstrap](#react-bootstrap)\\n5. [Refine](#refine)\\n\\n\\n### 1. Create React App <a name=\\"cra\\"></a>\\n\\n[Create React App](https://create-react-app.dev/docs/getting-started) is a comfortable environment for learning React, and is the best way to start building a new single-page application in React.\\n\\nYou don\'t need to learn and configure many build tools. Instant reloads help you focus on development. When it\'s time to deploy, your bundles are optimized automatically.\\n\\n**Get started in seconds**\\nWhether you\u2019re using React or another library, Create React App lets you focus on code, not build tools.\\n\\nTo create a project called my-app, run this command:\\n\\n```\\nnpx create-react-app my-app\\ncd my-app\\nnpm start\\n```\\n**Example**\\n\\n<img src={cra} alt=\\"create-react-app\\" />\\n\\n\\n### 2. Material UI <a name=\\"mui\\"></a>\\n\\nFirst up, [Material UI](https://mui.com/getting-started/installation/) is an excellent React UI framework with multiple pre-built components and templates. Material UI is a great framework for building UI components. It has a large community of developers and is very popular.\\n\\nMUI provides a robust, customizable, and accessible library of foundational and advanced components, enabling you to build your design system and develop React applications faster.\\n\\n```\\n// with npm\\nnpm install @mui/material @emotion/react @emotion/styled\\n\\n// with yarn\\nyarn add @mui/material @emotion/react @emotion/styled\\n```\\n**Example**\\n\\n[Link](https://mui.com/getting-started/templates/dashboard/)\\n\\n<img src={mui} alt=\\"material-ui\\" />\\n\\n\\n\\n### 3. Ant Design <a name=\\"antd\\"></a>\\n\\nLooking for a React admin panel framework that is both attractive and easy to use? Look no further than React [Ant Design](https://ant.design/docs/react/introduce). This library provides everything you need to get started quickly, including components, layout templates, and powerful routing capabilities. Best of all, it conforms to the popular Ant Design style guide, so your app will look great whether it\'s running on a desktop or mobile device.\\n\\n```\\n// with npm\\nnpm install antd\\n\\n// with yarn\\nyarn add antd\\n```\\n\\n**Example** \\n\\n[Link](https://preview.pro.ant.design/dashboard/analysis/)\\n\\n<img src={antd} alt=\\"antd\\" />\\n\\n\\n### 4. React Bootstrap <a name=\\"react-bootstrap\\"></a>\\n\\nThis [UI Kit](https://react-bootstrap.github.io/getting-started/introduction) library provides a React alternative to Bootstrap, giving you more control over the function of each component. With this framework, it\'s easy for developers who want an online presence without having too much work with coding or design skills! You can find thousands of themes made using these components as well so there will be something in here perfect just what your needs are at any given time.\\n\\n```\\nnpm install react-bootstrap bootstrap@5.1.3\\n\\n```\\n**Example**\\n\\n[Link](https://demos.creative-tim.com/light-bootstrap-dashboard-react/#/admin/dashboard)\\n\\n<img src={reactBootstrap} alt=\\"react-bootstrap\\" />\\n\\n\\n### 5. refine <a name=\\"refine\\"></a>\\n\\nIf you\'re looking for a framework that will let your data- intensive application run at top speeds with extreme customizability, then look no further than refine. This React based headless system has been designed specifically for speed - allowing users to bring their own UI and update it via [refine\'s](https://refine.dev/docs/getting-started/overview/) powerful interface!\\n\\n**Key features**\\n\\n\u200b\\n\ud83d\udd25 **Headless** : Works with any UI framework\\n\\n\u2699\ufe0f **Zero-configuration** : One-line setup with [superplate](https://github.com/pankod/superplate). It takes less than a minute to start a project.\\n\\n\ud83d\udce6 **Out-of-the-box** : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c **Backend Agnostic** : Connects to any custom backend. Built-in support for [REST API](https://github.com/pankod/refine/tree/master/packages/simple-rest), [GraphQL](https://github.com/pankod/refine/tree/master/packages/graphql), [NestJs CRUD](https://github.com/pankod/refine/tree/master/packages/nestjsx-crud), [Airtable](https://github.com/pankod/refine/tree/master/packages/airtable), [Strapi](https://github.com/pankod/refine/tree/master/packages/strapi), [Strapi v4](https://github.com/pankod/refine/tree/master/packages/strapi-v4), [Strapi GraphQL](https://github.com/pankod/refine/tree/master/packages/strapi-graphql), [Supabase](https://github.com/pankod/refine/tree/master/packages/supabase), [Hasura](https://github.com/pankod/refine/tree/master/packages/hasura), [Nhost](https://github.com/pankod/refine/tree/master/packages/nhost), [Appwrite](https://github.com/pankod/refine/tree/master/packages/appwrite), [Firebase](https://firebase.google.com/), [Directus](https://directus.io/) and [Altogic](https://github.com/pankod/refine/tree/master/packages/altogic).\\n\\n\ud83d\udcdd **Native Typescript Core** : You can always opt out for plain JavaScript.\\n\\n\ud83d\udc1c **Enterprise UI** : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd **Boilerplate-free Code** : Keeps your codebase clean and readable.\\n\\nThere are two ways to add UI elements to refine;\\n\\n1. Using a UI Library such as Tailwind, Chakra UI, etc.\\n2. Using a complete UI Framework such as Ant Design, Material UI, etc.\\n\\nThe recommended way is using the [superplate](https://github.com/pankod/superplate) tool. superplate\'s CLI wizard will let you create and customize your application in seconds. You can find tutorial from [here](https://refine.dev/docs/core/tutorial/)\\n\\n```\\nnpx superplate-cli -p refine-react tutorial\\n```\\n**Examples**\\n\\n[Link](https://example.admin.refine.dev/?current=1&pageSize=5)\\n\\n\\n<img src={refineAdmin} alt=\\"refine-admin\\" />\\n\\n\\n[Link](https://example.refine.dev)\\n\\n\\n<img src={refine} alt=\\"refine\\" />\\n\\n\\n\\nIf you enjoyed this article, please hit that little heart button and share with others!\\nThis will help us grow our community so we can all learn more together."},{"id":"handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui","metadata":{"permalink":"/blog/handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui","source":"@site/blog/2022-02-14-refine-ecommerce-blog.md","title":"Next.js E-commerce App with Strapi and Chakra UI","description":"Learn the power of Refine for e-commerce with this quick & easy example. This step-by-step Refine SPA tutorial will get you started in no time.","date":"2022-02-14T00:00:00.000Z","formattedDate":"February 14, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"e-commerce","permalink":"/blog/tags/e-commerce"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"chakra-ui","permalink":"/blog/tags/chakra-ui"},{"label":"next.js","permalink":"/blog/tags/next-js"}],"readingTime":11.005,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Top React JS Frameworks Every Developer Should Know","permalink":"/blog/best-react-frameworks"},"nextItem":{"title":"Implementing Dark Mode In Ant Design Using gulp","permalink":"/blog/how-to-add-darkmode-in-ant-design"}},"content":"import products from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/products.png\';\\nimport pagination from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/pagination.gif\';\\nimport layout from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/layout.png\';\\nimport sample_product from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/sample_product.png\';\\nimport basket from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/basket.gif\';\\nimport page_size from \'@site/static/img/blog/2022-02-14-refine-ecommerce-blog/page_size.gif\';\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={basket} alt=\\"basket\\" />\\n</div>\\n<br />\\n\\nIn this article, we will create the e-commerce client of our [Strapi-Multitenancy](/docs/guides-and-concepts/multi-tenancy/strapi-v4) admin panel that we have done before.\\n\\nIt is now used **headless** with the **refine** 3 version. You can use any UI library you want with the **headless** feature.\\n\\nWe will use [Strapi](https://strapi.io/) and [Chakra-UI](https://chakra-ui.com/) together with [**Next.js**](/docs/guides-and-concepts/ssr-nextjs/) in our E-commerce client example application.\\n\\n\x3c!--truncate--\x3e\\n\\n## Refine Project Setup\\n\\nLet\'s start by creating our **refine** project. You can use the [superplate](https://github.com/pankod/superplate) to create a refine project.\\n\\n```bash\\nnpx superplate-cli -p refine-nextjs refine-ecommerce-example\\n```\\n\\n```bash\\n\u2714 What will be the name of your app \xb7 refine-ecommerce-example\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to using UI Framework? > No(headless)\\n\u2714 Data Provider: Strapi\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nsuperplate will quickly create our **refine** project according to the features we choose. Let\'s continue by install the [**refine** Strapi-v4 Data Provider](/docs/guides-and-concepts/data-provider/strapi-v4/) and Chakra-UI packages that we will use later.\\n\\n## Installation\\n\\n```bash\\ncd refine-ecommerce-example\\n\\nnpm i @pankod/refine-strapi-v4 @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^6\\n```\\n\\nOur **refine** project and installations are now ready! Let\'s start using it.\\n\\n## Usage\\n\\n### Configure Refine for Strapi-v4\\n\\n```tsx title=\\"pages/_app.tsx\\"\\nimport React from \\"react\\";\\nimport { AppProps } from \\"next/app\\";\\nimport Head from \\"next/head\\";\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n//highlight-next-line\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    //highlight-next-line\\n    const dataProvider = DataProvider(API_URL);\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            //highlight-next-line\\n            dataProvider={dataProvider}\\n        >\\n            <Component {...pageProps} />\\n        </Refine>\\n    );\\n}\\n```\\n\\n### Chakra-UI Provider Setup\\n\\n```tsx title=\\"pages/_app.tsx\\"\\nimport React from \\"react\\";\\nimport { AppProps } from \\"next/app\\";\\nimport Head from \\"next/head\\";\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\n//highlight-next-line\\nimport { ChakraProvider } from \\"@chakra-ui/react\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    const dataProvider = DataProvider(API_URL);\\n\\n    return (\\n        <Refine routerProvider={routerProvider} dataProvider={dataProvider}>\\n            //highlight-start\\n            <ChakraProvider>\\n                <Component {...pageProps} />\\n            </ChakraProvider>\\n            //highlight-end\\n        </Refine>\\n    );\\n}\\n```\\n\\n## Create Strapi Collections\\n\\nWe created three collections on Strapi as `store`, `product` and `order` and added a relation between them. For detailed information on how to create a collection, you can check [here](https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html).\\n\\nWe created our collections in the previous Strapi Multitenancy guide. Now we will use the same collections.\\n\\n[Refer to the Project Collections for detailed information. \u2192](https://refine.dev/docs/guides-and-concepts/multi-tenancy/strapi-v4/#create-collections)\\n\\n## Create Refine Layout\\n\\n**refine** **headless** is not affiliated with any UI. It is entirely up to you to customize your UI. Let\'s create a simple layout for this example.\\n\\nThe Layout we\'ve created now will only show the **refine** logo. In the following steps, we will edit our Layout.\\n\\n```tsx title=\\"components/Layout.tsx\\"\\nimport { Box, Container, Flex, Image } from \\"@chakra-ui/react\\";\\n\\nexport const Layout: React.FC = ({ children }) => {\\n    return (\\n        <Box\\n            display={\\"flex\\"}\\n            flexDirection={\\"column\\"}\\n            backgroundColor={\\"#eeeeee\\"}\\n            minH={\\"100vh\\"}\\n        >\\n            <Container maxW={\\"container.lg\\"}>\\n                <Flex justify={\\"space-between\\"} mt={4} alignSelf={\\"center\\"}>\\n                    <a href=\\"https://refine.dev\\">\\n                        <Image alt=\\"Refine Logo\\" src={\\"./refine_logo.png\\"} />\\n                    </a>\\n                </Flex>\\n                {children}\\n            </Container>\\n        </Box>\\n    );\\n};\\n```\\n\\n```tsx title=\\"pages/_app.tsx\\"\\nimport React from \\"react\\";\\nimport { AppProps } from \\"next/app\\";\\nimport Head from \\"next/head\\";\\nimport { Refine } from \\"@pankod/refine-core\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { ChakraProvider } from \\"@chakra-ui/react\\";\\n//highlight-next-line\\nimport { Layout } from \\"src/components\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    const dataProvider = DataProvider(API_URL);\\n\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider}\\n            //highlight-next-line\\n            Layout={Layout}\\n        >\\n            <ChakraProvider>\\n                <Component {...pageProps} />\\n            </ChakraProvider>\\n        </Refine>\\n    );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={layout} alt=\\"layout\\" />\\n</div>\\n<br />\\n\\n## Product Card Design with Chakra-UI\\n\\nLet\'s design our product cards with Chakra-UI.\\n\\n```tsx title=\\"src/components/ProductCard.tsx\\"\\nimport React from \\"react\\";\\n//highlight-next-line\\nimport { Box, Image, Badge, Button } from \\"@chakra-ui/react\\";\\n\\nexport type ProductProps = {\\n    id: string;\\n    title: string;\\n    description: string;\\n    cardImage: string;\\n};\\n\\nexport const ProductCard: React.FC<ProductProps> = ({\\n    id,\\n    title,\\n    description,\\n    cardImage,\\n}) => {\\n    return (\\n        <Box maxH={\\"sm\\"} borderWidth=\\"1px\\" borderRadius=\\"lg\\" overflow=\\"hidden\\">\\n            <Image w={\\"100%\\"} h={200} src={cardImage} />\\n            <Box p=\\"6\\" bgColor={\\"gray.600\\"}>\\n                <Box display=\\"flex\\" alignItems=\\"baseline\\" mb={2} ml={-2}>\\n                    <Badge borderRadius=\\"full\\" px=\\"2\\" colorScheme=\\"teal\\">\\n                        New Product\\n                    </Badge>\\n                </Box>\\n\\n                <Box\\n                    mt=\\"1\\"\\n                    fontWeight=\\"semibold\\"\\n                    as=\\"h4\\"\\n                    lineHeight=\\"tight\\"\\n                    isTruncated\\n                    color={\\"white\\"}\\n                >\\n                    {title}\\n                </Box>\\n\\n                <Box color={\\"white\\"}>{}</Box>\\n                <Box\\n                    color=\\"white\\"\\n                    fontSize=\\"sm\\"\\n                    display={\\"flex\\"}\\n                    mt={4}\\n                    justifyContent={\\"flex-end\\"}\\n                ></Box>\\n            </Box>\\n        </Box>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={sample_product} alt=\\"sample_product\\" />\\n</div>\\n<br />\\n\\nWe created our Product Card component. Now let\'s move on to the process of fetch and showing our products from the Strapi.\\n\\n## Fetch Products with SSR\\n\\nFirst, let\'s fetch our products with the nextjs `getServerSideProps` function.\\n\\n### `GetServerSideProps`\\n\\n```tsx title=\\"pages/index.tsx\\"\\n//highlight-next-line\\nimport { GetServerSideProps } from \\"next\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { IProduct } from \\"interfaces\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\n//highlight-start\\nexport const getServerSideProps: GetServerSideProps = async (context) => {\\n    const data = await DataProvider(API_URL).getList<IProduct>({\\n        resource: \\"products\\",\\n        metaData: { populate: [\\"image\\"] },\\n    });\\n\\n    return {\\n        props: { products: data },\\n    };\\n};\\n//highlight-end\\n```\\n\\n### Create Product List with Refine\\n\\nLet\'s process the data we fetch above using **refine**\'s `useTable` hook. Then let\'s put our data in our ProductCard component.\\n\\n```tsx title=\\"pages/index.tsx\\"\\nimport { GetServerSideProps } from \\"next\\";\\n//highlight-next-line\\nimport { LayoutWrapper, GetListResponse, useTable } from \\"@pankod/refine-core\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { IProduct } from \\"interfaces\\";\\nimport { SimpleGrid } from \\"@chakra-ui/react\\";\\nimport { ProductCard } from \\"src/components\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\n//highlight-start\\ntype ItemProps = {\\n    products: GetListResponse<IProduct>;\\n};\\n//highlight-end\\n\\nexport const ProductList: React.FC<ItemProps> = ({ products }) => {\\n    //highlight-start\\n    const { tableQueryResult } = useTable<IProduct>({\\n        resource: \\"products\\",\\n        queryOptions: {\\n            initialData: products,\\n        },\\n        metaData: { populate: [\\"image\\"] },\\n    });\\n    //highlight-end\\n\\n    return (\\n        //highlight-start\\n        <LayoutWrapper>\\n            <SimpleGrid columns={[1, 2, 3]} mt={6} spacing={3}>\\n                {tableQueryResult.data?.data.map((item) => (\\n                    <ProductCard\\n                        id={item.id}\\n                        title={item.title}\\n                        description={item.description}\\n                        cardImage={\\n                            item.image\\n                                ? API_URL + item.image.url\\n                                : \\"./error.png\\"\\n                        }\\n                    />\\n                ))}\\n            </SimpleGrid>\\n        </LayoutWrapper>\\n        //highlight-end\\n    );\\n};\\n\\nexport default ProductList;\\n\\nexport const getServerSideProps: GetServerSideProps = async (context) => {\\n    const data = await DataProvider(API_URL).getList<IProduct>({\\n        resource: \\"products\\",\\n        metaData: { populate: [\\"image\\"] },\\n    });\\n\\n    return {\\n        props: { products: data },\\n    };\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={products} alt=\\"products\\" />\\n</div>\\n<br />\\n\\n## Adding Store-based Filtering\\n\\nWe have fetch all the products above. Now, let\'s fetch the stores and list the store-specific products separately.\\n\\nFirst, let\'s fetch our stores by using the **refine** `useMany` hook within the `getServerSideProps` function. Next we will create buttons for the stores. When these buttons are clicked, a store is selected, we will do a filtering with `useTable` `setFilters` and list the products specific to that store.\\n\\n```tsx title=\\"pages/index.tsx\\"\\nexport const getServerSideProps: GetServerSideProps = async (context) => {\\n    const data = await DataProvider(API_URL).getList<IProduct>({\\n        resource: \\"products\\",\\n        metaData: { populate: [\\"image\\"] },\\n        pagination: { current: 1, pageSize: 9 },\\n    });\\n\\n    //highlight-start\\n    const { data: storesData } = await DataProvider(API_URL).getMany({\\n        resource: \\"stores\\",\\n        ids: [\\"1\\", \\"2\\", \\"3\\"],\\n    });\\n    //highlight-end\\n\\n    return {\\n        props: {\\n            products: data,\\n            //highlight-next-line\\n            stores: storesData,\\n        },\\n    };\\n};\\n```\\n\\n```tsx title=\\"pages/index.tsx\\"\\nimport { GetServerSideProps } from \\"next\\";\\nimport { LayoutWrapper, GetListResponse, useTable } from \\"@pankod/refine-core\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { IProduct, IStore } from \\"interfaces\\";\\nimport { Button, SimpleGrid, Flex, Text } from \\"@chakra-ui/react\\";\\nimport { ProductCard, FilterButton } from \\"src/components\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\ntype ItemProps = {\\n    products: GetListResponse<IProduct>;\\n    //highlight-next-line\\n    stores: IStore[];\\n};\\n\\nexport const ProductList: React.FC<ItemProps> = ({ products, stores }) => {\\n    const { tableQueryResult, setFilters } = useTable<IProduct>({\\n        resource: \\"products\\",\\n        queryOptions: {\\n            initialData: products,\\n        },\\n        metaData: { populate: [\\"image\\"] },\\n    });\\n\\n    return (\\n        <LayoutWrapper>\\n            //highlight-start\\n            <Flex mt={6} gap={2}>\\n                <FilterButton\\n                    setFilters={() =>\\n                        setFilters([\\n                            {\\n                                field: \\"stores][id]\\",\\n                                operator: \\"eq\\",\\n                                value: undefined,\\n                            },\\n                        ])\\n                    }\\n                >\\n                    <Text fontSize={{ base: \\"12px\\", md: \\"14px\\", lg: \\"14px\\" }}>\\n                        All Products\\n                    </Text>\\n                </FilterButton>\\n                {stores?.map((item) => {\\n                    return (\\n                        <FilterButton\\n                            setFilters={() =>\\n                                setFilters([\\n                                    {\\n                                        field: \\"stores][id]\\",\\n                                        operator: \\"eq\\",\\n                                        value: item.id,\\n                                    },\\n                                ])\\n                            }\\n                        >\\n                            <Text\\n                                fontSize={{\\n                                    base: \\"12px\\",\\n                                    md: \\"14px\\",\\n                                    lg: \\"14px\\",\\n                                }}\\n                            >\\n                                {item.title}\\n                            </Text>\\n                        </FilterButton>\\n                    );\\n                })}\\n            </Flex>\\n            //highlight-end\\n            <SimpleGrid columns={[1, 2, 3]} mt={6} spacing={3}>\\n                {tableQueryResult.data?.data.map((item) => (\\n                    <ProductCard\\n                        id={item.id}\\n                        title={item.title}\\n                        description={item.description}\\n                        cardImage={\\n                            item.image\\n                                ? API_URL + item.image.url\\n                                : \\"./error.png\\"\\n                        }\\n                    />\\n                ))}\\n            </SimpleGrid>\\n        </LayoutWrapper>\\n    );\\n};\\n\\nexport default ProductList;\\n\\nexport const getServerSideProps: GetServerSideProps = async (context) => {\\n    const data = await DataProvider(API_URL).getList<IProduct>({\\n        resource: \\"products\\",\\n        metaData: { populate: [\\"image\\"] },\\n        pagination: { current: 1, pageSize: 9 },\\n    });\\n\\n    const { data: storesData } = await DataProvider(API_URL).getMany({\\n        resource: \\"stores\\",\\n        ids: [\\"1\\", \\"2\\", \\"3\\"],\\n    });\\n\\n    return {\\n        props: {\\n            products: data,\\n            stores: storesData,\\n        },\\n    };\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={pagination} alt=\\"pagination\\" />\\n</div>\\n<br />\\n\\n## Adding Pagination\\n\\nWe list all products on our `All Products` page. Let\'s add pagination to this page and divide the products into pages. We will perform pagination using the `pageSize`, `current` and setCurrent properties from the useTable hook.\\n\\n[Refer to the useTable documentation for detailed information. \u2192](https://refine.dev/docs/core/hooks/useTable/#pagination)\\n\\n```tsx title=\\"pages/index.tsx\\"\\nimport { GetServerSideProps } from \\"next\\";\\nimport { LayoutWrapper, GetListResponse, useTable } from \\"@pankod/refine-core\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi-v4\\";\\n\\nimport { IProduct, IStore } from \\"interfaces\\";\\nimport { Button, SimpleGrid, Flex, Text } from \\"@chakra-ui/react\\";\\nimport { ProductCard, FilterButton } from \\"src/components\\";\\n\\nconst API_URL = \\"https://api.strapi-multi-tenant.refine.dev/api\\";\\n\\ntype ItemProps = {\\n    products: GetListResponse<IProduct>;\\n    stores: IStore[];\\n};\\n\\nexport const ProductList: React.FC<ItemProps> = ({ products, stores }) => {\\n    //highlight-start\\n    const { tableQueryResult, setFilters, current, setCurrent, pageSize } =\\n        useTable<IProduct>({\\n            resource: \\"products\\",\\n            queryOptions: {\\n                initialData: products,\\n            },\\n            initialPageSize: 9,\\n            metaData: { populate: [\\"image\\"] },\\n        });\\n    //highlight-end\\n\\n    //highlight-next-line\\n    const totalPageCount = Math.ceil(tableQueryResult.data?.total!! / pageSize);\\n\\n    return (\\n        <LayoutWrapper>\\n            <Flex mt={6} gap={2}>\\n                <FilterButton\\n                    setFilters={() =>\\n                        setFilters([\\n                            {\\n                                field: \\"stores][id]\\",\\n                                operator: \\"eq\\",\\n                                value: undefined,\\n                            },\\n                        ])\\n                    }\\n                >\\n                    <Text fontSize={{ base: \\"12px\\", md: \\"14px\\", lg: \\"14px\\" }}>\\n                        All Products\\n                    </Text>\\n                </FilterButton>\\n                {stores?.map((item) => {\\n                    return (\\n                        <FilterButton\\n                            setFilters={() =>\\n                                setFilters([\\n                                    {\\n                                        field: \\"stores][id]\\",\\n                                        operator: \\"eq\\",\\n                                        value: item.id,\\n                                    },\\n                                ])\\n                            }\\n                        >\\n                            <Text\\n                                fontSize={{\\n                                    base: \\"12px\\",\\n                                    md: \\"14px\\",\\n                                    lg: \\"14px\\",\\n                                }}\\n                            >\\n                                {item.title}\\n                            </Text>\\n                        </FilterButton>\\n                    );\\n                })}\\n            </Flex>\\n            <SimpleGrid columns={[1, 2, 3]} mt={6} spacing={3}>\\n                {tableQueryResult.data?.data.map((item) => (\\n                    <ProductCard\\n                        id={item.id}\\n                        title={item.title}\\n                        description={item.description}\\n                        cardImage={\\n                            item.image\\n                                ? API_URL + item.image.url\\n                                : \\"./error.png\\"\\n                        }\\n                    />\\n                ))}\\n            </SimpleGrid>\\n            //highlight-start\\n            <Flex justify={\\"flex-end\\"} mt={4} mb={4} gap={2}>\\n                {Array.from(Array(totalPageCount), (e, i) => {\\n                    if (current > totalPageCount) {\\n                        setCurrent(i);\\n                    }\\n                    return (\\n                        <Button\\n                            colorScheme={\\"teal\\"}\\n                            onClick={() => setCurrent(i + 1)}\\n                        >\\n                            {\\"Page: \\" + (i + 1)}\\n                        </Button>\\n                    );\\n                })}\\n            </Flex>\\n            //highlight-end\\n        </LayoutWrapper>\\n    );\\n};\\n\\nexport default ProductList;\\n\\nexport const getServerSideProps: GetServerSideProps = async (context) => {\\n    const data = await DataProvider(API_URL).getList<IProduct>({\\n        resource: \\"products\\",\\n        metaData: { populate: [\\"image\\"] },\\n        pagination: { current: 1, pageSize: 9 },\\n    });\\n\\n    const { data: storesData } = await DataProvider(API_URL).getMany({\\n        resource: \\"stores\\",\\n        ids: [\\"1\\", \\"2\\", \\"3\\"],\\n    });\\n\\n    return {\\n        props: { products: data, stores: storesData },\\n    };\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={page_size} alt=\\"page_size\\" />\\n</div>\\n<br />\\n\\n## Adding Basket and Payment features with Snipcart\\n\\nOne of the steps that should be in an E-commerce application is the cart and payment transactions. In our example, we will use [Snipcart](https://snipcart.com/) for this process.\\n\\n[Refer to the Snipcart documentation for detailed information. \u2192](https://docs.snipcart.com/v3/)\\n\\n### Installation Snipcart Widget\\n\\n```tsx title=\\"pages/_app.tsx\\"\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    const dataProvider = DataProvider(API_URL);\\n\\n    return (\\n        <>\\n            //highlight-start\\n            <Head>\\n                <link rel=\\"preconnect\\" href=\\"https://app.snipcart.com\\" />\\n                <link\\n                    rel=\\"stylesheet\\"\\n                    href=\\"https://cdn.snipcart.com/themes/v3.0.16/default/snipcart.css\\"\\n                />\\n                <script\\n                    async\\n                    src=\\"https://cdn.snipcart.com/themes/v3.0.16/default/snipcart.js\\"\\n                />\\n            </Head>\\n            //highlight-end\\n            <Refine\\n                routerProvider={routerProvider}\\n                dataProvider={dataProvider}\\n                resources={[{ name: \\"products\\" }]}\\n                Layout={Layout}\\n            >\\n                <ChakraProvider>\\n                    <Component {...pageProps} />\\n                </ChakraProvider>\\n            </Refine>\\n            //highlight-start\\n            <div hidden id=\\"snipcart\\" data-api-key=\\"YOUR_SNIPCART_TEST_KEY\\" />\\n            //highlight-end\\n        </>\\n    );\\n}\\n```\\n\\n### Adding \\"Add to Basket\\" Button on ProductCard component\\n\\n```tsx title=\\"src/components/ProductCard.tsx\\"\\nimport React from \\"react\\";\\nimport { Box, Image, Badge, Button } from \\"@chakra-ui/react\\";\\n\\nexport type ProductProps = {\\n    id: string;\\n    title: string;\\n    description: string;\\n    cardImage: string;\\n};\\n\\nexport const ProductCard: React.FC<ProductProps> = ({\\n    id,\\n    title,\\n    description,\\n    cardImage,\\n}) => {\\n    return (\\n        <Box\\n            maxH={\\"sm\\"}\\n            maxW=\\"sm\\"\\n            borderWidth=\\"1px\\"\\n            borderRadius=\\"lg\\"\\n            overflow=\\"hidden\\"\\n        >\\n            <Image w={\\"100%\\"} h={200} src={cardImage} />\\n            <Box p=\\"6\\" bgColor={\\"gray.600\\"}>\\n                <Box display=\\"flex\\" alignItems=\\"baseline\\" mb={2} ml={-2}>\\n                    <Badge borderRadius=\\"full\\" px=\\"2\\" colorScheme=\\"teal\\">\\n                        New Product\\n                    </Badge>\\n                </Box>\\n\\n                <Box\\n                    mt=\\"1\\"\\n                    fontWeight=\\"semibold\\"\\n                    as=\\"h4\\"\\n                    lineHeight=\\"tight\\"\\n                    isTruncated\\n                    color={\\"white\\"}\\n                >\\n                    {title}\\n                </Box>\\n                <Box\\n                    color=\\"white\\"\\n                    fontSize=\\"sm\\"\\n                    display={\\"flex\\"}\\n                    mt={4}\\n                    justifyContent={\\"flex-end\\"}\\n                >\\n                    //highlight-start\\n                    <Button\\n                        className=\\"buy-button snipcart-add-item\\"\\n                        bgColor={\\"green.400\\"}\\n                        data-item-id={id}\\n                        data-item-price=\\"5\\"\\n                        data-item-url=\\"/\\"\\n                        data-item-name={title}\\n                        data-item-description={description}\\n                        data-item-image={cardImage}\\n                    >\\n                        Add to Basket\\n                    </Button>\\n                    //highlight-end\\n                </Box>\\n            </Box>\\n        </Box>\\n    );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={basket} alt=\\"basket\\" />\\n</div>\\n<br />\\n\\n## Conclusion\\n\\nOne of the biggest features that distinguishes **refine** from other frameworks is that it is customizable. Combined with **refine** **headless**, it now provides more customization options. This provides a great deal of convenience in the project you will develop.\\n\\nAs you can see in this article, we have developed the Client part of our [Admin Panel](https://refine.dev/docs/guides-and-concepts/multi-tenancy/strapi-v4/), which we have done before, with **refine**. **refine** offers the opportunity to develop B2B and B2C applications without any restrictions and in a fully customizable manner.\\n\\n[Refer to the Admin side of the project \u2192](https://refine.dev/docs/guides-and-concepts/multi-tenancy/strapi-v4/)\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-ecommerce-example-9rvzv?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-ecommerce-example\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"how-to-add-darkmode-in-ant-design","metadata":{"permalink":"/blog/how-to-add-darkmode-in-ant-design","source":"@site/blog/2022-02-12-implement-darkmode.md","title":"Implementing Dark Mode In Ant Design Using gulp","description":"In this article, we\u2019ll learn how to efficiently implement dark mode in a Refine/Ant Design app, using gulp library and leveraging some React features like hooks","date":"2022-02-12T00:00:00.000Z","formattedDate":"February 12, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"darkmode","permalink":"/blog/tags/darkmode"},{"label":"theme","permalink":"/blog/tags/theme"},{"label":"ant-design","permalink":"/blog/tags/ant-design"}],"readingTime":4.83,"truncated":true,"authors":[{"name":"Pierre van Male","title":"Junior Fullstack Developer","url":"https://github.com/vmalep","imageURL":"https://github.com/vmalep.png","key":"vmalep"}],"prevItem":{"title":"Next.js E-commerce App with Strapi and Chakra UI","permalink":"/blog/handcrafted-nextjs-e-commerce-app-tutorial-strapi-chakra-ui"},"nextItem":{"title":"How to Import CSV File with React","permalink":"/blog/how-to-import-csv"}},"content":"import css from \'@site/static/img/blog/2022-02-12-implement-darkmode/css.png\';\\nimport light from \'@site/static/img/blog/2022-02-12-implement-darkmode/light.png\';\\nimport dark from \'@site/static/img/blog/2022-02-12-implement-darkmode/dark.png\';\\n\\nIn this article, we will provide an example on how to implement darkmode with **refine**. In order to switch between light and dark mode, we need 2 different styles and the possibility to switch between one and the other without restarting the application. Since the Less stylesheets with React doesn\'t allow variables to be modified without compilation and therefore a restart of the application. To solve this, we are going to use **gulp** that will compile the Less files into swappable CSS, directly accessible to the running application.\\n\\n\x3c!--truncate--\x3e\\n\\nThe solution was presented in this [blog](https://jfelix.info/blog/dynamic-themes-in-ant-design-how-to-change-between-light-and-dark-theme) and lightly adapted to **Refine**.\\n\\n## Initial setup\\nFor this article, we started from a basic Refine app with Ant Design:\\n```tsx\\nnpx superplate-cli -p refine-react tutorial\\n```\\nSelect the following options to complete the CLI wizard:\\n```tsx\\nCloned remote source successfully.\\n\u2714 What will be the name of your app \xb7 tutorial\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to use an UI Framework?: \xb7 antd\\n\u2714 Do you want to customize theme?: \xb7 less\\n\u2714 Data Provider: \xb7 custom-json-rest-data-provider\\n\u2714 Auth Provider: \xb7 none\\n\u2714 Do you want to add an example page? \xb7 example-resource\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\nFrom there, install the following packages:\\n```tsx\\nnpm install -s gulp gulp-less gulp-postcss gulp-debug gulp-csso autoprefixer less-plugin-npm-import\\nnpm install -s react-redux react-css-theme-switcher\\n```\\n\\n## Create the Less and then CSS files\\n\\n### Copy the `antd.less` file\\nMake a copy of the `src/styles/antd.less` file into `antd.light-theme.less` and add the following lines inside (because this setting will be removed from the Header/index.tsx file later on):\\n```tsx\\n// Header\\n@layout-header-background:#fff;\\n```\\n\\n### Create a Less file for the dark mode\\nCreate the following file `src/styles/antd.dark-theme.less` with this content:\\n```tsx title=\\"src/styles/antd.dark-theme.less\\"\\n// Run \'npx gulp less\' after modifying this file\\n\\n@import \'~antd/lib/style/color/colorPalette.less\';\\n@import \'~antd/dist/antd.less\';\\n@import \'~antd/lib/style/themes/dark.less\';\\n\\n@primary-color: rgba(255, 255, 255, 0.75);\\n@border-radius-base: 4px;\\n@icon-color: rgba(255, 255, 255, 0.75);\\n\\n@component-background: #303030;\\n@body-background: #303030;\\n@popover-background: #303030;\\n@border-color-base: #6f6c6c;\\n@border-color-split: #424242;\\n@table-header-sort-active-bg: #424242;\\n@card-skeleton-bg: #424242;\\n@skeleton-color: #424242;\\n@table-header-sort-active-bg: #424242;\\n@layout-header-background:#424242;\\n```\\n\\n### Compile the CSS files with `gulp`\\n\\nCreate the following `gulpfile.js` in the root of the repo:\\n```tsx title=\\"gulpfile.js\\"\\nconst gulp = require(\'gulp\')\\nconst gulpless = require(\'gulp-less\')\\nconst postcss = require(\'gulp-postcss\')\\nconst debug = require(\'gulp-debug\')\\nvar csso = require(\'gulp-csso\')\\nconst autoprefixer = require(\'autoprefixer\')\\nconst NpmImportPlugin = require(\'less-plugin-npm-import\')\\n\\ngulp.task(\'less\', function () {\\n  const plugins = [autoprefixer()]\\n\\n  return gulp\\n    .src(\'src/styles/*-theme.less\')\\n    .pipe(debug({title: \'Less files:\'}))\\n    .pipe(\\n      gulpless({\\n        javascriptEnabled: true,\\n        plugins: [new NpmImportPlugin({prefix: \'~\'})],\\n      }),\\n    )\\n    .pipe(postcss(plugins))\\n    .pipe(\\n      csso({\\n        debug: true,\\n      }),\\n    )\\n    .pipe(gulp.dest(\'./public\'))\\n})\\n\\nexports.sync = gulp.series(\'less\');\\n```\\nAnd run `npx gulp less`\\n```tsx\\n\u25b6npx gulp less                       \\n[22:36:28] Using gulpfile ./gulpfile.js\\n[22:36:28] Starting \'less\'...\\n[22:36:28] Less files: src/styles/antd.dark-theme.less\\n[22:36:28] Less files: src/styles/antd.light-theme.less\\n[22:36:28] Less files: 2 items\\n## parsing done in 165 ms\\n\\nCompress block #1\\n[0.028s] init\\n[0.038s] clean\\n[0.068s] replace\\n[0.076s] prepare\\n[0.011s] mergeAtrule\\n[0.052s] initialMergeRuleset\\n[0.011s] disjoinRuleset\\n[0.068s] restructShorthand\\n[0.076s] restructBlock\\n[0.015s] mergeRuleset\\n[0.075s] restructRuleset\\n## compress done in 522 ms\\n\\n## generate done in 44 ms\\n\\n## parsing done in 114 ms\\n\\nCompress block #1\\n[0.007s] init\\n[0.020s] clean\\n[0.057s] replace\\n[0.067s] prepare\\n[0.006s] mergeAtrule\\n[0.068s] initialMergeRuleset\\n[0.012s] disjoinRuleset\\n[0.045s] restructShorthand\\n[0.033s] restructBlock\\n[0.010s] mergeRuleset\\n[0.061s] restructRuleset\\n## compress done in 389 ms\\n\\n## generate done in 15 ms\\n\\n[22:36:33] Finished \'less\' after 5 s\\n```\\n:::info\\nthis command must be repeated each time the Less files are modified and the application restarted to see the changes)\\n:::\\n\\nYou should now have 2 CSS files inside the public folder: `antd.dark-theme.css`and `antd.light-theme.css`\\n<div class=\\"img-container\\">\\n    <img src={css} alt=\\"signin\\" />\\n</div>\\n\\n## Adapt the Refine application to be able to switch between the 2 styles\\n\\n### App.tsx file\\n// highlight-start\\n// highlight-end\\nIn App.tsx, adapt the file so it looks like this\xa0:\\n```tsx\\nimport { Refine, } from \'@pankod/refine-core\';\\nimport { notificationProvider } from \'@pankod/refine-antd\';\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport \\"styles/antd.less\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport { PostList, PostCreate, PostEdit, PostShow } from \\"pages/posts\\";\\nimport { Title, Header, Sider, Footer, Layout, OffLayoutArea } from \\"components/layout\\"\\n// highlight-start\\nimport { ThemeSwitcherProvider } from \\"react-css-theme-switcher\\";\\n// highlight-end\\n\\nfunction App() {\\n// highlight-start\\n    const currThemes = {\\n        dark: `${process.env.PUBLIC_URL}/antd.dark-theme.css`,\\n        light: `${process.env.PUBLIC_URL}/antd.light-theme.css`,\\n    };\\n// highlight-end\\n\\n    return (\\n// highlight-start\\n        <ThemeSwitcherProvider themeMap={currThemes} defaultTheme=\\"light\\">\\n// highlight-end\\n            <Refine routerProvider={routerProvider} notificationProvider={notificationProvider}\\n                dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n                resources={[\\n                    {\\n                        name: \\"posts\\",\\n                        list: PostList,\\n                        create: PostCreate,\\n                        edit: PostEdit,\\n                        show: PostShow,\\n                    },\\n                ]}\\n                Title={Title}\\n                Header={Header}\\n                Sider={Sider}\\n                Footer={Footer}\\n                Layout={Layout}\\n                OffLayoutArea={OffLayoutArea} />\\n// highlight-start\\n        </ThemeSwitcherProvider>\\n// highlight-end\\n    );\\n};\\n\\nexport default App;\\n```\\n\\n### Header\\n\\nAdd a theme switcher in the Header (`src/components/layout/header/index.tsx`) with the added lines so it looks like this (the Header has been simplified for the sake of clarity and the switch can be installed somewhere else in the application obviously):\\n\\n```tsx\\nimport { useState } from \\"react\\";\\n// highlight-start\\nimport { useThemeSwitcher } from \\"react-css-theme-switcher\\";\\n// highlight-end\\nimport {\\n    AntdLayout,\\n// highlight-start\\n    Switch,\\n// highlight-end\\n} from \\"@pankod/refine-antd\\";\\n\\nexport const Header: React.FC = () => {\\n// highlight-start\\n    const [isDarkMode, setIsDarkMode] = useState<boolean>();\\n    const { switcher, themes } = useThemeSwitcher();\\n\\n    function toggleTheme(isChecked: boolean) { // added\\n        setIsDarkMode(isChecked);\\n        switcher({ theme: isChecked ? themes.dark : themes.light });\\n    };\\n// highlight-end\\n\\n    return (\\n        <AntdLayout.Header\\n            style={{\\n                display: \\"flex\\",\\n                justifyContent: \\"flex-end\\",\\n                alignItems: \\"center\\",\\n                padding: \\"0px 24px\\",\\n                height: \\"64px\\",\\n// highlight-start\\n                //backgroundColor: \\"#FFF\\", // commented out, otherwise the header remains white in dark mode\\n// highlight-end\\n            }}\\n\\n        >\\n// highlight-start\\n            <div className=\\"main fade-in\\"> // added\\n                <Switch\\n                    checkedChildren=\\"\ud83c\udf1c\\"\\n                    unCheckedChildren=\\"\ud83c\udf1e\\"\\n                    checked={isDarkMode}\\n                    onChange={toggleTheme}\\n                />\\n            </div>\\n// highlight-end\\n        </AntdLayout.Header>\\n    );\\n};\\n```\\nYou should now have a light/dark mode switcher in the header:\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={light} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dark} alt=\\"signin\\" />\\n</div>\\n<br />"},{"id":"how-to-import-csv","metadata":{"permalink":"/blog/how-to-import-csv","source":"@site/blog/2022-01-18-csv-import.md","title":"How to Import CSV File with React","description":"In this guide, I will show you how to import CSV files using React and JavaScript.","date":"2022-01-18T00:00:00.000Z","formattedDate":"January 18, 2022","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"csv","permalink":"/blog/tags/csv"},{"label":"import","permalink":"/blog/tags/import"},{"label":"React","permalink":"/blog/tags/react"}],"readingTime":4.98,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Implementing Dark Mode In Ant Design Using gulp","permalink":"/blog/how-to-add-darkmode-in-ant-design"},"nextItem":{"title":"How to Multipart File Upload Using FormData with HTML","permalink":"/blog/how-to-multipart-upload"}},"content":"import console from \'@site/static/img/blog/2022-01-18-csv-import/console.gif\';\\nimport overview from \'@site/static/img/blog/2022-01-18-csv-import/overview.gif\';\\nimport importing from \'@site/static/img/blog/2022-01-18-csv-import/importing.gif\';\\n\\nIn this guide, we will learn how to import any CSV file received from the user with React. Our application will consist of two parts. We will create a form for the user to select a file. Next, we will do some operations with JavaScript to be able to view this CSV file. Let\'s start with our example.\\n\\n\x3c!--truncate--\x3e\\n\\n## Example\\n\\nFirst, let\'s create a [Form](https://tr.reactjs.org/docs/forms.html) in React so that the user can upload a CSV file.\\n\\n```tsx title=\\"App.js\\"\\nfunction App() {\\n    return (\\n        <div style={{ textAlign: \\"center\\" }}>\\n            <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n            <form>\\n                //highlight-start\\n                <input type={\\"file\\"} accept={\\".csv\\"} />\\n                //highlight-end\\n                <button>IMPORT CSV</button>\\n            </form>\\n        </div>\\n    );\\n}\\n```\\n\\nWe created a simple form and our input items. With the accept feature of the input element, we specify that the format of the file can only be CSV. Now, let\'s load and read the CSV file selected by the user with [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader).\\n\\n```tsx\\nimport React, { useState } from \\"react\\";\\n\\nfunction App() {\\n    const [file, setFile] = useState();\\n\\n    const fileReader = new FileReader();\\n\\n    const handleOnChange = (e) => {\\n        setFile(e.target.files[0]);\\n    };\\n\\n    const handleOnSubmit = (e) => {\\n        e.preventDefault();\\n\\n        if (file) {\\n            fileReader.onload = function (event) {\\n                const csvOutput = event.target.result;\\n            };\\n\\n            fileReader.readAsText(file);\\n        }\\n    };\\n\\n    return (\\n        <div style={{ textAlign: \\"center\\" }}>\\n            <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n            <form>\\n                <input\\n                    type={\\"file\\"}\\n                    id={\\"csvFileInput\\"}\\n                    accept={\\".csv\\"}\\n                    onChange={handleOnChange}\\n                />\\n\\n                <button\\n                    onClick={(e) => {\\n                        handleOnSubmit(e);\\n                    }}\\n                >\\n                    IMPORT CSV\\n                </button>\\n            </form>\\n        </div>\\n    );\\n}\\n```\\n\\nHere, once the user-selected file has been successfully uploaded, we can process and display the file. Now let\'s load a sample CSV file and see it output on our console.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={console} alt=\\"console_csv_output\\" />\\n</div>\\n<br />\\n\\nAs you can see, we can now read a selected CSV file. We can convert this file, which we read as a plain text type, into an Array of Object with JavaScript and place it inside a Table element.\\n\\n```tsx\\nfunction App() {\\n import React, { useState } from \\"react\\";\\n\\nfunction App() {\\n  const [file, setFile] = useState();\\n  const [array, setArray] = useState([]);\\n\\n  const fileReader = new FileReader();\\n\\n  const handleOnChange = (e) => {\\n    setFile(e.target.files[0]);\\n  };\\n\\n  const csvFileToArray = string => {\\n    const csvHeader = string.slice(0, string.indexOf(\\"\\\\n\\")).split(\\",\\");\\n    const csvRows = string.slice(string.indexOf(\\"\\\\n\\") + 1).split(\\"\\\\n\\");\\n\\n    const array = csvRows.map(i => {\\n      const values = i.split(\\",\\");\\n      const obj = csvHeader.reduce((object, header, index) => {\\n        object[header] = values[index];\\n        return object;\\n      }, {});\\n      return obj;\\n    });\\n\\n    setArray(array);\\n  };\\n\\n  const handleOnSubmit = (e) => {\\n    e.preventDefault();\\n\\n    if (file) {\\n      fileReader.onload = function (event) {\\n        const text = event.target.result;\\n        csvFileToArray(text);\\n      };\\n\\n      fileReader.readAsText(file);\\n    }\\n  };\\n\\n  const headerKeys = Object.keys(Object.assign({}, ...array));\\n\\n  return (\\n    <div style={{ textAlign: \\"center\\" }}>\\n      <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n      <form>\\n        <input\\n          type={\\"file\\"}\\n          id={\\"csvFileInput\\"}\\n          accept={\\".csv\\"}\\n          onChange={handleOnChange}\\n        />\\n\\n        <button\\n          onClick={(e) => {\\n            handleOnSubmit(e);\\n          }}\\n        >\\n          IMPORT CSV\\n        </button>\\n      </form>\\n\\n      <br />\\n\\n      <table>\\n        <thead>\\n          <tr key={\\"header\\"}>\\n            {headerKeys.map((key) => (\\n              <th>{key}</th>\\n            ))}\\n          </tr>\\n        </thead>\\n\\n        <tbody>\\n          {array.map((item) => (\\n            <tr key={item.id}>\\n              {Object.values(item).map((val) => (\\n                <td>{val}</td>\\n              ))}\\n            </tr>\\n          ))}\\n        </tbody>\\n      </table>\\n    </div>\\n  );\\n}\\n....\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview_csv\\" />\\n</div>\\n<br />\\n\\nWe formatted the CSV file that came in plain text format, using Javascript [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) and [split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) methods, and created two separate array. Then we converted Header and Rows arrays to Array of Object format as Key, Value.\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/csv-import-example-hw3ne?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"csv-import-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n## Are You Looking React Web Framework?\\n\\nA React-based framework for building internal tools, rapidly. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\ud83d\udd25 **Headless** : Works with any UI framework\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Hasura, Nhost, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/)\\n\\n## How to CSV Import with Refine?\\n\\nThe CSV import with **refine** is very simple and out-of-the-box feature. How to use it is explained step by step in the guide and example.\\n\\n[Refer to the **refine** CSV import guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/import-export/csv-import/)\\n\\n[View Source](https://github.com/pankod/refine/blob/master/examples/importExport/src/pages/posts/list.tsx#L32)\\n\\n## Refine CSV Import Usage\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={importing} alt=\\"importing_csv\\" />\\n</div>\\n<br />\\n\\nImporting CSV files is simple and fast using the [`useImport`](https://refine.dev/docs/core/hooks/import-export/useImport/) hook and [`ImportButton`](https://refine.dev/docs/ui-frameworks/antd/components/buttons/import-button/) provided by **refine**.\\n\\n```tsx\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    //highlight-start\\n    useImport,\\n    ImportButton,\\n    //highlight-end\\n} from \\"@pankod/refine\\";\\n\\nexport const PostList: React.FC = () => {\\n    const { tableProps } = useTable<IPost>();\\n\\n    //highlight-start\\n    const importProps = useImport<IPostFile>();\\n    //highlight-end\\n\\n    return (\\n        <List\\n            pageHeaderProps={{\\n                //highlight-start\\n                extra: <ImportButton {...importProps} />,\\n                //highlight-end\\n            }}\\n        >\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n                <Table.Column dataIndex=\\"status\\" title=\\"Status\\" />\\n            </Table>\\n        </List>\\n    );\\n};\\n\\ninterface IPostFile {\\n    title: string;\\n    categoryId: string;\\n}\\ninterface IPost {\\n    id: string;\\n    title: string;\\n    status: string;\\n}\\n```\\n\\nYou can also divide the data into chunk with the `batchSize` option while performing the insertion process.\\n\\n[Refer to the **refine** CSV Import API References for more information. \u2192](https://refine.dev/docs/core/hooks/import-export/useImport/#api-reference)\\n\\n## Refine CSV Import Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-import-export-example-4nneu?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"refine-import-export-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"how-to-multipart-upload","metadata":{"permalink":"/blog/how-to-multipart-upload","source":"@site/blog/2021-12-27-multipart-upload.md","title":"How to Multipart File Upload Using FormData with HTML","description":"In this guide, I\'m going to show you how to multipart files upload with using HTML and JavaScript","date":"2021-12-27T00:00:00.000Z","formattedDate":"December 27, 2021","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"multipart/form-data","permalink":"/blog/tags/multipart-form-data"},{"label":"multipart-upload","permalink":"/blog/tags/multipart-upload"},{"label":"file-upload","permalink":"/blog/tags/file-upload"}],"readingTime":3.625,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to Import CSV File with React","permalink":"/blog/how-to-import-csv"},"nextItem":{"title":"How to upload files from your HTML form using Base64 encoding","permalink":"/blog/how-to-base64-upload"}},"content":"import upload from \'@site/static/img/blog/2021-12-27-multipart-upload/upload.png\';\\nimport overview from \'@site/static/img/blog/2021-12-27-multipart-upload/overview.gif\';\\n\\nIn this guide, we will look at how we can upload a file from HTML form data to a server with the multipart-upload method. Multipart-Upload is commonly used method for sending files or data to a server.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Multipart Upload Request?\\n\\nA multipart request is a HTTP request that HTTP clients construct to send files and data over to a HTTP Server. It is commonly used by browsers and HTTP clients to upload files to the server.\\n\\n## Example\\n\\nWe will take a file from the user with [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and send it to the server. First, let\'s create our fields for the user to choose a file using HTML form.\\n\\n```html\\n<body>\\n    <div class=\\"container\\">\\n        <h1>Multipart File Upload</h1>\\n        <form id=\\"form\\" enctype=\\"multipart/form-data\\">\\n            <div class=\\"input-group\\">\\n                <label for=\\"files\\">Select files</label>\\n                <input id=\\"file\\" type=\\"file\\" multiple />\\n            </div>\\n            <button class=\\"submit-btn\\" type=\\"submit\\">Upload</button>\\n        </form>\\n    </div>\\n    <script src=\\"index.js\\"><\/script>\\n</body>\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={upload} alt=\\"upload_screen\\" />\\n</div>\\n<br />\\n\\nHere we simply created an input and a button. With these HTML elements we have created, we can get the file chosen by the user.\\n\\nLet\'s make a request with JavaScript and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to send the selected files to the server.\\n\\n```jsx\\nconst form = document.getElementById(\\"form\\");\\nconst inputFile = document.getElementById(\\"file\\");\\n\\nconst formData = new FormData();\\n\\nconst handleSubmit = (event) => {\\n    event.preventDefault();\\n\\n    for (const file of inputFile.files) {\\n        formData.append(\\"files\\", file);\\n    }\\n\\n    fetch(\\"http://localhost:8080/files\\", {\\n        method: \\"post\\",\\n        body: formData,\\n    }).catch((error) => (\\"Something went wrong!\\", error));\\n};\\n\\nform.addEventListener(\\"submit\\", handleSubmit);\\n```\\n\\nWe added the file we received from the user with the input file to FormData. We then created a request to send this FormData object to the server.\\n\\nNow, let\'s create a simple server using [Express](https://expressjs.com/) and [Multer](https://github.com/expressjs/multer) in order to see that the files we sent are received by the server successfully.\\n\\n:::note\\nMulter: JavaScript middleware for handling multipart/form-data , which is used for uploading files.\\n:::\\n\\n```jsx title=server.js\\nimport express from \\"express\\";\\nimport cors from \\"cors\\";\\nimport multer from \\"multer\\";\\n\\nconst app = express();\\n\\n//Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins\\napp.use(cors());\\n\\nconst storage = multer.diskStorage({\\n    destination: (req, file, cb) => {\\n        cb(null, __dirname + \\"/uploads\\");\\n    },\\n    filename: (req, file, cb) => {\\n        cb(null, file.originalname);\\n    },\\n});\\n\\nconst Data = multer({ storage: storage });\\n\\napp.post(\\"/files\\", Data.any(\\"files\\"), (req, res) => {\\n    if (res.status(200)) {\\n        console.log(\\"Your file has been uploaded successfully.\\");\\n        console.log(req.files);\\n        res.json({ message: \\"Successfully uploaded files\\" });\\n        res.end();\\n    }\\n});\\n\\napp.listen(8000, () => {\\n    console.log(\\"Server is running\\");\\n});\\n```\\n\\nAs you can see, we have created our multer structure and a simple server to run locally in order to manage and receive FormData.\\n\\nThe requests we created to send files by JavaScript will now be sent to our local server.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"upload overview\\" />\\n</div>\\n<br />\\n\\n## Are You Looking React Web Framework?\\nA React-based framework for building internal tools, rapidly. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Hasura, Nhost, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udd18 Headless : Works with any UI framework\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/) \\n## How to Multipart Upload with Refine?\\nThe Multipart file upload process with **refine** is very simple. How to use it is explained step by step in the guide and example. \\n\\n[Refer to the **refine** Multipart Upload guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/upload/multipart-upload/) \\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/upload/multipartUpload)\\n\\n## Refine Multipart Upload Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/refine-multipart-upload-example-88thp?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-multipart-upload-example\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"how-to-base64-upload","metadata":{"permalink":"/blog/how-to-base64-upload","source":"@site/blog/2021-12-22-base64-upload.md","title":"How to upload files from your HTML form using Base64 encoding","description":"Uploading files using Base64 encoding is a common practice. In this guide, I\'m going to show you how to upload files using base64 encoding","date":"2021-12-22T00:00:00.000Z","formattedDate":"December 22, 2021","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"how-to","permalink":"/blog/tags/how-to"},{"label":"base64","permalink":"/blog/tags/base-64"},{"label":"file-upload","permalink":"/blog/tags/file-upload"}],"readingTime":4.265,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to Multipart File Upload Using FormData with HTML","permalink":"/blog/how-to-multipart-upload"},"nextItem":{"title":"Web3 with Refine","permalink":"/blog/web3-with-refine"}},"content":"import upload from \'@site/static/img/blog/2021-12-22-base64-upload/upload.png\';\\nimport overview from \'@site/static/img/blog/2021-12-22-base64-upload/overview.png\';\\n\\nUploading files using Base64 encoding is a common practice. In this guide, I\'m going to show you how to upload files using base64 encoding\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Base64 encoding?\\n\\n`Base64 Encoding` is the most widely used technique for storing or transmitting binary data by converting it to text. With this technique, binary data, which basically consists of 8-bit bytes, is divided into 6-bit (2^6 = 64) parts. 64 different numbers expressed in 6 bits are matched with 64 different characters expressed as Printable Characters in the `ASCII` character set.\\n\\nBase64 encoding is most commonly used to attach binary files to electronic mail in applications of the MIME (Multipurpose Internet Mail Extensions) standard.\\n\\nAnother usage area of \u200b\u200bBase64 Encoding is adding images and other files to HTML and CSS documents by encoding with Base64 using Data URLs format in modern browsers.\\n\\n## Example\\n\\nIn our example, we will upload the image file by encoding the image as Base64. First, let\'s write simple HTML and set the [Bootstrap](https://getbootstrap.com/docs/5.1/getting-started/introduction/) CSS link.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"utf-8\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n        <link\\n            href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n            rel=\\"stylesheet\\"\\n            integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n            crossorigin=\\"anonymous\\"\\n        />\\n        <title>Base64 File Upload</title>\\n    </head>\\n\\n    <body>\\n        <div style=\\"margin: 24px\\">\\n            <h2>Upload Image</h2>\\n        </div>\\n\\n        <script src=\\"./index.js\\"><\/script>\\n    </body>\\n</html>\\n```\\n\\nThen we need to use the HTML [input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file) tag to receive an image file from the user.\\n\\nWe will use `file input` because it must be the input type file we want to receive.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n    <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n    <link href=\\"assets/css/bootstrap-responsive.css\\" rel=\\"stylesheet\\" />\\n    <link\\n      href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n      rel=\\"stylesheet\\"\\n      integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n      crossorigin=\\"anonymous\\"\\n    />\\n\\n    <title>Base64 File Upload</title>\\n  </head>\\n  <body>\\n    <div style=\\"margin: 24px\\">\\n      <h2>Upload Image</h2>\\n    </div>\\n    //highlight-start\\n    <div style=\\"margin: 16px; padding: 16px\\">\\n      <input\\n        class=\\"form-control form-control-lg\\"\\n        id=\\"selectAvatar\\"\\n        type=\\"file\\"\\n      />\\n    </div>\\n    //highlight-end\\n</html>\\n```\\n\\nNow we have an input to interact with the user and select a file. Let\'s add the HTML elements that will show the image file and Base64 code we received from the user.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"utf-8\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n        <link href=\\"assets/css/bootstrap-responsive.css\\" rel=\\"stylesheet\\" />\\n        <link\\n            href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n            rel=\\"stylesheet\\"\\n            integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n            crossorigin=\\"anonymous\\"\\n        />\\n\\n        <title>Base64 File Upload</title>\\n    </head>\\n    <body>\\n        <div style=\\"margin: 24px\\">\\n            <h2>Upload Image</h2>\\n        </div>\\n\\n        <div style=\\"margin: 16px; padding: 16px\\">\\n            <input\\n                class=\\"form-control form-control-lg\\"\\n                id=\\"selectAvatar\\"\\n                type=\\"file\\"\\n            />\\n        </div>\\n        //highlight-start\\n        <div class=\\"container\\">\\n            <div class=\\"row\\">\\n                <div class=\\"col\\">\\n                    <h6>Image Preview:</h6>\\n                    <img class=\\"img\\" id=\\"avatar\\" />\\n                </div>\\n                <div class=\\"col\\">\\n                    <h6>Base64 Output</h6>\\n                    <textarea id=\\"textArea\\" rows=\\"30\\" cols=\\"50\\"></textarea>\\n                </div>\\n            </div>\\n        </div>\\n        //highlight-end\\n        <script src=\\"./index.js\\"><\/script>\\n    </body>\\n</html>\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={upload} alt=\\"upload_screen\\" />\\n</div>\\n<br />\\n\\nOur fields are ready to display the image file and Base64 code. Now let\'s do our operations on the JavaScript side.\\n\\n```jsx\\nconst input = document.getElementById(\\"selectAvatar\\");\\nconst avatar = document.getElementById(\\"avatar\\");\\nconst textArea = document.getElementById(\\"textAreaExample\\");\\n\\nconst convertBase64 = (file) => {\\n    return new Promise((resolve, reject) => {\\n        const fileReader = new FileReader();\\n        fileReader.readAsDataURL(file);\\n\\n        fileReader.onload = () => {\\n            resolve(fileReader.result);\\n        };\\n\\n        fileReader.onerror = (error) => {\\n            reject(error);\\n        };\\n    });\\n};\\n\\nconst uploadImage = async (event) => {\\n    const file = event.target.files[0];\\n    const base64 = await convertBase64(file);\\n    avatar.src = base64;\\n    textArea.innerText = base64;\\n};\\n\\ninput.addEventListener(\\"change\\", (e) => {\\n    uploadImage(e);\\n});\\n```\\n\\nHere we take data in file format and encode it as Base64. Then we show this encoded image and Base64 encoding output.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/base64-upload-file-h3yy0?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"base64-upload-file\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n<br/>\\n<br/>\\n\\n## Are You Looking React Web Framework?\\nA React-based framework for building internal tools, rapidly. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\ud83d\udd25 **Headless** : Works with any UI framework\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Hasura, Nhost, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/) \\n## How to Base64 Upload with Refine?\\nThe Base64 file upload process with **refine** is very simple. How to use it is explained step by step in the guide and example. \\n\\n[Refer to the **refine** Base64 Upload guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/upload/base64-upload/) \\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/upload/base64Upload)\\n\\n## Refine Base64 Upload Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/refine-base64-upload-example-tm5nh?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"refine-base64-upload-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"web3-with-refine","metadata":{"permalink":"/blog/web3-with-refine","source":"@site/blog/2021-12-13-web3-refine.md","title":"Web3 with Refine","description":"Sign-in Ethereum with Web3 and Refine","date":"2021-12-13T00:00:00.000Z","formattedDate":"December 13, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"dapps","permalink":"/blog/tags/dapps"},{"label":"metamask","permalink":"/blog/tags/metamask"},{"label":"login-ethereum","permalink":"/blog/tags/login-ethereum"}],"readingTime":1.72,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to upload files from your HTML form using Base64 encoding","permalink":"/blog/how-to-base64-upload"},"nextItem":{"title":"Refine vs AdminBro - Comparison Admin Panel Framework","permalink":"/blog/refine-vs-adminbro"}},"content":"In this article, we will talk about what is web3 and a simple ethereum wallet login application with **refine**.\\n\\nimport login from \'@site/static/img/blog/2021-12-13-web3-refine/login.gif\';\\nimport overview from \'@site/static/img/blog/2021-12-13-web3-refine/overview.gif\';\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Web3?\\n\\nWeb 3.0 eliminates intermediates. There\u2019s no centralized database that stores the application state.\\n\\nIn web3, developers don\'t usually build and deploy applications that run on a single server or that store their data in a single database.\\nInstead of, Web3 applications run on blockchains, decentralized networks of many peer to peer nodes\\n\\nFeatures provided by Web3:\\n* Verifiable\\n* Self-governing\\n* Permissionless\\n* Stateful\\n* Trustless\\n* Native built-in payments\\n* Anonymity\\n\\n## What is dApps(Dapps)?\\nDapps is short for \\"Decentralized Applications\\" and refers to any application that is decentralized in nature, built on a blockchain, and may use tokens for transactions.\\n\\nDapps is just like any other software application you use. It could be a website or an app on your phone. What makes a Dapp different than a traditional app is that it\'s built on a decentralized network, like Ethereum.\\n\\nMany applications on the logic of dApp have been developed and continue to be developed.\\n\\n[Here you can browse some dapps](https://ethereum.org/en/dapps/)\\n\\nWe have developed a simple app where you can login with ethereum and send ethereum over the network using Metamask Wallet and **refine**.\\n\\nThis application allows you to login with your web3 wallet and you can also send ethereum over the ethereum network.\\n\\nThis example is simple intro to dApps development  built with web3 and **refine**.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"login\\" />\\n</div>\\n<br />\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\nYou can develop many fast and functional dApps using web3 and **refine**.\\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/web3/ethereumLogin)\\n\\n[View Guide](https://refine.dev/docs/guides-and-concepts/web3/ethereum-signin/)\\n\\n## Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/signin-with-ethereum-umho3?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"signin-with-ethereum\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"refine-vs-adminbro","metadata":{"permalink":"/blog/refine-vs-adminbro","source":"@site/blog/2021-11-29-refine-vs-admin-bro.md","title":"Refine vs AdminBro - Comparison Admin Panel Framework","description":"Refine vs AdminBro","date":"2021-11-29T00:00:00.000Z","formattedDate":"November 29, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"admin-bro","permalink":"/blog/tags/admin-bro"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"react-framework","permalink":"/blog/tags/react-framework"}],"readingTime":13.135,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Web3 with Refine","permalink":"/blog/web3-with-refine"},"nextItem":{"title":"Refine vs React-Admin Which is Better for Your Project?","permalink":"/blog/refine-vs-react-admin"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nimport refine_flow from \'@site/static/img/blog/2021-11-29-refine-vs-adminbro/refine_flow.png\';\\nimport project_setup from \'@site/static/img/blog/2021-11-29-refine-vs-adminbro/project_setup.gif\';\\n\\nLooking for open source **admin panel framework**? Here we are going to review two of the best **Open Source admin panel frameworks of 2021**.\\n\\n\\n\x3c!--truncate--\x3e\\n\\nThese frameworks that we will talk about have emerged to offer solutions to the same business demands in general. Although the purpose of these two frameworks is the same, the solutions are different from each other. Our goal in this article is to show you these differences and help you find the appropriate framework for your project.\\n\\n:::note\\nThis comparison table strives to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes (with notes or evidence of claims) contact info@refine.dev or you can open a issue on [Github](https://github.com/pankod/refine).\\n:::\\n\\n\\n## Refine\\n**refine** is a React-based framework that helps you to develop admin panel, B2B and dashboard that can be fully customized with Ant Design.\\n\\n**refine** directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.\\n\\n**refine** is a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.\\n\\n**refine** uses [React Query](https://react-query.tanstack.com/) for data processing, caching, and state management. In this respect, you do not need to define anything extra for every cases and model.\\n\\nAlthough **refine** is a newer framework, it is successful in identifying deficiencies in development and producing solutions accordingly. Using new technologies, it offers users more effective and simpler development options.\\n\\n### Installation\\n* Installation is very simple and customizable options can be added.\\n\\n```bash\\nnpx superplate-cli demo-refine-project\\n```\\n\\n<img src={project_setup} alt=\\"setup\\" />\\n\\n### Features\\n\\n* Configuration: One-line setup with superplate. Project setup is very simple. Using superplate you can choose the content of your project and the features you want to add. \\n\\n* UI: You have full control over the UI elements. Fully customizable, open to use. Works seamlessly with Ant Design System.\\n\\n* Out-of-the-box: Routing, networking, authentication, state managment, i18n and UI.\\n\\n* Next.js / SSR integration: **refine** can be used with Next.js to SSR your pages.\\n\\n* React Location: React Location router provider support \\n\\n### SSR - Next.js Support \\nrefine has support for SSR - Next.js. This is an important feature that separates **refine** from other frameworks. Thanks to this feature, **refine** provides the opportunity to develop B2C applications in addition to B2B and admin panel.\\n\\nrefine can be used with Next.js to SSR your pages. It doesn\'t get in the way and follows Next.js conventions and also provides helper modules when necessary.\\n\\n#### SSR-Next.js Setup\\n\\n```bash\\nnpm i @pankod/refine @pankod/refine-nextjs-router\\n```\\n\\n#### SSR-Next.js Basic Usage\\n`<Refine>` must wrap your pages in a custom App component. This way your pages are integrated to refine.\\n\\n```tsx title=pages/_app.tsx\\nimport { AppProps } from \\"next/app\\";\\n\\nimport { Refine } from \\"@pankod/refine\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst API_URL = \\"https://api.fake-rest.refine.dev\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(API_URL)}\\n        >\\n            <Component {...pageProps} />\\n        </Refine>\\n    );\\n}\\n\\nexport default MyApp;\\n```\\n[For more information on how to add SSR-Next.js to your Refine project ->](https://refine.dev/docs/guides-and-concepts/ssr-nextjs/) \\n\\n### Routing\\n**refine** uses a customized Router Provider to save routes and navigate between pages. **refine** offers a much more flexible structure thanks to its routerProvider support.\\n\\nA router provider must include the following methods:\\n\\n```tsx\\nconst routerProvider = {\\n    useHistory: () => {\\n        push: (...args) => any,\\n        replace: (...args) => any,\\n        goBack: (...args) => any,\\n    },\\n    useLocation: () => {\\n        pathname: string,\\n        search: string,\\n    },\\n    useParams: <Params extends { [K in keyof Params]?: string } = {}>() => Params,\\n    Prompt: React.FC<PromptProps*>,\\n    Link: React.FC<any>,\\n    RouterComponent?: React.FC<any>,\\n};\\n```\\n\\n:::info\\nrefine includes many  router providers to use in your projects like: \\n\\n* React Router\\n* React Location\\n* Next.js Router\\n:::\\n\\n[To take a look at how other router providers are defined and working](https://refine.dev/docs/api-references/providers/router-provider/)\\n\\nTo activate router provider in **refine**, we have to pass the routerProvider to the `<Refine />` component.\\n\\n<Tabs\\ndefaultValue=\\"react-router\\"\\nvalues={[\\n{label: \'React Router\', value: \'react-router\'},\\n{label: \'React Location\', value: \'react-location\'},\\n{label: \'Next.js Router\', value: \'nextjs\'}\\n]}>\\n<TabItem value=\\"react-router\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"react-location\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-location\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"nextjs\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\nYou just need to tell the route of your component to the routerProvider.\\n\\n\\n### Data Provider Logic\\n\\nA data provider is the place where a **refine** app communicates with an API.\\n\\n<img src={refine_flow} alt=\\"refine\\" />\\n\\n\\nA data provider must include following methods:\\n\\n```ts\\nconst dataProvider = {\\n    create: ({ resource, variables, metaData }) => Promise,\\n    createMany: ({ resource, variables, metaData }) => Promise,\\n    deleteOne: ({ resource, id, metaData }) => Promise,\\n    deleteMany: ({ resource, ids, metaData }) => Promise,\\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\\n    getMany: ({ resource, ids, metaData }) => Promise,\\n    getOne: ({ resource, id, metaData }) => Promise,\\n    update: ({ resource, id, variables, metaData }) => Promise,\\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\\n    custom: ({\\n        url,\\n        method,\\n        sort,\\n        filters,\\n        payload,\\n        query,\\n        headers,\\n        metaData,\\n    }) => Promise,\\n    getApiUrl: () => \\"\\",\\n};\\n```\\n\\n\\n:::note\\nData hooks uses React Query to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc..\\n:::\\n\\n#### GraphQL Data Provider\\nIt is well covered by GraphQL data provider **refine** and explained step by step in the documentation.\\n\\n**refine** GraphQL data provider is built with [qql-query-builder](https://github.com/atulmy/gql-query-builder) and [graphql-request](https://github.com/prisma-labs/graphql-request). The purpose here is to send dynamic queries that we can do with qql-query-builder as requests with graphql-request. \\n\\nQuery builder helps us build queries and mutations. We can use these queries with the getList, getMany and getOne methods in our data provider. On the other hand, the create, createMany, update, updateMany, deleteOne and deleteMany methods generate a mutation to send a request.\\n\\nIn order to create a query, we need to specify the fields that we will use from our data provider. Thanks to the MetaDataQuery, we pass these fields to our data provider and start using them.\\n\\n#### Basic GraphQL Usage\\n\\n```tsx src/App.tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-strapi-graphql\\";\\nimport { GraphQLClient } from \\"graphql-request\\";\\n\\nconst client = new GraphQLClient(\\"API_URL\\");\\n\\nconst App: React.FC = () => {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(client)}\\n        />\\n    );\\n};\\n```\\n\\nWhen sending the request, we must specify which fields will come, so we send fields in `metaData` to hooks that we will fetch data from.\\n\\n<Tabs\\ndefaultValue=\\"usage\\"\\nvalues={[\\n{label: \'usage\', value: \'usage\'},\\n{label: \'output\', value: \'output\'},\\n]}>\\n\\n<TabItem value=\\"usage\\">\\n\\n```tsx\\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<IPost>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n        // highlight-start\\n        metaData: {\\n            fields: [\\n                \\"id\\",\\n                \\"title\\",\\n                {\\n                    category: [\\"title\\"],\\n                },\\n            ],\\n        },\\n        // highlight-end\\n    });\\n\\n    const { selectProps } = useSelect<ICategory>({\\n        resource: \\"categories\\",\\n         // highlight-start\\n        metaData: {\\n            fields: [\\"id\\", \\"title\\"],\\n        },\\n         // highlight-end\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter={{ multiple: 2 }}\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                />\\n                <Table.Column\\n                    key=\\"title\\"\\n                    dataIndex=\\"title\\"\\n                    title=\\"Title\\"\\n                    sorter={{ multiple: 1 }}\\n                />\\n                <Table.Column<IPost>\\n                    dataIndex=\\"category\\"\\n                    title=\\"Category\\"\\n                    filterDropdown={(props) => (\\n                        <FilterDropdown {...props}>\\n                            <Select\\n                                style={{ minWidth: 200 }}\\n                                mode=\\"multiple\\"\\n                                placeholder=\\"Select Category\\"\\n                                {...selectProps}\\n                            />\\n                        </FilterDropdown>\\n                    )}\\n                    render={(_, record) => record.category.title}\\n                />\\n                <Table.Column<IPost>\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, record) => (\\n                        <Space>\\n                            <EditButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <ShowButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <DeleteButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n</TabItem>\\n\\n<TabItem value=\\"output\\">\\n\\n```tsx\\nquery ($sort: String, $where: JSON, $start: Int, $limit: Int) {\\n    posts (sort: $sort, where: $where, start: $start, limit: $limit) {\\n        id,\\n        title,\\n        category {\\n            title\\n        }\\n    }\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\nHere we only make requests for queries that are necessary. As you can see, all you have to do is specify the field you want to select with `metaData`.\\n\\n[Refer to the GraphQL for detailed usage. \u2192 ](https://refine.dev/docs/guides-and-concepts/data-provider/graphql/)\\n\\n\\n\\n### Refine Avaible Providers\\nConnects to any REST or GraphQL custom backend.\\n\\n* NestJs CRUD: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud](https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud)\\n* Airtable: [https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable](https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable)\\n* Strapi: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi)\\n* Strapi v4: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4)\\n* Strapi GraphQL: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql)\\n* Supabase: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Hasura: [https://github.com/pankod/refine/tree/master/examples/dataProvider/hasura](https://github.com/pankod/refine/tree/master/examples/dataProvider/hasura)\\n* Nhost: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nhost](https://github.com/pankod/refine/tree/master/examples/dataProvider/nhost)\\n* Appwrite: [https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite](https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite)\\n* Altogic: [https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic](https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic)\\n\\n### Customization\\n* **refine\'s** motivation and main purpose are as follows: \\"Higher-level frontend frameworks can save you a lot time, but they typically offer you a trade-off between speed and flexibility.\\" \\n* While the admin panel allows you to make dashboard, B2B and B2C applications quickly, we offer you flexibility in your UI or business model.\\n\\n#### UI/UX Customization: \\n* **refine**, comes ready-made decoupled from the UI, and is used. **refine** mostly touches UI components via hooks. The main advantage of this for you is that you can successfully perform any Business request or different case.\\n#### Logic Customization:\\n* **refine**, works flawless with react-query. You don\'t have to worry about state management in your business model or when you encounter a different situation.\\n\\n### Pricing\\nAll features of **refine** are available as **open source**.\\n\\n* Access Control Provider (RBAC, ABAC, ACL, IP, LDAP, etc...)\\n* Realtime\\n* Search \\n* Navigation and more features are available\\n\\nIf you want to get information about the Enterprise, refine ready to help you for Support and Training.\\n[For more info about Enterprise->](https://refine.dev/enterprise/) \\n\\n**refine** Docs & Demo: [Documentation](https://refine.dev/docs/) - [Live Demo](https://refine.dev/demo/)\\n\\n## AdminBro\\n[AdminBro](https://adminbro.com/index.html) is an open-source package from  that adds an auto-generated admin panel to your Node.js application. You provide database models or schemas and AdminBro generates the user interface for you. \\n\\nYou can connect your various databases to the admin interface and perform standard CRUD operations  on the records. In this way, it makes it to make changes on your data and provides you with a great deal of convenience.\\n\\nYou can quickly develop and customize the Admin panel with AdminBro.\\n\\nIt provides you with solutions and provides convenience when making admin panel and b2b applications. It is an open source project that has been in development and ongoing development for a long time. \\n\\n### Installation\\n\\nWe can say that it is difficult to install, but it is clearly explained step by step in the documentation.\\n\\n:::note\\nSince AdminBro uses your existing framework to render its routes - you have to use one of our plugins.\\n\\nThere are plugins for:\\n* Express\\n* Hapi\\n* Koa.js\\n* Nest.js\\n:::note\\n\\nInstall the AdminBro along with the express plugin\\n\\n```bash\\nnpm install admin-bro @admin-bro/express\\n```\\n\\nThen, we need to install some dependencies express and the express-formidable packages. express-formidable is a peer dependency for AdminBro\\n\\n ```bash\\n npm install express express-formidable\\n ```\\n\\n[For detailed installation \u2192](https://adminbro.com/tutorial-installation-instructions.html)\\n\\n### Features \\n\\n* You can use any data from any source and make changes to the data(create, read, update, delete)\\n* Custom actions\\n* Custom resource decorators\\n* Form validation \\n* A full-featured control panel can be created.\\n* Internationalization(i18n)\\n\\n### SSR - Next.js Support\u200b\\nAdminBro does not support SSR-Next.js. It only helps you develop B2B and admin panel applications.\\n\\n### Routing\\nAdminbro\'s routing processes are slightly different than others. You can also define the routes of the components that you have created custom here.\\n\\n```jsx\\nconst AdminBro = require(\'admin-bro\')\\nconst AdminBroExpress = require(\'@admin-bro/express\')\\n\\nconst express = require(\'express\')\\nconst app = express()\\n\\nconst adminBro = new AdminBro({\\n  databases: [],\\n  rootPath: \'/admin\',\\n})\\n\\nconst router = AdminBroExpress.buildRouter(adminBro)\\n```\\nThe concept of routing is handled in a different way and in general all routing operations are defined through this file.\\n\\n\\n### Data Provider Logic\\nIt does not have a data provider exactly like other frameworks. It has a different structure. It has created functions for you to control your data. But there are rules that we must follow and do.\\n\\nAdminBro can be connected to many different types of resources. Right now, they support the following options:\\n\\n* Mongoose\\n* Sequelize\\n* TypeORM\\n\\nTo add resources , you first have to intall an adapter for the resource you want to use.\\n\\n#### Install the Database Adapter and add resources\\n\\nLet\'s take a look at an example made with the mongoose adapter.\\n\\n```bash\\nnpm install mongoose @admin-bro/mongoose\\n```\\n\\n```tsx title=\\"index.js\\"\\nconst AdminBro = require(\'admin-bro\')\\nconst AdminBroExpress = require(\'@admin-bro/express\')\\nconst AdminBroMongoose = require(\'@admin-bro/mongoose\')\\n \\nconst express = require(\'express\')\\nconst app = express()\\n \\nconst mongoose = require(\'mongoose\')\\n \\nAdminBro.registerAdapter(AdminBroMongoose)\\n \\nconst run = async () => {\\n  const connection = await mongoose.connect(\'mongodb://localhost:27017/users\', {useNewUrlParser: true, useUnifiedTopology: true})\\n \\n  const User = mongoose.model(\'User\', { name: String, email: String, surname: String })\\n \\n  const adminBro = new AdminBro ({\\n    Databases: [connection],\\n    rootPath: \'/admin\',\\n    resources: [User]\\n  })\\n  const router = AdminBroExpress.buildRouter(adminBro)\\n  app.use(adminBro.options.rootPath, router)\\n     \\n  app.listen(3000, ()=> {\\n    console.log(\'Application is up and running under localhost:3000/admin\')\\n  })\\n}\\nrun()\\n```\\nHere we first installed and connected mongoose. We then created a model and passed it to the AdminBro resource. AdminBro has built an interface for us where we can list our users. You can also add your own [custom adapters](https://adminbro.com/tutorial-writing-custom-adapters.html) and set up [custom resources](https://adminbro.com/tutorial-customizing-resources.html).\\n\\nThe logic is well covered and also well explained in the documentation. But we can say that it is complex compared to other frameworks. It can be difficult to use on big data. \\n#### GraphQL Data Provider\\nThere is no native GraphQL support. It can be supported with 3rd party packages.\\n\\n[https://www.npmjs.com/package/admin-bro-graphql](https://www.npmjs.com/package/admin-bro-graphql)\\n[https://github.com/SoftwareBrothers/adminjs/issues/655](https://github.com/SoftwareBrothers/adminjs/issues/655)\\n\\n\\n### Customization\\nAdminBro is good at customizing. You can connect your own adapters and customize your resources. These customizations are challenging and complex.\\n\\nSome customizable features are as follows:\\n * [Customize Resources](https://adminbro.com/tutorial-customizing-resources.html)\\n * [Customize Actions](https://adminbro.com/tutorial-actions.html)\\n * [Custom Validations](https://adminbro.com/tutorial-actions-validations.html)\\n * [Customize dashboard](https://adminbro.com/tutorial-custom-dashboard.html)\\n\\n#### UI/UX Customization:\u200b\\nIt automatically offers you an interface option that you can use. You can also develop and customize your own components. You can do your own styling and write your own custom components, but for this customization, you need to follow and apply a few steps. It doesn\'t speed you up in UI development.\\n\\n[For more information about developing your own components ->](https://adminbro.com/tutorial-writing-react-components.html)\\n\\n### Pricing\\nAll features of Adminbro are open source and accessible.\\n\\n* Role-Based Access Control\\n* Content Management System\\n\\nAdminBro Docs & Demo: [Documentation](https://adminbro.com/tutorial-installation-instructions.html) - [Live Demo](https://admin-bro-example-app-staging.herokuapp.com/admin/login)\\n\\n## Conclusion\\nWe have examined these two frameworks under some headings. Both help you successfully develop admin panel and B2B applications.\\n\\nWe suggest asking some questions to find out which one is more suitable for your project.\\n\\nAt this point, the questions you should ask when choosing these of framework may be as follows:\\n\\n* How flexible are they in offering solutions to the different business demands we may encounter?\\n\\n* How difficult will it be to implement the providers and features we will be using?\\n\\n* If any problem arises, can I easily find a solution from the documentation?\\n\\n* How dependent am I on this framework when using it in my project and does it offer customization possibilities?\\n\\n* What does it offer me as an extra feature?\\n\\nHere **refine** directly answers some of your questions. **refine**\'s customized structures (API, Router, i18n, GraphQL provider, etc...) provide you convenience from many points, unlike admin bro. This convenience and perspective provided by **refine** can be preferred for many projects. In addition, you can be limited to internal tool/B2B applications with AdminBro.  You can develop many different projects with **refine**\'s rich UI library and SSR support.\\n\\nIn this article, we tried to answer these questions. By reading this article, you can choose the appropriate framework for your project and use it."},{"id":"refine-vs-react-admin","metadata":{"permalink":"/blog/refine-vs-react-admin","source":"@site/blog/2021-11-26-refine-vs-react-admin.md","title":"Refine vs React-Admin Which is Better for Your Project?","description":"We will compare the features of refine and react-admin","date":"2021-11-26T00:00:00.000Z","formattedDate":"November 26, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react-admin","permalink":"/blog/tags/react-admin"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"}],"readingTime":14.59,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Refine vs AdminBro - Comparison Admin Panel Framework","permalink":"/blog/refine-vs-adminbro"},"nextItem":{"title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nimport admin_flow from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/admin_flow.png\';\\nimport refine_flow from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/refine_flow.png\';\\nimport project_setup from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/project_setup.gif\';\\n\\nIf you are reading this, chances are you are a developer researching options for delivering an admin panel or another internal tool. Together with you, we will take a look at the best admin panel frameworks in response to this need.\\n\\n\x3c!--truncate--\x3e\\n\\nMotivation is our most important resource when developing a project. If you lose your motivation as your project progresses, you will not be able to produce a successful product. The point where you will lose this feeling the most is the point where you cannot meet your Business needs. Different UI / UX solutions may be requested for many business models and it is very important that you can realize them regardless of the framework you use. \\n\\nWhen you decide to use these types of frameworks, we need to know to what extent and how they solve your work. If we do not know what these frameworks do and how customizable they are, the problems we may encounter can reduce our motivation.\\n\\nWe will examine how the frameworks we will talk about solve our work and how customizable they are under the title of `Customization`.\\n\\n:::note\\nThis comparison table strives to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes (with notes or evidence of claims) contact info@refine.dev or you can open a issue on [Github](https://github.com/pankod/refine).\\n:::\\n\\n## React-Admin\\n\\n[React-Admin](https://marmelab.com/react-admin/) is an  B2B application framework based on Material Design, using Material UI. It provides ready-to-fetch-data components, so you just compose them together to create an application.\\n\\nIt can fetch data from any API connected to the data source, like REST, GraphQL, RPC. It\u2019s powered by React, React Router, Redux, and Redux Saga, while Material UI is responsible for the visual.\\n\\nReact-admin uses Redux and redux-saga for state management. React-Admin creates actions and reducers automatically. Developer should only create data provider, which is used for running requests to the server side and parse server responses. But in some cases it is necessary to run non-typical request to the server side, or to change custom Store parameters. In this case React-Admin gives possibility to create custom actions, reducers and sagas.\\n\\nReact-admin is a framework that has been developed for a long time and has a wider community. Besides being stable, it works with old technologies.\\n\\n### Installation\\n* Can be included in another React app \\n* Installation is very simple\\n\\n```bash\\nnpm install react-admin\\n#or\\nyarn add react-admin\\n```\\n\\n### Features\\n* It can be used with any backend(Rest, GraphQL, SOAP)\\n* API-based. The UI fetches the data from an API connected to the data source.\\n* Powered by Material UI, Redux, Redux Saga, React-router.\\n* Supports any authentication provider of your choice(REST API, OAuth, Basic Auth)\\n* Internationalization : Uses i18n\\n* Supports data validation\\n\\n### SSR - Next.js Support \\nReact-Admin does not support SSR-Next.js. Therefore, it only helps you develop B2B and admin panel applications.\\n\\n### Routing\\nReact admin does it with react-router-dom to save routes. You need to create your own module and define it in the `<Route>` component.\\n\\n```tsx title=\\"src/customRoutes.js\\"\\nimport * as React from \\"react\\";\\nimport { Route } from \'react-router-dom\';\\nimport Foo from \'./Foo\';\\nimport Bar from \'./Bar\';\\n\\nexport default [\\n    <Route exact path=\\"/foo\\" component={Foo} />,\\n    <Route exact path=\\"/bar\\" component={Bar} />,\\n];\\n```\\n\\nThen, pass this array as customRoutes prop in the `<Admin>` component:\\n\\n```tsx title=\\"src/App.js\\"\\nimport * as React from \\"react\\";\\nimport { Admin } from \'react-admin\';\\n\\nimport customRoutes from \'./customRoutes\';\\n\\nconst App = () => (\\n    <Admin customRoutes={customRoutes} dataProvider={simpleRestProvider(\'http://path.to.my.api\')}>\\n        ...\\n    </Admin>\\n);\\n\\nexport default App;\\n```\\n\\nNow, when a user browses to /foo or /bar, the components you defined will appear in the main part of the screen.\\n\\n\\n### Data Provider Logic\\nWhen React-admin needs to communicate with API, it uses Data Provider.\\n\\n<img src={admin_flow} alt=\\"admin\\" />\\n\\nHere are the React-Admin data provider methods:\\n\\n```ts\\nconst dataProvider = {\\n    getList:    (resource, params) => Promise,\\n    getOne:     (resource, params) => Promise,\\n    getMany:    (resource, params) => Promise,\\n    getManyReference: (resource, params) => Promise,\\n    create:     (resource, params) => Promise,\\n    update:     (resource, params) => Promise,\\n    updateMany: (resource, params) => Promise,\\n    delete:     (resource, params) => Promise,\\n    deleteMany: (resource, params) => Promise,\\n}\\n```\\n#### GraphQL Data Provider\\nWe can say that React-Admin is a bit lacking in terms of both graphql provider and its documentation. \\n\\nReact-Admin calls the GraphQL endpoint by running an introspection query for GraphQL.\\n\\n```jsx title=\\"App.js\\"\\nimport React from \'react\';\\nimport { Component } from \'react\';\\nimport buildGraphQLProvider from \'ra-data-graphql-simple\';\\nimport { Admin, Resource } from \'react-admin\';\\n\\nimport { PostCreate, PostEdit, PostList } from \'./posts\';\\n\\nconst App = () => {\\n\\n    const [dataProvider, setDataProvider] = React.useState(null);\\n    React.useEffect(() => {\\n        buildGraphQLProvider({ clientOptions: { uri: \'http://localhost:4000\' } })\\n            .then(graphQlDataProvider => setDataProvider(() => graphQlDataProvider));\\n    }, []);\\n\\n    if (!dataProvider) {\\n        return <div>Loading</div>;\\n    }\\n\\n    return (\\n        <Admin dataProvider={dataProvider}>\\n            <Resource name=\\"Post\\" list ={PostList} edit ={PostEdit} create ={PostCreate}/>\\n        </Admin>\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nWhen we want to see this data in a table, all GraphQL entities are queried requested by default(even if you don\'t add columns to the table). This is against GraphQL\'s approach and is a scenario we would not want.\\n\\nThe way to prevent this is to override all your queries.\\n\\n```jsx title=\\"src/dataProvider.js\\"\\nimport buildGraphQLProvider, { buildQuery } from \'ra-data-graphql-simple\';\\n\\nconst myBuildQuery = introspection => (fetchType, resource, params) => {\\n    const builtQuery = buildQuery(introspection)(fetchType, resource, params);\\n\\n    if (resource === \'Command\' && fetchType === \'GET_ONE\') {\\n        return {\\n            // Use the default query variables and parseResponse\\n            ...builtQuery,\\n            // Override the query\\n            query: gql`\\n                query Command($id: ID!) {\\n                    data: Command(id: $id) {\\n                        id\\n                        reference\\n                        customer {\\n                            id\\n                            firstName\\n                            lastName\\n                        }\\n                    }\\n                }`,\\n        };\\n    }\\n\\n    return builtQuery;\\n};\\n\\nexport default buildGraphQLProvider({ buildQuery: myBuildQuery })\\n```\\n\\nAlthough this is a solution, it complicates your project in many ways (debugging, maintenence, etc...).\\n\\n### React-Admin Avaible Providers\\nThe providers that React admin supports are as follows:\\n* Simple Rest: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-simple-rest](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-simple-rest)\\n* Json Server: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server)\\n* Simple GrapgQL: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql-simple](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql-simple)\\n* Local JSON: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage)\\n* Local Strage: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage)\\n* Supabase: [https://github.com/marmelab/ra-supabase](https://github.com/marmelab/ra-supabase)\\n\\n[You can view the full list of providers here ->](https://marmelab.com/react-admin/DataProviders.html)\\n\\n### Customization\\nWith React-Admin, you can develop effective B2B applications and admin panels in a very short time. Although most of the processes are handled with hooks, the general architecture is built on components. In general, we can say that it is customizable but not very flexible. In some cases or business models, you may need to think about this yourself and make some additions.\\n#### UI/UX Customization: \\nReact-Admin offers solutions in component architecture. The disadvantage of this is that you will have difficulty meeting your customization needs or different business requests. These  customizable, but they can be a bit of a hard for different business models. \\n#### Logic Customization:\\nReact-Admin uses redux and redux-saga for state management. You should know these two technologies well. In some cases you may need to create the actions and reducers yourself. This is also a disadvantage for many situations.\\n\\n### Pricing\\nIn addition to these features it provides, React-Admin offers some modules as Enterprise-Edition.\\n\\nA few of these modules are as follows:\\n\\n* RBAC\\n* Editable-Datagrid\\n* Realtime\\n* Search \\n* Navigation\\n\\n[For more information about Enterprise-Edition and other modules](https://marmelab.com/ra-enterprise)\\n\\n\\n\\nReact-Admin Docs & Demo : [Documentation](https://marmelab.com/react-admin/Readme.html) - [Live Demo](https://marmelab.com/react-admin-demo/#/)\\n\\n## Refine\\n**refine** is a React-based framework that helps you to develop admin panel, B2B and dashboard that can be fully customized with Ant Design.\\n\\n**refine** directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.\\n\\n**refine** is a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.\\n\\n**refine** uses [React Query](https://react-query.tanstack.com/) for data processing, caching, and state management. In this respect, you do not need to define anything extra for every cases and model.\\n\\nAlthough **refine** is a newer framework, it is successful in identifying deficiencies in development and producing solutions accordingly. Using new technologies, it offers users more effective and simpler development options.\\n\\n### Installation\\n* Installation is very simple and customizable options can be added.\\n\\n```bash\\nnpx superplate-cli demo-refine-project\\n```\\n\\n<img src={project_setup} alt=\\"setup\\" />\\n\\n### Features\\n\\n* Configuration: One-line setup with superplate. Project setup is very simple. Using superplate you can choose the content of your project and the features you want to add. \\n\\n* UI: You have full control over the UI elements. Fully customizable, open to use. Works seamlessly with Ant Design System.\\n\\n* Out-of-the-box: Routing, networking, authentication, state managment, i18n and UI.\\n\\n* Next.js / SSR integration: refine can be used with Next.js to SSR your pages.\\n\\n* React Location: React Location router provider support \\n\\n### SSR - Next.js Support \\n**refine** has support for SSR - Next.js. This is an important feature that separates refine from other frameworks. Thanks to this feature, refine provides the opportunity to develop B2C applications in addition to B2B and admin panel.\\n\\n**refine** can be used with Next.js to SSR your pages. It doesn\'t get in the way and follows Next.js conventions and also provides helper modules when necessary.\\n\\n#### SSR-Next.js Setup\\n\\n```bash\\nnpm i @pankod/refine @pankod/refine-nextjs-router\\n```\\n\\n#### SSR-Next.js Basic Usage\\n`<Refine>` must wrap your pages in a custom App component. This way your pages are integrated to refine.\\n\\n```tsx title=pages/_app.tsx\\nimport { AppProps } from \\"next/app\\";\\n\\nimport { Refine } from \\"@pankod/refine\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst API_URL = \\"https://api.fake-rest.refine.dev\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(API_URL)}\\n        >\\n            <Component {...pageProps} />\\n        </Refine>\\n    );\\n}\\n\\nexport default MyApp;\\n```\\n[For more information on how to add SSR-Next.js to your Refine project ->](https://refine.dev/docs/guides-and-concepts/ssr-nextjs/) \\n\\n### Routing\\n**refine** uses a customized Router Provider to save routes and navigate between pages. **refine** offers a much more flexible structure thanks to its routerProvider support.\\n\\nA router provider must include the following methods:\\n\\n```tsx\\nconst routerProvider = {\\n    useHistory: () => {\\n        push: (...args) => any,\\n        replace: (...args) => any,\\n        goBack: (...args) => any,\\n    },\\n    useLocation: () => {\\n        pathname: string,\\n        search: string,\\n    },\\n    useParams: <Params extends { [K in keyof Params]?: string } = {}>() => Params,\\n    Prompt: React.FC<PromptProps*>,\\n    Link: React.FC<any>,\\n    RouterComponent?: React.FC<any>,\\n};\\n```\\n\\n:::info\\n**refine** includes many  router providers to use in your projects like: \\n\\n* React Router\\n* React Location\\n* Next.js Router\\n:::\\n\\n[To take a look at how other router providers are defined and working](https://refine.dev/docs/api-references/providers/router-provider/)\\n\\nTo activate router provider in **refine**, we have to pass the routerProvider to the `<Refine />` component.\\n\\n<Tabs\\ndefaultValue=\\"react-router\\"\\nvalues={[\\n{label: \'React Router\', value: \'react-router\'},\\n{label: \'React Location\', value: \'react-location\'},\\n{label: \'Next.js Router\', value: \'nextjs\'}\\n]}>\\n<TabItem value=\\"react-router\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"react-location\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-location\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"nextjs\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\nYou just need to tell the route of your component to the routerProvider.\\n\\n\\n### Data Provider Logic\\n\\nA data provider is the place where a **refine** app communicates with an API.\\n\\n<img src={refine_flow} alt=\\"refine\\" />\\n\\n\\nA data provider must include following methods:\\n\\n```ts\\nconst dataProvider = {\\n    create: ({ resource, variables, metaData }) => Promise,\\n    createMany: ({ resource, variables, metaData }) => Promise,\\n    deleteOne: ({ resource, id, metaData }) => Promise,\\n    deleteMany: ({ resource, ids, metaData }) => Promise,\\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\\n    getMany: ({ resource, ids, metaData }) => Promise,\\n    getOne: ({ resource, id, metaData }) => Promise,\\n    update: ({ resource, id, variables, metaData }) => Promise,\\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\\n    custom: ({\\n        url,\\n        method,\\n        sort,\\n        filters,\\n        payload,\\n        query,\\n        headers,\\n        metaData,\\n    }) => Promise,\\n    getApiUrl: () => \\"\\",\\n};\\n```\\n\\n\\n:::note\\nData hooks uses React Query to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc..\\n:::\\n\\n#### GraphQL Data Provider\\nIt is well covered by GraphQL data provider **refine** and explained step by step in the documentation.\\n\\n**refine** GraphQL data provider is built with [qql-query-builder](https://github.com/atulmy/gql-query-builder) and [graphql-request](https://github.com/prisma-labs/graphql-request). The purpose here is to send dynamic queries that we can do with qql-query-builder as requests with graphql-request. \\n\\nQuery builder helps us build queries and mutations. We can use these queries with the getList, getMany and getOne methods in our data provider. On the other hand, the create, createMany, update, updateMany, deleteOne and deleteMany methods generate a mutation to send a request.\\n\\nIn order to create a query, we need to specify the fields that we will use from our data provider. Thanks to the MetaDataQuery, we pass these fields to our data provider and start using them.\\n\\n#### Basic GraphQL Usage\\n\\n```tsx src/App.tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-strapi-graphql\\";\\nimport { GraphQLClient } from \\"graphql-request\\";\\n\\nconst client = new GraphQLClient(\\"API_URL\\");\\n\\nconst App: React.FC = () => {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(client)}\\n        />\\n    );\\n};\\n```\\n\\nWhen sending the request, we must specify which fields will come, so we send fields in `metaData` to hooks that we will fetch data from.\\n\\n<Tabs\\ndefaultValue=\\"usage\\"\\nvalues={[\\n{label: \'usage\', value: \'usage\'},\\n{label: \'output\', value: \'output\'},\\n]}>\\n\\n<TabItem value=\\"usage\\">\\n\\n```tsx\\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<IPost>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n        // highlight-start\\n        metaData: {\\n            fields: [\\n                \\"id\\",\\n                \\"title\\",\\n                {\\n                    category: [\\"title\\"],\\n                },\\n            ],\\n        },\\n        // highlight-end\\n    });\\n\\n    const { selectProps } = useSelect<ICategory>({\\n        resource: \\"categories\\",\\n         // highlight-start\\n        metaData: {\\n            fields: [\\"id\\", \\"title\\"],\\n        },\\n         // highlight-end\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter={{ multiple: 2 }}\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                />\\n                <Table.Column\\n                    key=\\"title\\"\\n                    dataIndex=\\"title\\"\\n                    title=\\"Title\\"\\n                    sorter={{ multiple: 1 }}\\n                />\\n                <Table.Column<IPost>\\n                    dataIndex=\\"category\\"\\n                    title=\\"Category\\"\\n                    filterDropdown={(props) => (\\n                        <FilterDropdown {...props}>\\n                            <Select\\n                                style={{ minWidth: 200 }}\\n                                mode=\\"multiple\\"\\n                                placeholder=\\"Select Category\\"\\n                                {...selectProps}\\n                            />\\n                        </FilterDropdown>\\n                    )}\\n                    render={(_, record) => record.category.title}\\n                />\\n                <Table.Column<IPost>\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, record) => (\\n                        <Space>\\n                            <EditButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <ShowButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <DeleteButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n</TabItem>\\n\\n<TabItem value=\\"output\\">\\n\\n```tsx\\nquery ($sort: String, $where: JSON, $start: Int, $limit: Int) {\\n    posts (sort: $sort, where: $where, start: $start, limit: $limit) {\\n        id,\\n        title,\\n        category {\\n            title\\n        }\\n    }\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\nHere we only make requests for queries that are necessary. As you can see, all you have to do is specify the field you want to select with `metaData`.\\n\\n[Refer to the GraphQL for detailed usage. \u2192 ](https://refine.dev/docs/guides-and-concepts/data-provider/graphql/)\\n\\n\\n\\n### Refine Avaible Providers\\nConnects to any REST or GraphQL custom backend.\\n\\n* NestJs CRUD: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud](https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud)\\n* Airtable: [https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable](https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable)\\n* Strapi: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi)\\n* Strapi v4: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4)\\n* Strapi GraphQL: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql)\\n* Supabase: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Hasura: [https://github.com/pankod/refine/tree/master/examples/dataProvider/hasura](https://github.com/pankod/refine/tree/master/examples/dataProvider/hasura)\\n* Nhost: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nhost](https://github.com/pankod/refine/tree/master/examples/dataProvider/nhost)\\n* Appwrite: [https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite](https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite)\\n* Altogic: [https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic](https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic)\\n\\n### Customization\\n* **refine\'s** motivation and main purpose are as follows: \\"Higher-level frontend frameworks can save you a lot time, but they typically offer you a trade-off between speed and flexibility.\\" \\n* While the admin panel allows you to make dashboard, B2B and B2C applications quickly, we offer you flexibility in your UI or business model.\\n\\n#### UI/UX Customization: \\n**refine**, comes ready-made decoupled from the UI, and is used. **refine** mostly touches UI components via hooks. The main advantage of this for you is that you can successfully perform any Business request or different case.\\n#### Logic Customization:\\n**refine**, works flawless with react-query. You don\'t have to worry about state management in your business model or when you encounter a different situation.\\n\\n### Pricing\\nAll features of **refine** are available as **open source**.\\n\\n* Access Control Provider (RBAC, ABAC, ACL, IP, LDAP, etc...)\\n* Realtime\\n* Search \\n* Navigation and more features are available\\n\\nIf you want to get information about the Enterprise, refine ready to help you for Support and Training.\\n[For more info about Enterprise->](https://refine.dev/enterprise/) \\n\\nrefine Docs & Demo: [Documentation](https://refine.dev/docs/) - [Live Demo](https://refine.dev/demo/)\\n\\n\\n## Conclusion\\nWith the pricing, customization and flexibility that **refine** offers you, you will be able to meet all your business demands. In addition, you can easily develop both B2B and B2C applications using a single framework with the support of SSR - Next.js. \\n\\n\\nIn general, these frameworks that we are comparing have appeared for the same purpose. All of them are successful in meeting business demands and offering you a solution. Here are the this solutions way that they offer, they may differ and there may be distinguishing features between them.\\n\\nAt this point, the questions you should ask when choosing these of framework may be as follows:\\n\\n* How flexible are they in offering solutions to the different business demands we may encounter?\\n\\n* How difficult will it be to implement the providers and features we will be using?\\n\\n* If any problem arises, can I easily find a solution from the documentation?\\n\\n* How dependent am I on this framework when using it in my project and does it offer customization possibilities?\\n\\n* What does it offer me as an extra feature?\\n\\nIn this article, we tried to answer these questions. By reading this article, you can choose the appropriate framework for your project and use it."},{"id":"customizable-issue-tracker-with-refine-and-supabase","metadata":{"permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase","source":"@site/blog/2021-11-12-issue-tracker-refine.md","title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","description":"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.","date":"2021-11-12T00:00:00.000Z","formattedDate":"November 12, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":17.63,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Refine vs React-Admin Which is Better for Your Project?","permalink":"/blog/refine-vs-react-admin"},"nextItem":{"title":"Create E-mail Subscription Panel with Refine and Strapi","permalink":"/blog/e-mail-subscription-panel-with-refine"}},"content":"import start from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/start.png\';\\nimport login from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/login.gif\';\\nimport labelTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_table.png\';\\nimport common from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/common_table.png\';\\nimport userTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/user_table.png\';\\nimport taskTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_table.png\';\\nimport labelValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_value.png\';\\nimport priorityValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/priority_value.png\';\\nimport statusValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/status_value.png\';\\nimport list from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/list.png\';\\nimport taskList from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_list.png\';\\nimport create from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create.png\';\\nimport edit from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit.png\';\\nimport show from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/show.png\';\\nimport dashOverview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dash_overview.png\';\\nimport overview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/overview-project.gif\';\\nimport filter from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/filter.gif\';\\nimport dashboard from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dashboard.gif\';\\nimport taskTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_test.gif\';\\nimport createTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create_test.gif\';\\nimport editTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit_test.gif\';\\n\\n\\nIn this article, we will make a customizable internal issue tracker web application with supabase and refine.\\n\\n\x3c!--truncate--\x3e\\n\\nThis web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.\\n\\n\\nWe will use [Supabase](https://supabase.io/) in backend. Let\'s start by creating our Supabase account and tables.\\n\\n\\n## Create Supabase Database\\n\\nWe have to go to [Supabase](https://supabase.io/) and create an organization and database. Then we can start creating our tables.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={start} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nThe tables we need to create for our project are as follows:\\n\\n> label\\n* `id`: bigint\\n* `title`: varchar\\n* `color`: varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> priority \\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\n> status\\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> users\\n* `email` varchar\\n* `id` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={userTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n> tasks\\n* `id` bigint\\n* `title` varchar\\n* `description` varchar\\n* `start_time` date\\n* `end_time` date\\n* `label` bigint\\n* `priority` bigint\\n* `statuts` bigint\\n* `users` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe created our database tables. The important part here is that as you can see, in our tasks table, label, priority, status and users values \u200b\u200bare defined as bigint. To summarize the reason for this, we relation the label, priority, status and users tables that we created above with the corresponding values \u200b\u200bin our tasks table.\\n\\n:::tip\\n  Add Foreign key relationships steps:\\n\\n1. Got to a table, right click the column you wish to add a foreign key for\\n\\n2. Select \'edit column\'\\n\\n3. Select \'Add foreign key relation\'\\n\\n4. Select the table and column to make a foreign key for\\n\\n5. Click save\\n:::\\n\\n\\nSo we can take  reference their id and use their value in our tasks table.\\n\\nNow let\'s go to the Supabase Table editor and create our constant values.\\n\\n`Label Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Priority Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={priorityValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n`Status Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={statusValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s create a test task to better understand key relation. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, since we have defined the ids of our label, status, priority and users tables as references to our tasks table, we can now use their values.\\n\\nLet\'s look at how we can use this data we created on the Supabase side with refine .\\n\\n## Refine Project Setup\\n\\nNow let\'s refine the task-manager panel. With superplate, we can quickly create a refine project\\n\\n```bash\\n  npx superplate-cli refine-task-manager\\n```\\n\\n```bash\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 refine-task-manager\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to customize theme?: \xb7 css\\n\u2714 Data Provider: \xb7 supabase-data-provider\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nAfter the project setup is loaded, let\'s start by entering our project and making the necessary changes.\\n\\nLet\'s add our supabase url and key to our refine project.\\n\\n\\n```ts title=\\"src/utility/supabaseClient.ts\\"\\nimport { createClient } from \\"@pankod/refine-supabase\\";\\n\\nconst SUPABASE_URL = \\"YOUR_SUPABASE_URL\\";\\nconst SUPABASE_KEY = \\"YOUR_SUPABASE_API_KEY\\";\\n\\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\\n```\\n\\nNow we can access and list the tables we created via the supabase.\\n\\n- Add custom login and signup page in App.tsx\\n\\nOur purpose here is to log in if there is a registered user in the supabase. If you do not have a registered user, saving a user to the supabase with refine.\\n \\n## Custom Login Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useLogin,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport \\"./styles.css\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                 initialValues={{\\n                  email: \\"info@refine.dev\\",\\n                  password: \\"refine-supabase\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\", marginLeft:  12 }}\\n                    onClick={() => push(\\"signup\\")}\\n                  >\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n## Custom Signup Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ISignup {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Signup: React.FC = () => {\\n  const [form] = Form.useForm<ISignup>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign Up\\n    </Title>\\n  );\\n\\n  const signup = async (email: string, password: string) => {\\n    const { error } = await supabaseClient.auth.signUp({\\n      email,\\n      password,\\n    });\\n\\n    if (error) {\\n      return Promise.reject(error);\\n    }\\n  };\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ISignup>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  signup(values.email, values.password);\\n                  push(\\"login\\");\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button\\n                  type=\\"primary\\"\\n                  size=\\"large\\"\\n                  htmlType=\\"submit\\"\\n                  block\\n                  style={{ marginTop: 24 }}\\n                >\\n                  Create Account\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 16 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\" }}\\n                    onClick={() => push(\\"login\\")}\\n                  >\\n                    Sign in\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\n\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nHere we define our login and signup pages. We then use the refine\'s [router-provider](https://refine.dev/docs/api-references/providers/router-provider/) and [useNavigaton](https://refine.dev/docs/core/hooks/navigation/useNavigation/) hooks to switch between login and signup.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe can now create supabase users and log in from our refine interface.\\n \\n## Add Resource\\n**Adding resources according to the table name we created in Supabase**\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\"\\n        },\\n        {\\n          name: \\"tasks\\"\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={list} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nWe can now create lists of tasks and make changes to them.\\n\\n## Add List and Filter \\n\\n```tsx title=\\"src/pages/task/list.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  useMany,\\n  List,\\n  Table,\\n  TextField,\\n  TagField,\\n  DateField,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n  HttpError,\\n  CrudFilters,\\n  Row,\\n  Col,\\n  Card,\\n} from \\"@pankod/refine\\";\\n\\nimport {\\n  ILabel,\\n  IPriority,\\n  ITask,\\n  ITaskFilterVariables,\\n  IStatus,\\n  IAuthUser,\\n} from \\"interfaces\\";\\n\\nimport { Filter } from \\"../task\\";\\n\\nexport const TaskList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, searchFormProps } = useTable<\\n    ITask,\\n    HttpError,\\n    ITaskFilterVariables\\n  >({\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { title, label, priority, users, status, start_time, end_time } =\\n        params;\\n\\n      filters.push(\\n        {\\n          field: \\"title\\",\\n          operator: \\"eq\\",\\n          value: title,\\n        },\\n\\n        {\\n          field: \\"label\\",\\n          operator: \\"eq\\",\\n          value: label,\\n        },\\n\\n        {\\n          field: \\"priority\\",\\n          operator: \\"eq\\",\\n          value: priority,\\n        },\\n\\n        {\\n          field: \\"users\\",\\n          operator: \\"eq\\",\\n          value: users,\\n        },\\n\\n        {\\n          field: \\"status\\",\\n          operator: \\"eq\\",\\n          value: status,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"gte\\",\\n          value: start_time ? start_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"lte\\",\\n          value: start_time ? start_time[1].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"gte\\",\\n          value: end_time ? end_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"lte\\",\\n          value: end_time ? end_time[1].toISOString() : undefined,\\n        }\\n      );\\n      return filters;\\n    },\\n  });\\n\\n  const labelIds = tableProps?.dataSource?.map((item) => item.label) ?? [];\\n  const priorityIds = tableProps?.dataSource?.map((item) => item.priority) ?? [];\\n  const assignedIds = tableProps?.dataSource?.map((item) => item.users) ?? [];\\n  const statusIds = tableProps?.dataSource?.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds,\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds,\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds,\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds,\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col lg={6} xs={24}>\\n        <Card title=\\"Task Filter\\">\\n          <Filter formProps={searchFormProps} />\\n        </Card>\\n      </Col>\\n      <Col lg={18} xs={24}>\\n        <List>\\n          <Table {...tableProps} rowKey=\\"id\\">\\n            <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n            <Table.Column\\n              dataIndex=\\"label\\"\\n              title=\\"Label\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    color={\\n                      labels?.data.find((item) => item.id === value)?.color\\n                    }\\n                    value={\\n                      labels?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"priority\\"\\n              title=\\"Priority\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      priority?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"users\\"\\n              title=\\"Assigned\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    value={\\n                      assigned?.data.find((item) => item.id === value)?.email\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"status\\"\\n              title=\\"Status\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      status?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"start_time\\"\\n              title=\\"Start Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column\\n              dataIndex=\\"end_time\\"\\n              title=\\"Due Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column<ITask>\\n              title=\\"Actions\\"\\n              dataIndex=\\"actions\\"\\n              render={(_, record): React.ReactNode => {\\n                return (\\n                  <Space>\\n                    <ShowButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <EditButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <DeleteButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                  </Space>\\n                );\\n              }}\\n            />\\n          </Table>\\n        </List>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n\\n```tsx title=\\"src/pages/task/filter.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  Form,\\n  FormProps,\\n  Input,\\n  useSelect,\\n  Select,\\n  DatePicker,\\n  Icons,\\n  Button,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { RangePicker } = DatePicker\\n\\nexport const Filter: React.FC<{ formProps: FormProps }> = ({ formProps }) => {\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  return (\\n    <Form layout=\\"vertical\\" {...formProps}>\\n      <Form.Item label=\\"Search\\" name=\\"title\\">\\n        <Input\\n          placeholder=\\"Title\\"\\n          prefix={<Icons.SearchOutlined />}\\n        />\\n      </Form.Item>\\n      <Form.Item label=\\"Label\\" name=\\"label\\">\\n        <Select {...labelSelectProps} allowClear placeholder=\\"Seach Label\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n        <Select {...priorityProps} allowClear placeholder=\\"Seach Priority\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Status\\" name=\\"status\\">\\n        <Select {...statusProps} allowClear placeholder=\\"Search Status\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Assigned\\" name=\\"users\\">\\n        <Select {...assigneProps} allowClear placeholder=\\"Search Assignee\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item>\\n        <Button htmlType=\\"submit\\" type=\\"primary\\">\\n          Filter\\n        </Button>\\n      </Form.Item>\\n    </Form>\\n  );\\n};\\n```\\n\\n```ts title=\\"src/interfaces\\"\\nexport interface IAuthUser {\\n  id: string;\\n  email: string;\\n}\\n\\nexport interface ILabel {\\n  id: string;\\n  title: string;\\n  color: string;\\n}\\n\\nexport interface IPriority {\\n  id: string;\\n  title: string;\\n}\\n\\nexport interface IStatus {\\n  id: string;\\n  title: string\\n}\\n\\nexport interface ITask {\\n  id: string;\\n  title: string;\\n  description: string;\\n  start_time: string;\\n  end_time: string;\\n  label: string;\\n  priority: string;\\n  status: string;\\n  users: string\\n}\\n\\nexport interface ITaskFilterVariables {\\n  title: string;\\n  label: string;\\n  priority: string;\\n  users: string;\\n  status: string;\\n  start_time: [Dayjs, Dayjs];\\n  end_time: [Dayjs, Dayjs];\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskList} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n Using refine\'s [tableSearch](https://refine.dev/docs/guides-and-concepts/search/table-search) and list, we can create our list and perform filtering. \\n\\nAs seen in the example, we listed and showed the task table we created in supabase with refine. Now you can make changes as you want with refine.\\n\\nNow how do we create task? Let\'s examine how we can edit them and see their details.\\n\\n## Create Task\\n\\n```tsx title=\\"src/pages/task/create.tsx\\"\\nimport {\\n  useForm,\\n  Create,\\n  Form,\\n  Input,\\n  Select,\\n  useSelect,\\n  IResourceComponentsProps,\\n  DatePicker,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const TaskCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ILabel>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: prioritySelectPorps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneSelectProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusSelectProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  })\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Title\\"\\n          name=\\"title\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...prioritySelectPorps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne To\\" name=\\"users\\">\\n          <Select {...assigneSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Select Status\\" name=\\"status\\">\\n          <Select {...statusSelectProps}/>\\n        </Form.Item>\\n        <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n        <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={createTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n\\n## Edit Task\\n\\n```tsx title=\\"src/pages/task/edit.tsx\\"\\nimport {\\n  useForm,\\n  Form,\\n  Input,\\n  Select,\\n  Edit,\\n  useSelect,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority,  IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const EditTask: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\",\\n  });\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item label=\\"Title\\" name=\\"title\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...priorityProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Status\\" name=\\"status\\">\\n          <Select {...statusProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne\\" name=\\"users\\">\\n          <Select {...assigneProps} />\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={editTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Show Task\\n\\n```tsx title=\\"src/pages/task/show\\"\\nimport { useShow, Show, Typography, Tag, useOne, DateField } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const TaskShow: React.FC = () => {\\n  const { queryResult } = useShow<ITask>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { data: assigned } = useOne<IAuthUser>({\\n    resource: \\"users\\",\\n    id: record?.users || \\"\\",\\n  });\\n\\n  const { data: label } = useOne<ILabel>({\\n    resource: \\"label\\",\\n    id: record?.label || \\"\\",\\n  });\\n\\n  const { data: priority } = useOne<IPriority>({\\n    resource: \\"priority\\",\\n    id: record?.priority || \\"\\",\\n  });\\n\\n  const { data: status } = useOne<IStatus>({\\n    resource: \\"status\\",\\n    id: record?.status || \\"\\",\\n  });\\n\\n  return (\\n    <Show isLoading={isLoading}>\\n      <Title level={5}>Task:</Title>\\n      <Text>{record?.title || \\"-\\"}</Text>\\n\\n      <Title level={5}>Task Desciption:</Title>\\n      <Text>{record?.description}</Text>\\n\\n      <Title level={5}>Assigned To:</Title>\\n      <Text>\\n        <Tag>{assigned?.data?.email ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Label:</Title>\\n      <Text>\\n        <Tag>{label?.data?.title ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Priority:</Title>\\n      <Text>{priority?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Status:</Title>\\n      <Text>{status?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Start Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.start_time ?? \\"-\\"}/>\\n\\n      <Title level={5}>Due Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.end_time ?? \\"-\\"}/>\\n    </Show>\\n  );\\n};\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nBy using Refine\'s basic views such as [create](https://refine.dev/docs/ui-framewors/antd/components/basic-views/create), [edit](https://refine.dev/docs/ui-frameworks/antd/components/basic-views/edit/) and [show](https://refine.dev/docs/ui-frameworks/antd/components/basic-views/show/), we can now create tasks, edit these tasks and view their details.\\n\\n\\nLet\'s see how to add a dashboard page to our project together.\\n\\n## Add Custom Chart \\n\\n```tsx title=\\"src/components/task/pie.tsx\\"\\nimport React from \\"react\\";\\nimport { Pie } from \\"@ant-design/charts\\";\\n\\ninterface ChartProps {\\n  data: {\\n    type: any;\\n    value: any;\\n  }[];\\n}\\n\\nexport const TaskChart: React.FC<ChartProps> = ({ data }) => {\\n  var config = {\\n    data: data,\\n    angleField: \\"value\\",\\n    colorField: \\"type\\",\\n    radius: 0.9,\\n    label: {\\n      type: \\"inner\\",\\n      offset: \\"-30%\\",\\n      content: function content(_ref: any) {\\n        var percent = _ref.percent;\\n        return \\"\\".concat((percent * 100).toFixed(0), \\"%\\");\\n      },\\n      style: {\\n        fontSize: 14,\\n        textAlign: \\"center\\",\\n      },\\n    },\\n    interactions: [{ type: \\"element-active\\" }],\\n  };\\n  return <Pie {...config} />;\\n};\\n```\\n\\n```tsx title=\\"src/pages/dashboard/index.tsx\\"\\nimport React from \\"react\\";\\nimport { useList, useMany, Row, Col, Card } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\nimport { TaskChart } from \\"components/task/pie\\";\\nimport { groupBy } from \\"helper\\";\\n\\nexport const Dashboard = () => {\\n  const taskList = useList<ITask>({\\n    resource: \\"tasks\\",\\n  });\\n\\n  const labelIds = taskList.data?.data.map((item) => item.label) ?? [];\\n  const priorityIds = taskList.data?.data.map((item) => item.priority) ?? [];\\n  const assignedIds = taskList.data?.data.map((item) => item.users) ?? [];\\n  const statusIds = taskList.data?.data.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds || [],\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds || [],\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds || [],\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds || [],\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              labels?.data.map((i) => {\\n                return { type: i.title, value: groupBy(labelIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              priority?.data.map((i) => {\\n                return { type: i.title, value: groupBy(priorityIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              status?.data.map((i) => {\\n                return { type: i.title, value: groupBy(statusIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              assigned?.data.map((i) => {\\n                return { type: i.email, value: groupBy(assignedIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashOverview} alt=\\"overview\\" />\\n</div>\\n<br/>\\n\\n\\n \\nFinal version of our `<App.tsx/>`.\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      DashboardPage={Dashboard}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\",\\n          list: UserList,\\n        },\\n        {\\n          name: \\"tasks\\",\\n          list: TaskList,\\n          edit: EditTask,\\n          create: TaskCreate,\\n          show: TaskShow,\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\nOur project is done. Lets see how its look like.\\n\\n## Overview Project\\n\\n`Overview`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Task Filter`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={filter} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Dashboard Page`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashboard} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, we made a simple and short task manager application using refine on our front end and using its data-provider. \\n\\n[Here is repo](https://github.com/pankod/refine/tree/master/examples/blog/issueTracker) \\n\\nFor more information about Refine: [Refine Github Page](https://github.com/pankod/refine)\\n\\nFor other examples and articles that will interest you with refine:  [https://refine.dev/blog/](https://refine.dev/blog/)\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-supabase-issue-tracker-ifuh4?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-supabase-issue-tracker\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"e-mail-subscription-panel-with-refine","metadata":{"permalink":"/blog/e-mail-subscription-panel-with-refine","source":"@site/blog/2021-10-25-mail-subscription-with-refine.md","title":"Create E-mail Subscription Panel with Refine and Strapi","description":"We will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We\u2019ll use refine to develop the frontend easily and strapi for backend solutions.","date":"2021-10-25T00:00:00.000Z","formattedDate":"October 25, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":7.805,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase"},"nextItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"}},"content":"import auth from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/auth.png\';\\nimport create from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/create.gif\';\\nimport dummy_data from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/dummy_data.png\';\\nimport login from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/login.gif\';\\nimport messages from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/messages.png\';\\nimport overview from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/overview.png\';\\nimport refine_messages from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_messages.png\';\\nimport refine_subs from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_subs.png\';\\nimport refine_welcome from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_welcome.png\';\\nimport send from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/send.gif\';\\nimport signin from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/signin.png\';\\nimport strapi from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/strapi.png\';\\nimport subscribers from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/subscribers.png\';\\n\\nWe will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We\u2019ll use refine to develop the frontend easily and strapi for backend solutions.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\'s start by creating our strapi and refine projects.\\n\\n## Creating API with `Strapi`\\n```bash\\nnpx create-strapi-app strapi-email-subscription-api --quickstart\\n```\\n\\nAfter the project is loaded, the admin panel will open automatically open in the browser. We need to create an admin user in order to log in to the strapi.\\n\\n<img src={strapi} alt=\\"strapi\\" />\\n\\n\\nWith the information we will create here, we can now enter the strapi and start shaping our backend.\\n\\nAfter logging into the Strapi interface, we have two collection models that we need to create for our e-mail subscription project.\\n\\nWe will create these collections from the Collection-Types Builder part of the strapi.\\n\\n> Subscribers\\n* `name` text field\\n* `email` Email\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={subscribers} alt=\\"subscribers\\" />\\n</div>\\n<br />\\n \\n\\n> Messages\\n* `subject` text field\\n* `text` text field\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={messages} alt=\\"messages\\" />\\n</div>\\n<br />\\n \\n\\nWith these collections and features we have created, we can now create subscribers, delete them and make changes to them.\\n\\n## Creating panel with `refine`\\n\\nNow let\'s refine the subscription panel. With [superplate](https://github.com/pankod/superplate), we can quickly create a refine project\\n\\n```bash\\nnpx superplate-cli email-subscription-panel\\n```\\n\\nSelect the following options to complete the CLI wizard:\\n\\n```bash\\n? Select your project type:\\n> refine\\n\\n? Package manager:\\n> Npm\\n\\n? Do you want to customize the theme?:\\n> No (Ant Design default theme)\\n\\n? Data Provider: \\n> Strapi\\n\\n? Do you want to customize layout?:\\n> Yes, I want\\n\\n? i18n - Internationalization: \\n> No\\n```\\n\\nAfter the upload is finished, let\'s go into our project and see how it looks.\\n\\n```bash\\ncd email-subscription-panel\\nnpm run dev\\n```\\n\\nThis is a example Refine project:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_welcome} alt=\\"refine_welcome\\" />\\n</div>\\n<br />\\n\\nLet\'s list our messages and subscribers with refine. Here are the changes we need to make:\\n\\n* Change Strapi API URL from refine\\n* Adding resources according to the collection name we created in Strapi\\n\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi\\";\\nimport strapiAuthProvider from \\"authProvider\\";\\nimport { Header, Layout, OffLayoutArea } from \\"components\\";\\n\\n\\nfunction App() {\\n - const API_URL = \\"your-strapi-api-url\\";\\n + const API_URL = \\"http://localhost:1337\\";\\n\\n  const { authProvider, axiosInstance } = strapiAuthProvider(API_URL);\\n  const dataProvider = DataProvider(API_URL, axiosInstance);\\n  return (\\n    <Refine\\n      dataProvider={dataProvider}\\n      authProvider={authProvider}\\n      Header={Header}\\n      Layout={Layout}\\n      OffLayoutArea={OffLayoutArea}\\n      routerProvider={routerProvider}\\n      resources={[{\\n        name: \\"subscribers\\",\\n      }, {\\n        name: \\"messages\\",\\n      }]} \\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\nAfter adding the resources, we need to define a user in the strapi in order to be able to login to the refine. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={auth} alt=\\"auth\\" />\\n</div>\\n<br />\\n\\nLet\'s login with this user we created\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"login\\" />\\n</div>\\n\\n \\nWe can now list subscribers and messages and make changes to our list. Before doing this, let\'s create test users and messages on the strapi side. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dummy_data} alt=\\"dummy_data\\" />\\n</div>\\n<br />\\n \\n\\n\\nCreate SubscriberList.tsx and MessagesList.tsx file under the pages folder. Then, let\'s create our component as follows with the components and hooks that come with refine.\\n\\n## Subscriber List\\n\\n```tsx title=\\"/src/pages/subscriber/SubscriberList.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  List,\\n  Table,\\n  DateField,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ISubscriber } from \\"interfaces\\";\\n\\nexport const SubscriberList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps } = useTable<ISubscriber>();\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"Id\\" />\\n        <Table.Column dataIndex=\\"name\\" title=\\"Name\\" />\\n        <Table.Column dataIndex=\\"email\\" title=\\"E-mail\\" />\\n        <Table.Column\\n          dataIndex=\\"created_at\\"\\n          title=\\"createdAt\\"\\n          render={(value) => <DateField format=\\"LLL\\" value={value} />}\\n        />\\n        <Table.Column<ISubscriber>\\n          title=\\"Unsubscribe\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record): React.ReactNode => {\\n            return (\\n              <DeleteButton size=\\"small\\" recordItemId={record.id} hideText />\\n            );\\n          }}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n## Message List\\n\\n```tsx title=\\"/src/pages/mail/MessageList.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  List,\\n  Table,\\n  DateField,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMail } from \\"interfaces\\";\\n\\nexport const MessageList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps } = useTable<IMail>();\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"Id\\" />\\n        <Table.Column dataIndex=\\"subject\\" title=\\"Subject\\" />\\n        <Table.Column dataIndex=\\"text\\" title=\\"Body\\" />\\n        <Table.Column \\n          dataIndex=\\"created_at\\"\\n          title=\\"createdAt\\"\\n          render={(value) => <DateField format=\\"LLL\\" value={value} />}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n```\\n\\n```tsx title=\\"/src/interfaces/intex.d.ts\\"\\nexport interface ISubscriber {\\n  id: any;\\n  name: string;\\n  email: string;\\n  created_at: string;\\n}\\n\\nexport interface IMail {\\n  subject: string;\\n  text: string;\\n  to: string;\\n  create_at: string;\\n}\\n```\\n\\nIn this component:\\n\\nWe used refine\'s [list](https://refine.dev/docs/examples/list/useSimpleList) and [table](https://refine.dev/docs/api-references/hooks/table/useTable/) to show our subscribers and messages.\\n\\nNow let\'s see how our subscriber panel looks like:\\n\\n`Subscriber:`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_subs} alt=\\"refine_subs\\" />\\n</div>\\n<br />\\n\\n\\n`Messages:`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_messages} alt=\\"refine_messages\\" />\\n</div>\\n<br />\\n\\n\\nAs you can see, we were able to list our subscribers and e-mails very simply with refine. Now let\'s examine how we can create subscribers and messages from our interface.\\n\\n## Create Subscriber\\n\\n```tsx title=\\"/src/pages/subscriber/create.tsx\\"\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  useForm,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ICreateSubscriber } from \\"interfaces\\";\\n\\nexport const CreateSubscriber: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ICreateSubscriber>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item label=\\"Name\\" name=\\"name\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"E-mail\\"\\n          name=\\"email\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n  \\n## Create Message\\n\\n```tsx title=\\"/src/pages/mail/create.tsx\\"\\nimport React, { useState } from \\"react\\";\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  useForm,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport ReactMarkdown from \\"react-markdown\\";\\nimport ReactMde from \\"react-mde\\";\\nimport \\"react-mde/lib/styles/css/react-mde-all.css\\";\\nimport { IMail } from \\"interfaces\\";\\n\\nexport const MailCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMail>();\\n  const [selectedTab, setSelectedTab] = useState<\\"write\\" | \\"preview\\">(\\"write\\");\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      {console.log(\\"create\\")}\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Subject\\"\\n          name=\\"subject\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"Body\\"\\n          name=\\"text\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <ReactMde\\n            selectedTab={selectedTab}\\n            onTabChange={setSelectedTab}\\n            generateMarkdownPreview={(markdown: any) =>\\n              Promise.resolve(<ReactMarkdown>{markdown}</ReactMarkdown>)\\n            }\\n          />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"To\\"\\n          name=\\"to\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\nUsing refine\'s [form](https://refine.dev/docs/api-references/hooks/form/useForm) and [create](https://refine.dev/docs/ui-framewors/antd/components/basic-views/create) components, we can now create subscribers and messages with refine.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br />\\n  \\n\\nWe\'re done with our panel. We can now list, create and delete subscribers. Finally, the step of sending real mails using our panel and strapi is left. Let\'s see how we do this.\\n\\n\\n## Strapi E-mail Plugin\\n\\nIn order to send mail via Strapi, we need to install the [strapi-email](https://strapi.io/documentation/developer-docs/latest/development/plugins/email.html#programmatic-usage) plugin in our api project that we created above.\\n\\nLet\'s open our API project that we created and download the email plugin.\\n\\n```bash\\ncd strapi-email-subscription-api\\nnpm install strapi-provider-email-sendgrid --save\\n```\\n\\nAfter installing your plugin you will need to add some settings in config/plugins.js. If this file doesn\'t exists, you\'ll need to create it. \\n\\n### Configure your provider\\n\\n`Path \u2014 ./config/plugins.js`\\n\\n```jsx\\nmodule.exports = ({ env }) => ({\\n    email: {\\n      provider: \'sendgrid\',\\n      providerOptions: {\\n        apiKey: env(\'SENDGRID_API_KEY\'),\\n      },\\n      settings: {\\n        defaultFrom: \'your-email-adress\',\\n        defaultReplyTo: \'your-email-adress\',\\n        testAddress: \'your-email-adress\',\\n      },\\n    },\\n  });\\n```\\n\\n:::tip\\nStrapi sends emails via sendgrid. That\'s why you need to create a [SendGrid](https://sendgrid.com/) account and get an api-key.\\n:::\\n\\nNow, let\'s send the text and subject in the collection of messages we created over the strapi as parameters to the send() function of the email plugin.\\n\\n\\n\\n```jsx title=\\"api/messages/controllers/messages.js\\"\\nconst { parseMultipartData, sanitizeEntity } = require(\\"strapi-utils\\");\\n\\nmodule.exports = {\\n  async create(ctx) {\\n    let entity;\\n    if (ctx.is(\\"multipart\\")) {\\n      const { data, files } = parseMultipartData(ctx);\\n      entity = await strapi.services.messages.create(data, { files });\\n    } else {\\n      entity = await strapi.services.messages.create(ctx.request.body);\\n    }\\n\\n    entity = sanitizeEntity(entity, { model: strapi.models.messages });\\n\\n    const { subject, text } = entity;\\n\\n    const worker = (await strapi.services.subscribers.find()).map(\\n      (subscriber) => {\\n        let to = subscriber.email;\\n\\n        return strapi.plugins[\\"email\\"].services.email.send({\\n          subject,\\n          text,\\n          to,\\n        });\\n      }\\n    );\\n\\n    await Promise.all(worker);\\n\\n    return entity;\\n  },\\n};\\n```\\n\\nOur project is finished. Let\'s try it now.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s send the same e-mail to our subscribers shown in the picture at once.\\n\\n<br />\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={send} alt=\\"send\\" />\\n</div>\\n<br />\\n\\nSending mail was successful. As you can see, we were able to send the same email to all subscribers by sending a single email.\\n\\n[Here is repo](https://github.com/pankod/refine/tree/master/examples/blog/mailSubscription)"},{"id":"migrating-a-react-admin-application-to-refine","metadata":{"permalink":"/blog/migrating-a-react-admin-application-to-refine","source":"@site/blog/2021-10-6-migrating-react-admin-application-to-refine.md","title":"Migrating a React-Admin Application to Refine","description":"Recently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity.","date":"2021-10-06T00:00:00.000Z","formattedDate":"October 6, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react-admin","permalink":"/blog/tags/react-admin"},{"label":"adminpanel","permalink":"/blog/tags/adminpanel"},{"label":"crud","permalink":"/blog/tags/crud"}],"readingTime":5.77,"truncated":true,"authors":[{"name":"Umut \xd6zdemir","title":"Frontend Developer","url":"https://github.com/miyavsu-limited","imageURL":"https://github.com/miyavsu-limited.png","key":"umut"}],"prevItem":{"title":"Create E-mail Subscription Panel with Refine and Strapi","permalink":"/blog/e-mail-subscription-panel-with-refine"},"nextItem":{"title":"Build Fast and Customizable Admin Panel with NestJS","permalink":"/blog/customizable-admin-panel-with-nestjs"}},"content":"import sider from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/sider.png\';\\nimport react_admin from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin.png\';\\nimport refine_table from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/refine_table.png\';\\nimport react_admin_create from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin_create.png\';\\n\\nRecently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity. My mission was to migrate it and it took one and a half days for me to rewrite the panel in refine.\\n\\n\x3c!--truncate--\x3e\\n### Migrating a React-Admin Application to refine\\n\\n[refine](https://refine.dev/) is an extremely customizable [Ant Desig](https://ant.design/) based [React](https://reactjs.org/) framework for data-intensive applications and it handles most of the CRUD functionality that can be a requirement in many applications, without much effort. Providing the rest of the desired functionality (outside CRUD) is up to you, like in any <strong>React</strong> application.\\n\\n[React-Admin](https://marmelab.com/react-admin/) is an amazing B2B application framework based on [Material Design](https://material.io/), using [Material UI](https://mui.com/). It provides ready-to-fetch-data components, so you just compose them together to create an application.\\n\\n<strong>refine</strong> is different in the way it makes you compose your application. refine directly provides <strong>Ant Design</strong> components and some hooks to work with those components. Hooks give you the required props for those Ant Design components.\\n\\nIt is, also, one step forward towards the dream of <strong>making it headless</strong>.\\n\\nTo learn more about refine, see: https://refine.dev/docs/getting-started/overview\\n\\n\\n|  <img src={sider} alt=\\"sider\\" /> | \\n|:--:| \\n| *Our panel has 7 resources (all listable), which 4 of them must have create and edit pages, 6 of them must be exportable to `.csv` files and some of those resources have images, all images must be uploaded in `base64` format.* |\\n\\nThis is how it looks before the migration (React-Admin):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nAnd this is how it looks like after the migration (refine):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nBoth of these images show a list page of a resource (campaign).\\n\\n## Migrating Listing Pages\\n\\nList pages have one/more tables inside them. Ideally, all table state should be managed by the framework in use.\\n\\nrefine is very flexible with tables. You can put them anywhere, configure it as much as you want with [useTable](https://refine.dev/docs/api-references/hooks/table/useTable/). See the [fineFoods example](https://refine.dev/demo/) and [it\'s code](https://github.com/pankod/refine/blob/master/examples/fineFoods/admin/src/pages/categories/list.tsx).\\n\\nHere is an example list page from React-Admin that shows you the list of `id`,`name`, `isActive`, `startDate`, `endDate` from the API endpoint for `campaigns` resource.\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List as ReactAdminList,\\n    Datagrid,\\n    TextField,\\n    BooleanField,\\n    EditButton,\\n} from \\"react-admin\\";\\n\\nimport LocalizeDateField from \\"../../fields/LocalizeDateField\\";\\n\\nconst List = (props) => (\\n    <ReactAdminList {...props}>\\n        <Datagrid>\\n            <TextField source=\\"id\\" label=\\"ID\\" />\\n            <TextField source=\\"name\\" label=\\"Name\\" />\\n            <BooleanField source=\\"isActive\\" label=\\"Active\\" />\\n            <LocalizeDateField source=\\"startDate\\" />\\n            <LocalizeDateField source=\\"endDate\\" />\\n            <EditButton basePath=\\"/campaigns\\" />\\n        </Datagrid>\\n    </ReactAdminList>\\n);\\n\\nexport default List;\\n```\\n\\nAnd looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nHere\'s the code that renders this same list in refine:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List,\\n    Table,\\n    Space,\\n    Button,\\n    BooleanField,\\n    DateField,\\n    CreateButton,\\n    EditButton,\\n    ExportButton,\\n    Icons,\\n    useTable,\\n    getDefaultSortOrder,\\n    useExport,\\n    useDeleteMany,\\n    IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ICampaign } from \\"interfaces\\";\\n\\nexport const CampaignsList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<ICampaign>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n    });\\n\\n    const { isLoading: isExportLoading, triggerExport } = useExport();\\n\\n    const [selectedRowKeys, setSelectedRowKeys] = React.useState<React.Key[]>(\\n        [],\\n    );\\n\\n    const handleSelectChange = (selectedRowKeys: React.Key[]) => {\\n        setSelectedRowKeys(selectedRowKeys);\\n    };\\n\\n    const rowSelection = {\\n        selectedRowKeys,\\n        onChange: handleSelectChange,\\n    };\\n\\n    const { mutate, isLoading } = useDeleteMany<ICampaign>();\\n\\n    const deleteSelectedItems = () => {\\n        mutate(\\n            {\\n                resource: \\"campaigns\\",\\n                ids: selectedRowKeys.map(String),\\n                mutationMode: \\"undoable\\",\\n            },\\n            {\\n                onSuccess: () => {\\n                    setSelectedRowKeys([]);\\n                },\\n            },\\n        );\\n    };\\n\\n    const hasSelected = selectedRowKeys.length > 0;\\n\\n    return (\\n        <List\\n            pageHeaderProps={{\\n                subTitle: hasSelected && (\\n                    <Button\\n                        type=\\"text\\"\\n                        onClick={() => deleteSelectedItems()}\\n                        loading={isLoading}\\n                        icon={\\n                            <Icons.DeleteOutlined style={{ color: \\"green\\" }} />\\n                        }\\n                    >\\n                        Delete\\n                    </Button>\\n                ),\\n                extra: (\\n                    <Space>\\n                        <CreateButton />\\n                        <ExportButton\\n                            onClick={triggerExport}\\n                            loading={isExportLoading}\\n                        />\\n                    </Space>\\n                ),\\n            }}\\n        >\\n            <Table {...tableProps} rowSelection={rowSelection} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                    width=\\"70px\\"\\n                />\\n                <Table.Column\\n                    dataIndex=\\"name\\"\\n                    title=\\"Name\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"name\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"isActive\\"\\n                    title=\\"Active\\"\\n                    render={(isActive) => <BooleanField value={isActive} />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"isActive\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"startDate\\"\\n                    title=\\"Start Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"startDate\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"endDate\\"\\n                    title=\\"End Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"endDate\\", sorter)}\\n                />\\n                <Table.Column<ICampaign>\\n                    fixed=\\"right\\"\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, { id }) => <EditButton recordItemId={id} />}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nIt is long. Because we had to handle selection and bulk delete button manually. That\'s because refine is decoupled from Ant Design components\' code, too. But the advantage here is that you use Ant Design. You can use the Ant Design\'s Table as however you like, and then connect its data with refine. The point is customizability.\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nIn refine, we use Ant Design\'s [Table](https://ant.design/components/table/) components.\\n\\n## Migrating Create/Edit Pages\\n\\nA resource creation page\'s code looked like this in React-Admin:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    required,\\n    Create as ReactAdminCreate,\\n    SimpleForm,\\n    BooleanInput,\\n    TextInput,\\n    DateTimeInput,\\n} from \\"react-admin\\";\\n\\nconst Create = (props: any) => (\\n    <ReactAdminCreate {...props}>\\n        <SimpleForm>\\n            <TextInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"name\\"\\n                validate={[required()]}\\n            />\\n            <BooleanInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"isActive\\"\\n                label=\\"Active\\"\\n            />\\n            <DateTimeInput\\n                source=\\"startDate\\"\\n                label=\\"Start Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n            <DateTimeInput\\n                source=\\"endDate\\"\\n                label=\\"End Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n        </SimpleForm>\\n    </ReactAdminCreate>\\n);\\n\\nexport default Create;\\n```\\n\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin_create} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nFor refine, code of our campaign create page looks like:\\n\\n```tsx\\nimport {\\n    Create,\\n    DatePicker,\\n    Form,\\n    Input,\\n    IResourceComponentsProps,\\n    Switch,\\n    useForm,\\n} from \\"@pankod/refine\\";\\nimport dayjs from \\"dayjs\\";\\n\\nexport const CampaignsCreate: React.FC<IResourceComponentsProps> = () => {\\n    const { formProps, saveButtonProps } = useForm();\\n\\n    return (\\n        <Create saveButtonProps={saveButtonProps}>\\n            <Form\\n                {...formProps}\\n                layout=\\"vertical\\"\\n                initialValues={{ isActive: false }}\\n            >\\n                <Form.Item\\n                    label=\\"Name\\"\\n                    name=\\"name\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Is Active\\"\\n                    name=\\"isActive\\"\\n                    valuePropName=\\"checked\\"\\n                >\\n                    <Switch />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Start Date\\"\\n                    name=\\"startDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"End Date\\"\\n                    name=\\"endDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n            </Form>\\n        </Create>\\n    );\\n};\\n```\\n\\nIn both refine and React-Admin, by default, there aren\'t much differences between new resource page\'s code and resource edit page\'s code.\\n\\nAlso note that for both refine and React-Admin, this is all customizable. These code examples and screenshots mean little or no extra customization in resource list/create/edit pages.\\n\\nAdvantage of refine is that you use Ant Design directly. Let\'s assume you have your own way around your Ant Design application. refine doesn\'t interfere. Instead, it provides you the necessary data for your Ant Design application. This way, refine gives you all the freedom to customize all the components as you wish.\\n\\nHappy hacking with refine \ud83e\ude84"},{"id":"customizable-admin-panel-with-nestjs","metadata":{"permalink":"/blog/customizable-admin-panel-with-nestjs","source":"@site/blog/2021-10-4-admin-panel-with-nestjs.md","title":"Build Fast and Customizable Admin Panel with NestJS","description":"We will prepare a simple `job-posting` application. We will also use the refine framework for the admin panel. The project will consist of two parts, api and admin.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"nestjs","permalink":"/blog/tags/nestjs"},{"label":"crud","permalink":"/blog/tags/crud"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":3.93,"truncated":true,"authors":[{"name":"Y\u0131ld\u0131ray \xdcnl\xfc","title":"Software Developer","url":"https://github.com/yildirayunlu","imageURL":"https://github.com/yildirayunlu.png","key":"yildiray"}],"prevItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"},"nextItem":{"title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi"}},"content":"import api from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/api.png\';\\nimport refine_sample from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/refine_sample.png\';\\nimport refine_job from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/refine_job.png\';\\n\\nIn this article, we will prepare a simple `job-posting` application. We will also use the [refine](https://github.com/pankod/refine) framework for the **admin panel**. The project will consist of two parts, api and admin.\\n\\n\x3c!--truncate--\x3e\\n\\nAll the steps described are in this [repo](https://github.com/pankod/refine/tree/master/examples/blog/jobPosting).\\n\\n## Intro\\n[NestJS](https://github.com/nestjs/nest) is a framework for building efficient, scalable Node.js server-side applications. With [nestjsx/crud](https://github.com/nestjsx/crud) we can add CRUD functions quickly and effortlessly on this framework.\\n\\n## NestJS Rest Api\\n\\nTo start playing with NestJS you should have node (>= 10.13.0, except for v13) and [npm](https://nodejs.org) installed.\\n\\n**Create Project Folder**\\n\\n```bash\\nmkdir job-posting-app\\ncd job-posting-app\\n```\\n\\nSetting up a new project is quite simple with the [Nest CLI](https://docs.nestjs.com/cli/overview). With npm installed, you can create a new Nest project with the following commands in your OS terminal:\\n\\n```bash\\nnpm i -g @nestjs/cli\\nnest new api\\n```\\n\\n[TypeORM](https://github.com/typeorm/typeorm) is definitely the most mature ORM available in the node.js world. Since it\'s written in TypeScript, it works pretty well with the Nest framework. I chose mysql as database. TypeORM supports many databases (MySQL, MariaDB, Postgres etc.)\\n\\nTo start with this library we have to install all required dependencies:\\n\\n```bash\\nnpm install --save @nestjs/typeorm @nestjs/config typeorm mysql2\\n```\\n\\n- Create an [.env.example](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/.env.example) file. Here we will save the database information.\\n- Create and configured a [docker-compose](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/docker-compose.yml) file for MySQL.\\n- Create a [ormconfig.ts](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/ormconfig.ts) file for migrations.\\n- Add the following scripts to the `package.json` file for migrations.\\n```bash\\n\\"typeorm\\": \\"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\\",\\n\\"db:migration:generate\\": \\"npm run typeorm -- migration:generate\\",\\n\\"db:migration:run\\": \\"npm run typeorm -- migration:run\\",\\n\\"db:migration:revert\\": \\"npm run typeorm -- migration:revert\\",\\n\\"db:refresh\\": \\"npm run typeorm schema:drop && npm run db:migration:run\\"\\n```\\n- Import the `TypeOrmModule` into the `app.module.ts`\\n\\n**Install nestjsx-crud**\\nI used [nestjsx-crud](https://github.com/nestjsx/crud) library because it makes crud functions easier.\\n\\n```bash\\nnpm i @nestjsx/crud @nestjsx/crud-typeorm class-transformer class-validator\\n```\\n\\n*Since the steps to create Entities Contorllers, and services are very long, I do not explain step by step. You can check the [repo](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app) for details.*\\n\\nIt created these end-points automatically with nestjsx/crud.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={api} alt=\\"api\\" />\\n</div>\\n<br />\\n\\n## Refine Admin Panel\\n\\n**Now let\'s refine the admin panel.** With [Superplate](https://pankod.github.io/superplate/docs), we can quickly create a `refine` project.\\n\\n```bash\\nnpx superplate-cli admin\\n```\\n\\nAnswer as below:\\n\\n```\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 admin\\n\u2714 Do you want to customize theme?: \xb7 less\\n\u2714 Data Provider: \xb7 nestjsx-crud-data-provider\\n\u2714 Auth Provider: \xb7 none\\n\u2714 Do you want to add an example page? \xb7 example-resource\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\n```bash\\ncd admin\\nnpm run dev\\n```\\n\\nRefine\'s sample application will welcome you.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_sample} alt=\\"refine_sample\\" />\\n</div>\\n<br />\\n\\nChange api url in [admin/src/App.tsx](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/admin/src/App.tsx)\\n\\n```\\nconst API_URL = \\"http://localhost:3000\\";\\n```\\n\\nLet\'s add the listing page in refine for the `companies` crud end-point.\\n\\n```tsx title=\\"/admin/src/pages/companies/list.tsx\\"\\nimport {\\n  List,\\n  Table,\\n  TextField,\\n  useTable,\\n  IResourceComponentsProps,\\n  getDefaultSortOrder,\\n  Space,\\n  EditButton,\\n  DeleteButton,\\n  TagField,\\n  ShowButton,\\n} from \\"@pankod/refine\\";\\nimport { ICompany } from \\"interfaces\\";\\n\\nexport const CompanyList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, sorter } = useTable<ICompany>({\\n    initialSorter: [\\n      {\\n        field: \\"id\\",\\n        order: \\"desc\\",\\n      },\\n    ],\\n  });\\n\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column\\n          dataIndex=\\"id\\"\\n          key=\\"id\\"\\n          title=\\"ID\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"name\\"\\n          key=\\"name\\"\\n          title=\\"Name\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"name\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"location\\"\\n          key=\\"location\\"\\n          title=\\"Location\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"location\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"isActive\\"\\n          key=\\"isActive\\"\\n          title=\\"Is Active\\"\\n          render={(value) => <TagField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"status\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column<ICompany>\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record) => (\\n            <Space>\\n              <EditButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <ShowButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <DeleteButton hideText size=\\"small\\" recordItemId={record.id} />\\n            </Space>\\n          )}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n```\\n\\nSimilarly, let\'s add the create, edit and jobs crud pages under the pages folder.\\n\\nNext, let\'s define the resources in `<Refine>` (App.tsx):\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport nestjsxCrudDataProvider from \\"@pankod/refine-nestjsx-crud\\";\\n\\nimport \\"styles/antd.less\\";\\n\\nimport {\\n    CompanyList,\\n    CompanyShow,\\n    CompanyCreate,\\n    CompanyEdit,\\n} from \\"./pages/companies\\";\\nimport {\\n    Title,\\n    Header,\\n    Sider,\\n    Footer,\\n    Layout,\\n    OffLayoutArea,\\n} from \\"components\\";\\nimport { JobList, JobCreate, JobEdit } from \\"pages/jobs\\";\\n\\nfunction App() {\\n    const API_URL = \\"http://localhost:3000\\";\\n    const dataProvider = nestjsxCrudDataProvider(API_URL);\\n\\n    return (\\n        <Refine\\n            dataProvider={dataProvider}\\n            Title={Title}\\n            Header={Header}\\n            Sider={Sider}\\n            Footer={Footer}\\n            Layout={Layout}\\n            OffLayoutArea={OffLayoutArea}\\n            routerProvider={routerProvider}\\n            resources={[\\n                {\\n                    name: \\"companies\\",\\n                    list: CompanyList,\\n                    create: CompanyCreate,\\n                    edit: CompanyEdit,\\n                    show: CompanyShow,\\n                },\\n                {\\n                    name: \\"jobs\\",\\n                    list: JobList,\\n                    create: JobCreate,\\n                    edit: JobEdit,\\n                    show: CompanyShow,\\n                },\\n            ]}\\n        />\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_job} alt=\\"refine_job\\" />\\n</div>\\n<br />"},{"id":"create-a-feedback-admin-panel-with-refine-and-strapi","metadata":{"permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi","source":"@site/blog/2021-10-4-feedback-admin-panel.md","title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","description":"We will quickly create an api with Strapi and then develop its frontend with refine. Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":6.85,"truncated":true,"authors":[{"name":"Salih \xd6zdemir","title":"Software Developer","url":"https://github.com/salihozdemir","imageURL":"https://github.com/salihozdemir.png","key":"salih"}],"prevItem":{"title":"Build Fast and Customizable Admin Panel with NestJS","permalink":"/blog/customizable-admin-panel-with-nestjs"},"nextItem":{"title":"Let\'s Build an App to Manage Your Hackathons with Refine","permalink":"/blog/manage-hackathons-with-refine"}},"content":"import refine_welcome from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/refine_welcome.png\';\\nimport header from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/header.png\';\\nimport strapi_content from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/strapi_content.png\';\\nimport signin from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/signin.png\';\\nimport user from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/user.png\';\\nimport feedback from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback.png\';\\nimport feedbacks from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedbacks.png\';\\nimport feedback_overview from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback_overview.gif\';\\nimport widgets from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/widgets.gif\';\\n\\n\\nIn this article, we will create a panel where we can manage the feedback we receive from our web application. \\n\\n\x3c!--truncate--\x3e\\n\\nWe will quickly create an api with [Strapi.io](https://strapi.io) and then develop its frontend with [refine](https://refine.dev). Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.\\n\\nFeatures that our panel will have:\\n\\n- Authentication with strapi.io\\n- A page to list feedbacks\\n- Mutation on Feedbacks\\n\\n### Creating api with `Strapi`\\n\\nLet\'s create our backend project with Strapi\'s [quick start guide](https:/strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html).\\n\\n```bash\\nnpx create-strapi-app strapi-feedback-api --quickstart\\n```\\n\\nAfter the installation is complete, the tab will automatically open in the browser. Here, let\'s create a `feedback` collection with Content-Types Builder.\\n\\nQuite simply, a feedback should have a `description` text field, A `page` text field that shows the page the feedback was sent from, and a `type` enumeration field indicating the type of feedback (issue, idea, other, archive).\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={strapi_content} alt=\\"content\\" />\\n</div>\\n<br />\\n\\n### Creating panel with `refine`\\n\\nLet\'s create our frontend project with refine\'s [setting up guide](https://refine.dev/docs/#setting-up).\\n\\nThere are two alternative methods to set up a refine application. We will quickly create our application with [superplate](https://pankod.github.io/superplate).\\n\\n```bash\\nnpx superplate-cli refine-feedback-client\\n```\\n\\nSelect the following options to complete the CLI wizard:\\n\\n```\\n? Select your project type:\\n\u276f refine\\n\\n? What will be the name of your app:\\nrefine-strapi-web\\n\\n? Package manager:\\n\u276f Npm\\n\\n? Do you want to customize the theme?:\\n\u276f No (Ant Design default theme)\\n\\n? Data Provider :\\n\u276f Strapi\\n\\n? Do you want to customize layout?\\n\u276f Yes, I want\\n\\n? i18n - Internationalization:\\n\u276f No\\n```\\n\\nAfter the installation is completed, Strapi-specific [data provider](https://github.com/pankod/refine/blob/master/packages/strapi), auth provider, and also layout components that we can change the default view of Refine with the custom layout option will be included in our project.\\n\\nNow, bootstrap the app with the following command:\\n\\n```bash\\nnpm run dev\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_welcome} alt=\\"welcome\\" />\\n</div>\\n<br />\\n\\nNow let\'s list the changes we will make:\\n\\n- Change our Strapi API URL\\n- Remove components that we will not use when changing the refinement look\\n- Adding resources according to the collection name we created in Strapi\\n\\n```diff\\n+ import { Refine } from \\"@pankod/refine\\";\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi\\";\\nimport strapiAuthProvider from \\"authProvider\\";\\nimport {\\n- Title,\\n  Header,\\n- Sider,\\n- Footer,\\n  Layout,\\n  OffLayoutArea,\\n} from \\"components\\";\\n\\nfunction App() {\\n-  const API_URL = \\"your-strapi-api-url\\";\\n+  const API_URL = \\"http://localhost:1337\\";\\n\\n  const { authProvider, axiosInstance } = strapiAuthProvider(API_URL);\\n  const dataProvider = DataProvider(API_URL, axiosInstance);\\n  return (\\n    <Refine\\n      dataProvider={dataProvider}\\n      authProvider={authProvider}\\n-     Title={Title}\\n      Header={Header}\\n-     Sider={Sider}\\n-     Footer={Footer}\\n      Layout={Layout}\\n      OffLayoutArea={OffLayoutArea}\\n      routerProvider={routerProvider}\\n      resources={[\\n        {\\n          name: \\"feedbacks\\",\\n        },\\n      ]}\\n    />\\n  );\\n}\\n \\n\\nexport default App;\\n```\\n\\nAfter adding the resource, our auth provider was activated.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\nNow let\'s create a user on the Strapi to be able to login to the application.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={user} alt=\\"user\\" />\\n</div>\\n<br />\\n\\nWe created a user and login to the application with this user.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback} alt=\\"feedback\\" />\\n</div>\\n<br />\\n\\nLet\'s customize the layout component, remove the sider and add a header.\\n\\n### Custom Layout\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout as AntLayout } from \\"antd\\";\\n\\nimport { LayoutProps } from \\"@pankod/refine\\";\\n\\nexport const Layout: React.FC<LayoutProps> = ({\\n  children,\\n  Header,\\n  OffLayoutArea,\\n}) => {\\n  return (\\n    <AntLayout style={{ minHeight: \\"100vh\\", flexDirection: \\"row\\" }}>\\n      <AntLayout>\\n        <Header />\\n        <AntLayout.Content>\\n          {children}\\n          <OffLayoutArea />\\n        </AntLayout.Content>\\n      </AntLayout>\\n    </AntLayout>\\n  );\\n};\\n```\\n\\nLet\'s customize the header component too\\n\\n### Custom Header\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout } from \\"antd\\";\\n\\nexport const Header: React.FC = () => {\\n  return (\\n    <Layout.Header\\n      style={{\\n        display: \\"flex\\",\\n        justifyContent: \\"center\\",\\n        alignItems: \\"center\\",\\n        height: \\"64px\\",\\n        backgroundColor: \\"#FFF\\",\\n        borderBottom: \\"1px solid #f0f0f0\\",\\n      }}\\n    >\\n      <img src=\\"./refeedback.png\\" alt=\\"refeedback\\" style={{ width: \\"250px\\" }} />\\n    </Layout.Header>\\n  );\\n};\\n```\\n\\nIn the new view, there are no siders anymore and the header we have customized is here.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={header} alt=\\"header\\" />\\n</div>\\n<br />\\n\\nNow we come to the part where we can list our feedback and make changes to it. Before that, let\'s create dummy feedback records on Strapi.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedbacks} alt=\\"feedbacks\\" />\\n</div>\\n<br />\\n\\n\\nCreate a `FeedbackList.tsx` file under the `pages` folder. Then, let\'s create our component as follows with the components and hooks that come with refine.\\n\\n### Create FeedbackList\\n\\n```tsx\\nimport {\\n  List,\\n  Typography,\\n  AntdList,\\n  useSimpleList,\\n  CrudFilters,\\n  Form,\\n  HttpError,\\n  Row,\\n  Col,\\n  Tag,\\n  Radio,\\n  Space,\\n  Descriptions,\\n  Button,\\n  DateField,\\n  Card,\\n  useUpdate,\\n} from \\"@pankod/refine\\";\\n\\nimport { IFeedback, IFeedbackFilterVariables, FeedBackType } from \\"interfaces\\";\\n\\nconst { Paragraph } = Typography;\\n\\nconst addTagColor = (type: FeedBackType) => {\\n  switch (type) {\\n    case \\"issue\\":\\n      return \\"error\\";\\n    case \\"idea\\":\\n      return \\"orange\\";\\n    default:\\n      return \\"default\\";\\n  }\\n};\\n\\nexport const FeedbackList: React.FC = () => {\\n  const { listProps, searchFormProps } = useSimpleList<\\n    IFeedback,\\n    HttpError,\\n    IFeedbackFilterVariables\\n  >({\\n    initialSorter: [{ field: \\"created_at\\", order: \\"desc\\" }],\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { type } = params;\\n\\n      filters.push({\\n        field: \\"type\\",\\n        operator: \\"eq\\",\\n        value: type || undefined,\\n      });\\n\\n      return filters;\\n    },\\n  });\\n\\n  const { mutate, isLoading } = useUpdate();\\n\\n  const renderItem = (item: IFeedback) => {\\n    const { id, description, type, page, created_at } = item;\\n    return (\\n      <AntdList.Item>\\n        <Card hoverable>\\n          <AntdList.Item.Meta\\n            description={\\n              <div style={{ display: \\"flex\\", justifyContent: \\"space-between\\" }}>\\n                <Tag\\n                  color={addTagColor(type)}\\n                  style={{ textTransform: \\"capitalize\\" }}\\n                >\\n                  {type}\\n                </Tag>\\n                <DateField format=\\"LLL\\" value={created_at} />\\n              </div>\\n            }\\n          />\\n          <Paragraph strong>{description}</Paragraph>\\n          <Descriptions labelStyle={{ color: \\"grey\\", fontWeight: 600 }}>\\n            <Descriptions.Item label=\\"Path\\">{page}</Descriptions.Item>\\n          </Descriptions>\\n          <div style={{ display: \\"flex\\", justifyContent: \\"end\\", gap: \\"4px\\" }}>\\n            <Button\\n              size=\\"small\\"\\n              loading={isLoading}\\n              onClick={() =>\\n                mutate({\\n                  id,\\n                  resource: \\"feedbacks\\",\\n                  values: {\\n                    type: \\"archive\\",\\n                  },\\n                })\\n              }\\n            >\\n              Archive\\n            </Button>\\n          </div>\\n        </Card>\\n      </AntdList.Item>\\n    );\\n  };\\n\\n  return (\\n    <List title=\\"\\" pageHeaderProps={{ style: { height: \\"100%\\" } }}>\\n      <Row gutter={[64, 0]} justify=\\"center\\">\\n        <Col xs={24} sm={24} md={4} lg={4} xl={4}>\\n          <Form\\n            {...searchFormProps}\\n            layout=\\"vertical\\"\\n            onValuesChange={() => searchFormProps.form?.submit()}\\n            initialValues={{\\n              type: \\"\\",\\n            }}\\n          >\\n            <Form.Item label=\\"FILTERS\\" name=\\"type\\">\\n              <Radio.Group>\\n                <Space direction=\\"vertical\\">\\n                  <Radio.Button value=\\"\\">All</Radio.Button>\\n                  <Radio.Button value=\\"issue\\">Issue</Radio.Button>\\n                  <Radio.Button value=\\"idea\\">Idea</Radio.Button>\\n                  <Radio.Button value=\\"other\\">Other</Radio.Button>\\n                  <Radio.Button value=\\"archive\\">Archive</Radio.Button>\\n                </Space>\\n              </Radio.Group>\\n            </Form.Item>\\n          </Form>\\n        </Col>\\n        <Col xs={24} sm={24} md={14} lg={14} xl={14}>\\n          <AntdList\\n            {...listProps}\\n            split={false}\\n            renderItem={renderItem}\\n            itemLayout=\\"vertical\\"\\n          />\\n        </Col>\\n      </Row>\\n    </List>\\n  );\\n};\\n```\\n\\n```ts\\nexport type FeedBackType = \\"idea\\" | \\"issue\\" | \\"other\\" | \\"archive\\";\\n\\nexport interface IFeedback {\\n  id: string;\\n  description: string;\\n  page: string;\\n  user: string;\\n  type: FeedBackType;\\n  created_at: Date;\\n}\\n\\nexport interface IFeedbackFilterVariables {\\n  type: FeedBackType;\\n}\\n```\\n\\nIn this component\\n\\n- We listed our records using the [`useSimpleList`](https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList/) and [Ant Design](https://ant.design) [`<List>`](https://ant.design/components/list) component.\\n- We used Antd [`<Form>`](https://ant.design/components/form/) component to filter our records.\\n- We made it possible to change the `type` of our record with [`useUpdate`](https://refine.dev/docs/api-references/hooks/data/useUpdate)\\n\\nSee detailed usage of useSimpleList for adding new filters, adding search entries, dynamic sorting operations and more [here](https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList/).\\n\\n### Overview\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback_overview} alt=\\"feedback_overview\\" />\\n</div>\\n<br />\\n\\n \\n\\nLet\'s develop feedback widget where we can get feedback to expand the application a little more. For this application, I will develop this component with refine, but you can create this component with Strapi APIs in any way you want.\\n\\nYou can look at the code of the component I developed [here](https://github.com/pankod/refine-hackathon/tree/main/refeedback/src/components/feedback).\\n\\nNow let\'s add this component to the `OfflayouArea` component and create feedback on the page and see how it comes to our feedback list.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={widgets} alt=\\"widgets\\" />\\n</div>\\n<br />\\n\\nYou can find the source code of the project here: https://github.com/pankod/refine/tree/master/examples/blog/refeedback"},{"id":"manage-hackathons-with-refine","metadata":{"permalink":"/blog/manage-hackathons-with-refine","source":"@site/blog/2021-10-4-manage-hackatons.md","title":"Let\'s Build an App to Manage Your Hackathons with Refine","description":"We\'ll be building a demo app to manage hackathons with refine.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":3.245,"truncated":true,"authors":[{"name":"Muharrem Kocadere","title":"Frontend Developer","url":"https://github.com/mhrrmk","imageURL":"https://github.com/mhrrmk.png","key":"muharrem"}],"prevItem":{"title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi"},"nextItem":{"title":"Simple Web Application Example with Refine","permalink":"/blog/simple-web-application-with-refine"}},"content":"import hackathons from \'@site/static/img/blog/2021-10-4-manage-hackathons/hackathons.png\';\\nimport create from \'@site/static/img/blog/2021-10-4-manage-hackathons/create.png\';\\n\\nWe\'ll be building a demo app to manage hackathons with [refine](https://refine.dev/). We\'ll be able to create new hackathons, new project entries for a hackathon and criterias for a hackathon.\\n\\n\x3c!--truncate--\x3e\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={hackathons} alt=\\"hackathons\\" />\\n</div>\\n<br/>\\n\\nWe\'ll use [supabase](https://supabase.io/) as the backend service. **refine** comes with a builtin data provider for supabase thus it\'s very easy to create crud pages.\\n\\n## Creating tables\\nOur app will have these tables in supabase\\n* criterias\\n* hackathons\\n* hackathoners\\n* projects\\n* projectscores  \\n\\nThese are reflected in our app as \\n```ts\\nexport type HackathonerType = {\\n  id: string;\\n  name: string;\\n};\\n\\nexport type HackathonType = {\\n  id: string;\\n  start: string;\\n  end: string;\\n  name: string;\\n};\\n\\nexport type ProjectType = {\\n  id: string;\\n  name: string;\\n  description: string;\\n  url: string;\\n  hackathon_id: string;\\n  hackathoner_id: string;\\n};\\n\\nexport type CriteriaType = {\\n  id: string;\\n  name: string;\\n  hackathon_id: string;\\n};\\n\\nexport type ProjectScoreType = {\\n  project_id: string;\\n  criteria_id: string;\\n  score: string;\\n};\\n\\n```\\n\\n## Craeting CRUD pages\\nCreating crud pages is as easy like this:\\n\\nList page:\\n```tsx\\nimport {\\n  List,\\n  Table,\\n  useTable,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  TextField,\\n} from \\"@pankod/refine\\";\\n\\nimport dayjs from \\"dayjs\\";\\n\\nimport { HackathonType } from \\"interfaces\\";\\n\\nexport const HackathonsList: React.FC = () => {\\n  const { tableProps } = useTable<HackathonType>();\\n\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n        <Table.Column dataIndex=\\"name\\" title=\\"Name\\" />\\n        <Table.Column\\n          dataIndex=\\"start\\"\\n          title=\\"Starts\\"\\n          render={(value) => (\\n            <TextField value={dayjs(value).format(\\"DD/MMMM dddd\\")} />\\n          )}\\n        />\\n        <Table.Column\\n          dataIndex=\\"end\\"\\n          title=\\"Ends\\"\\n          render={(value) => (\\n            <TextField value={dayjs(value).format(\\"DD/MMMM dddd\\")} />\\n          )}\\n        />\\n        <Table.Column\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_text, record: HackathonType): React.ReactNode => {\\n            return (\\n              <Space>\\n                <ShowButton size=\\"small\\" recordItemId={record.id} hideText />\\n                <EditButton size=\\"small\\" recordItemId={record.id} hideText />\\n              </Space>\\n            );\\n          }}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n\\n## Create page:\\n```tsx\\nimport { Create, Form, Input, useForm, DatePicker } from \\"@pankod/refine\\";\\n\\nimport { HackathonType } from \\"interfaces\\";\\n\\nexport const HackathonsCreate: React.FC = () => {\\n  const { formProps, saveButtonProps } = useForm<HackathonType>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item label=\\"Name\\" name=\\"name\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Name\\" name=\\"start\\">\\n          <DatePicker />\\n        </Form.Item>\\n        <Form.Item label=\\"Name\\" name=\\"end\\">\\n          <DatePicker />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\nThen use these pages as the corresponding crud component for the `hackathon` resource:\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport { supabaseClient } from \\"utility\\";\\nimport {\\n  HackathonsList,\\n  HackathonsCreate,\\n  HackathonsEdit,\\n  HackathonsShow,\\n} from \\"./pages/hackathons\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      resources={[{\\n        name: \\"hackathons\\",\\n        list: HackathonsList,\\n        create: HackathonsCreate,\\n        edit: HackathonsEdit,\\n        show: HackathonsShow\\n      }]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br/>\\n\\n**refine** comes with builtin hooks for Ant design components. You can find detailed usage for the hooks and supabase in the [documentation](https://refine.dev/docs/)\\n\\n## Creating voting page\\nWe\'ll use the dashboard option to place voting page. We\'ll need data from different resources. **refine** comes with powerful hooks that are based on react-query to get data from those resources.\\n\\nFor example to get the hackathons that are active now we can use the `useList` hook:\\n```tsx\\nexport const DashboardPage: React.FC = () => {\\n  const currentHackathons = useList<HackathonType>({\\n    resource: \\"hackathons\\",\\n    config: {\\n      filters: [\\n        {\\n          field: \\"start\\",\\n          operator: \\"lte\\",\\n          value: now,\\n        },\\n        {\\n          field: \\"end\\",\\n          operator: \\"gte\\",\\n          value: now,\\n        },\\n      ],\\n    },\\n  });\\n}\\n```\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/hackathonize-xcpcp?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"hackathonize\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\nWe can get data from other resources in a similar fashion. You can find the [repo here](https://github.com/pankod/refine/tree/master/examples/blog/hackathonize)\\n## Conclusion\\nThis project itself is a product of a hackathon. It lacks lots of feature like authorization though it shows how **refine** makes it easy to quickly build a working app."},{"id":"simple-web-application-with-refine","metadata":{"permalink":"/blog/simple-web-application-with-refine","source":"@site/blog/2021-10-4-simple-web-application.md","title":"Simple Web Application Example with Refine","description":"Do you want to develop a web application quickly? You are at the right place!","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":9.83,"truncated":true,"authors":[{"name":"Ayd\u0131n Akyol","title":"Software Developer","url":"https://github.com/biskuvit","imageURL":"https://github.com/biskuvit.png","key":"aydin"}],"prevItem":{"title":"Let\'s Build an App to Manage Your Hackathons with Refine","permalink":"/blog/manage-hackathons-with-refine"}},"content":"import cli from \'@site/static/img/blog/2021-10-4-simple-web-application/cli.png\';\\nimport create from \'@site/static/img/blog/2021-10-4-simple-web-application/create.png\';\\nimport detailed from \'@site/static/img/blog/2021-10-4-simple-web-application/detailed.png\';\\nimport edit from \'@site/static/img/blog/2021-10-4-simple-web-application/edit.png\';\\nimport movies_all from \'@site/static/img/blog/2021-10-4-simple-web-application/movies_all.png\';\\nimport movies from \'@site/static/img/blog/2021-10-4-simple-web-application/movies.png\';\\nimport show from \'@site/static/img/blog/2021-10-4-simple-web-application/show.png\';\\nimport signin from \'@site/static/img/blog/2021-10-4-simple-web-application/signin.png\';\\n\\nDo you want to develop a web application quickly? You are at the right place! I will develop a simple movie web application with **refine** on the frontend and **Supabase** on the backend, you should continue reading. I will try to explain it step by step in a very simple way.\\n\\n\x3c!--truncate--\x3e\\n\\n## Refine setup\\n\\nThere are two alternative methods to set up a refine application.\\n\\nThe recommended way is using the [superplate](https://github.com/pankod/superplate) tool. superplate\'s CLI wizard will let you create and customize your application in seconds.\\n\\nAlternatively, you may use the create-react-app tool to create an empty React application and then add refine module via npm.\\n\\nI will use superplate-cli and select a Supabase. You can customize other options as you wish.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={cli} alt=\\"cli\\" />\\n</div>\\n<br />\\n\\n## Create admin panel with refine\\n\\n * We should add our Supabase url and key in *supabaseClient.tsx*\\n * Add custom login page in *App.tsx*\\n\\n*App.tsx*\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n## Login page\\n```tsx\\n\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  Checkbox,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\n\\nimport { useLogin } from \\"@pankod/refine\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  username: string;\\n  password: string;\\n  remember: boolean;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                requiredMark={false}\\n                initialValues={{\\n                  remember: false,\\n                  email: \\"info+refineflix@refine.dev\\",\\n                  password: \\"refineflix\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <div style={{ marginBottom: \\"12px\\" }}>\\n                  <Form.Item name=\\"remember\\" valuePropName=\\"checked\\" noStyle>\\n                    <Checkbox\\n                      style={{\\n                        fontSize: \\"12px\\",\\n                      }}\\n                    >\\n                      Remember me\\n                    </Checkbox>\\n                  </Form.Item>\\n\\n                  <a\\n                    style={{\\n                      float: \\"right\\",\\n                      fontSize: \\"12px\\",\\n                    }}\\n                    href=\\"#\\"\\n                  >\\n                    Forgot password?\\n                  </a>\\n                </div>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?{\\" \\"}\\n                  <a href=\\"#\\" style={{ fontWeight: \\"bold\\" }}>\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n```css\\n.layout {\\n    background: radial-gradient(50% 50% at 50% 50%, #63386a 0%, #310438 100%);\\n    background-size: \\"cover\\";\\n  }\\n  \\n  .container {\\n    max-width: 408px;\\n    margin: auto;\\n  }\\n  \\n  .title {\\n    text-align: center;\\n    color: #626262;\\n    font-size: 30px;\\n    letter-spacing: -0.04em;\\n  }\\n  \\n  .imageContainer {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    margin-bottom: 16px;\\n  }\\n  \\n```\\nYou can use default user for login.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\n* Create movies list page with add a resource in *App.tsx*\\n\\n```tsx\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\n\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport {\\n  AdminMovieList,\\n} from \\"./pages/admin/movies\\";\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      resources={[\\n          {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n          },\\n     ]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n* AdminMovieList page\\n```tsx\\nimport {\\n  List,\\n  Table,\\n  useTable,\\n  IResourceComponentsProps,\\n  Space,\\n  EditButton,\\n  ShowButton,\\n  getDefaultSortOrder,\\n  CreateButton,\\n  DeleteButton,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nexport const AdminMovieList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, sorter } = useTable<IMovies>({\\n    initialSorter: [\\n      {\\n        field: \\"id\\",\\n        order: \\"asc\\",\\n      },\\n    ],\\n  });\\n\\n  return (\\n    <List pageHeaderProps={{ extra: <CreateButton /> }}>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column\\n          key=\\"id\\"\\n          dataIndex=\\"id\\"\\n          title=\\"ID\\"\\n          sorter\\n          defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n        />\\n        <Table.Column key=\\"name\\" dataIndex=\\"name\\" title=\\"name\\" sorter />\\n\\n        <Table.Column<IMovies>\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record) => (\\n            <Space>\\n              <EditButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <ShowButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <DeleteButton hideText size=\\"small\\" recordItemId={record.id} />\\n            </Space>\\n          )}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n\\n* Movies interface\\n```tsx\\nexport interface IMovies {\\n  id: string;\\n  name: string;\\n  description: string;\\n  preload: string;\\n  director: string;\\n  stars: string;\\n  premiere: string;\\n  trailer: string;\\n  images: IFile[];\\n}\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={movies} alt=\\"movies\\" />\\n</div>\\n<br />\\n\\n* Now we will add create page\\n\\n## Create page\\n\\n```tsx\\n    resources={[\\n        {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            create: AdminMovieCreate,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n        },\\n    ]}\\n```\\n\\n```tsx\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  IResourceComponentsProps,\\n  Upload,\\n  useForm,\\n  RcFile,\\n} from \\"@pankod/refine\\";\\nimport { IMovies } from \\"interfaces\\";\\nimport { supabaseClient, normalizeFile } from \\"utility\\";\\n\\nexport const AdminMovieCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMovies>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Name\\"\\n          name=\\"name\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Premiere\\" name=\\"premiere\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Director\\" name=\\"director\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Stars\\" name=\\"stars\\">\\n          <Input />\\n        </Form.Item>\\n\\n        <Form.Item label=\\"Images\\">\\n          <Form.Item\\n            name=\\"images\\"\\n            valuePropName=\\"fileList\\"\\n            normalize={normalizeFile}\\n            noStyle\\n          >\\n            <Upload.Dragger\\n              name=\\"file\\"\\n              listType=\\"picture\\"\\n              multiple\\n              customRequest={async ({ file, onError, onSuccess }) => {\\n                try {\\n                  const rcFile = file as RcFile;\\n\\n                  await supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .upload(`public/${rcFile.name}`, file, {\\n                      cacheControl: \\"3600\\",\\n                      upsert: true,\\n                    });\\n\\n                  const { data } = supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .getPublicUrl(`public/${rcFile.name}`);\\n\\n                  const xhr = new XMLHttpRequest();\\n                  onSuccess && onSuccess({ url: data?.publicURL }, xhr);\\n                } catch (error) {\\n                  onError && onError(new Error(\\"Upload Error\\"));\\n                }\\n              }}\\n            >\\n              <p className=\\"ant-upload-text\\">Drag & drop a file in this area</p>\\n            </Upload.Dragger>\\n          </Form.Item>\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n\\n```\\n\\n* normalize file in utility folder\\n\\n```tsx\\nimport { UploadFile } from \\"@pankod/refine\\";\\n\\ninterface UploadResponse {\\n    url: string;\\n}\\ninterface EventArgs<T = UploadResponse> {\\n    file: UploadFile<T>;\\n    fileList: Array<UploadFile<T>>;\\n}\\n\\nexport const normalizeFile = (event: EventArgs) => {\\n    const { fileList } = event;\\n\\n    return fileList.map((item) => {\\n        const { uid, name, type, size, response, percent, status } = item;\\n\\n        return {\\n            uid,\\n            name,\\n            url: item.url || response?.url,\\n            type,\\n            size,\\n            percent,\\n            status,\\n        };\\n    });\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br />\\n\\n## Edit page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Edit,\\n  Form,\\n  Input,\\n  IResourceComponentsProps,\\n  RcFile,\\n  Upload,\\n  useForm,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\nimport { supabaseClient, normalizeFile } from \\"utility\\";\\n\\nexport const AdminMovieEdit: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMovies>();\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps} pageHeaderProps={{ extra: null }}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Name\\"\\n          name=\\"name\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Premiere\\" name=\\"premiere\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Director\\" name=\\"director\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Stars\\" name=\\"stars\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Trailer\\" name=\\"trailer\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Images\\">\\n          <Form.Item\\n            name=\\"images\\"\\n            valuePropName=\\"fileList\\"\\n            normalize={normalizeFile}\\n            noStyle\\n          >\\n            <Upload.Dragger\\n              name=\\"file\\"\\n              listType=\\"picture\\"\\n              multiple\\n              customRequest={async ({ file, onError, onSuccess }) => {\\n                try {\\n                  const rcFile = file as RcFile;\\n\\n                  await supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .upload(`public/${rcFile.name}`, file, {\\n                      cacheControl: \\"3600\\",\\n                      upsert: true,\\n                    });\\n\\n                  const { data } = supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .getPublicUrl(`public/${rcFile.name}`);\\n\\n                  const xhr = new XMLHttpRequest();\\n                  onSuccess && onSuccess({ url: data?.publicURL }, xhr);\\n                } catch (error) {\\n                  onError && onError(new Error(\\"Upload Error\\"));\\n                }\\n              }}\\n            >\\n              <p className=\\"ant-upload-text\\">Drag & drop a file in this area</p>\\n            </Upload.Dragger>\\n          </Form.Item>\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={edit} alt=\\"edit\\" />\\n</div>\\n<br />\\n\\n## Show page\\n\\n```tsx\\nimport {\\n  useShow,\\n  Show,\\n  Typography,\\n  IResourceComponentsProps,\\n  Space,\\n  ImageField,\\n  RefreshButton,\\n  EditButton,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const AdminMovieShow: React.FC<IResourceComponentsProps> = () => {\\n  const { queryResult } = useShow<IMovies>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { push } = useNavigation();\\n\\n  return (\\n    <Show\\n      isLoading={isLoading}\\n      pageHeaderProps={{\\n        title: record?.name,\\n        subTitle: record?.premiere,\\n        extra: (\\n          <>\\n            <EditButton\\n              onClick={() => push(`/admin/movies/edit/${record?.id}`)}\\n            />\\n            <RefreshButton />\\n          </>\\n        ),\\n      }}\\n    >\\n      <Title level={5}>Director</Title>\\n      <Text>{record?.director || \\"-\\"}</Text>\\n\\n      <Title level={5}>Stars</Title>\\n      <Text>{record?.stars || \\"-\\"}</Text>\\n\\n      <Title level={5}>Trailer</Title>\\n      {record?.trailer && (\\n        <video width=\\"400\\" controls>\\n          <source src={record.trailer} type=\\"video/mp4\\" />\\n        </video>\\n      )}\\n\\n      <Title level={5}>Images</Title>\\n      <Space wrap>\\n        {record?.images ? (\\n          record.images.map((img) => (\\n            <ImageField\\n              key={img.name}\\n              value={img.url}\\n              title={img.name}\\n              width={200}\\n            />\\n          ))\\n        ) : (\\n          <Text>Not found any images</Text>\\n        )}\\n      </Space>\\n    </Show>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"show\\" />\\n</div>\\n<br />\\n\\nFinal version of our `<Resource>`.\\n\\n```tsx\\n    resources={[\\n        {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            create: AdminMovieCreate,\\n            show: AdminMovieShow,\\n            edit: AdminMovieEdit,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n        },\\n    ]}\\n```\\n\\n## Create list page for movies\\n\\nWe will create custom list and show pages for the unauthorized users because of that, we should add custom routes for these pages.\\n\\n*App.tsx*\\n\\n```tsx\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\n\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport {\\n  AdminMovieList,\\n  AdminMovieCreate,\\n  AdminMovieShow,\\n  AdminMovieEdit,\\n} from \\"./pages/admin/movies\\";\\nimport { MoviesList, MovieShow } from \\"./pages/movies\\";\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n   <Refine\\n        dataProvider={dataProvider(supabaseClient)}\\n        authProvider={authProvider}\\n        LoginPage={Login}\\n        routerProvider={{\\n            ...routerProvider,\\n\\n            routes: [\\n                {\\n                    exact: true,\\n                    component: MoviesList,\\n                    path: \\"/movies\\",\\n                },\\n                {\\n                    exact: true,\\n                    component: MovieShow,\\n                    path: \\"/:resource(movies)/:action(show)/:id\\",\\n                },\\n            ],\\n        }}\\n        resources={[\\n            {\\n                name: \\"movies\\",\\n                list: AdminMovieList,\\n                create: AdminMovieCreate,\\n                show: AdminMovieShow,\\n                edit: AdminMovieEdit,\\n\\n                options: {\\n                    route: \\"admin/movies\\",\\n                },\\n            },\\n        ]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n### Movies list page\\n\\n```tsx\\nimport {\\n  IResourceComponentsProps,\\n  Card,\\n  Space,\\n  useList,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport { Layout } from \\"components\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nexport const MoviesList: React.FC<IResourceComponentsProps> = () => {\\n  const { Meta } = Card;\\n\\n  const { data, isLoading } = useList<IMovies>({\\n    resource: \\"movies\\",\\n    queryOptions: {\\n      staleTime: 0,\\n    },\\n  });\\n\\n  const { push } = useNavigation();\\n\\n  const renderMovies = () => {\\n    if (data) {\\n      return data.data.map((movie) => {\\n        return (\\n          <Card\\n            hoverable\\n            key={movie.name}\\n            style={{ width: 240, minHeight: 400 }}\\n            cover={\\n              movie.images?.length > 0 ? (\\n                <img alt={movie.images[0].name} src={movie.images[0].url} />\\n              ) : (\\n                <img\\n                  alt=\\"default\\"\\n                  src=\\"https://cdn.pixabay.com/photo/2019/04/24/21/55/cinema-4153289_960_720.jpg\\"\\n                />\\n              )\\n            }\\n            loading={isLoading}\\n            onClick={() => push(`/movies/show/${movie.id}`)}\\n          >\\n            <Meta title={movie.name} description={movie.description} />\\n          </Card>\\n        );\\n      });\\n    }\\n  };\\n\\n  return (\\n    <Layout>\\n      <Space align=\\"start\\">{renderMovies()}</Space>\\n    </Layout>\\n  );\\n};\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={movies_all} alt=\\"movies_all\\" />\\n</div>\\n<br />\\n\\n\\n### Movies detail page\\n\\n```tsx\\nimport {\\n  useShow,\\n  Show,\\n  Typography,\\n  IResourceComponentsProps,\\n  Space,\\n  ImageField,\\n} from \\"@pankod/refine\\";\\nimport { Layout } from \\"components\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const MovieShow: React.FC<IResourceComponentsProps> = () => {\\n  const { queryResult } = useShow<IMovies>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const renderDetail = () => (\\n    <>\\n      <Title level={5}>Director</Title>\\n      <Text>{record?.director || \\"-\\"}</Text>\\n\\n      <Title level={5}>Stars</Title>\\n      <Text>{record?.stars || \\"-\\"}</Text>\\n      <Title level={5}>Trailer</Title>\\n      {record?.trailer && (\\n        <video width=\\"400\\" controls>\\n          <source src={record.trailer} type=\\"video/mp4\\" />\\n        </video>\\n      )}\\n      <Title level={5}>Images</Title>\\n      <Space wrap>\\n        {record?.images ? (\\n          record.images.map((img) => (\\n            <ImageField\\n              key={img.name}\\n              value={img.url}\\n              title={img.name}\\n              width={200}\\n            />\\n          ))\\n        ) : (\\n          <Text>Not found any images</Text>\\n        )}\\n      </Space>\\n    </>\\n  );\\n\\n  return (\\n    <Layout>\\n      <Show\\n        isLoading={isLoading}\\n        pageHeaderProps={{\\n          title: record?.name,\\n          subTitle: record?.premiere,\\n          extra: null,\\n        }}\\n      >\\n        {renderDetail()}\\n      </Show>\\n    </Layout>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={detailed} alt=\\"detailed\\" />\\n</div>\\n<br />\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refineflix-6wyxo?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refineflix\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n[here is repo](https://github.com/pankod/refine/tree/master/examples/blog/refineflix)"}]}')}}]);