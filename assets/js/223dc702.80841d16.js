"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[50111],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password."},i=void 0,l={unversionedId:"core/components/auth-page",id:"core/components/auth-page",title:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password.",source:"@site/docs/core/components/auth-page.md",sourceDirName:"core/components",slug:"/core/components/auth-page",permalink:"/docs/core/components/auth-page",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/core/components/auth-page.md",tags:[],version:"current",lastUpdatedBy:"Ayd\u0131n",lastUpdatedAt:1662036092,formattedLastUpdatedAt:"Sep 1, 2022",frontMatter:{id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password."}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>login</code>",id:"login",level:3},{value:"<code>register</code>",id:"register",level:3},{value:"<code>resetPassword</code>",id:"resetpassword",level:3},{value:"<code>updatePassword</code>",id:"updatepassword",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Interface",id:"interface",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component from ",(0,r.kt)("strong",{parentName:"p"},"refine")," contains authentication pages that can be used to login, register, reset password and update password."),(0,r.kt)("p",null,"Before using ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component you need to add ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component can be used like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/auth/register"',title:'"pages/auth/register"'},'import { AuthPage } from "@pankod/refine-core";\n\nconst RegisterPage = () => {\n    return <AuthPage type="register" />;\n};\n')),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component has the following types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"login"')," - a type of the login page and default type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"register"')," - type of the registration page."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"resetPassword"')," - type of the reset password page."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"updatePassword"')," - type of the update password page.")),(0,r.kt)("h3",{id:"login"},(0,r.kt)("inlineCode",{parentName:"h3"},"login")),(0,r.kt)("p",null,"You can use the following props for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,r.kt)("inlineCode",{parentName:"p"},'"login"'),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"registerLink")," property defines the link to the registration page."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resetPasswordLink")," property defines the link to the reset password page."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backLink")," property defines the render ReactNode that will be used as a back link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," property and use your own logic to submit the form.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useLogin } from "@pankod/refine-core";\n\nconst LoginPage = () => {\n    const { mutate: login } = useLogin();\n\n    return (\n        <AuthPage\n            type="login"\n            backLink={\n                <button\n                    type="button"\n                    onClick={() => {\n                        // your custom back link logic\n                    }}\n                >\n                    Go Back\n                </button>\n            }\n            submitButton={\n                <button\n                    type="submit"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        // you can access login form data from `event.target`\n                        console.log(event.target.form);\n                        // run your custom login logic\n                        login();\n                    }}\n                >\n                    Login\n                </button>\n            }\n        />\n    );\n};\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"providers")," property defines the list of providers used to handle social login authentication.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<AuthPage\n    type="login"\n    providers={[\n        {\n            name: "github",\n            icon: (\n                <img src="https://img.icons8.com/color/48/000000/github.png" />\n            ),\n            label: "Sign in with GitHub",\n        },\n        {\n            name: "google",\n            icon: (\n                <img src="https://img.icons8.com/color/48/000000/google-logo.png" />\n            ),\n            label: "Sign in with Google",\n        },\n    ]}\n/>\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to use providers then you need to handle your provider name to use social authentication in the",(0,r.kt)("inlineCode",{parentName:"p"},"login")," method from ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication.\n",(0,r.kt)("inlineCode",{parentName:"p"},"providerName")," is the name of the selected provider from your list of providers."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const authProvider: AuthProvider = {\n    ...\n    login: ({ providerName }) => {\n        if (providerName === "github") {\n            // handle Github Auth flow\n        }\n        if (providerName === "google") {\n            // handle Google Auth flow\n        }\n    }\n}\n'))),(0,r.kt)("h3",{id:"register"},(0,r.kt)("inlineCode",{parentName:"h3"},"register")),(0,r.kt)("p",null,"You can use following props for ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when type is ",(0,r.kt)("inlineCode",{parentName:"p"},'"register"'),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backLink")," property defines the render ReactNode that will be used as a back link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loginLink")," property defines the link to the login page."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," property and use your own logic to submit the form.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useRegister } from "@pankod/refine-core";\n\nconst RegisterPage = () => {\n    const { mutate: register } = useRegister();\n\n    return (\n        <AuthPage\n            type="register"\n            backLink={\n                <button\n                    type="button"\n                    onClick={() => {\n                        // your custom back link logic\n                    }}\n                >\n                    Go Back\n                </button>\n            }\n            submitButton={\n                <button\n                    type="submit"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        // you can access register form data from `event.target`\n                        console.log(event.target.form);\n                        // run your custom login logic\n                        register();\n                    }}\n                >\n                    Register\n                </button>\n            }\n        />\n    );\n};\n')),(0,r.kt)("h3",{id:"resetpassword"},(0,r.kt)("inlineCode",{parentName:"h3"},"resetPassword")),(0,r.kt)("p",null,"You can use the following props for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,r.kt)("inlineCode",{parentName:"p"},'"resetPassword"'),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backLink")," property defines the render ReactNode that will be used as a back link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," property and use your own logic to submit the form.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useResetPassword } from "@pankod/refine-core";\n\nconst ResetPasswordPage = () => {\n    const { mutate: resetPassword } = useResetPassword();\n\n    return (\n        <AuthPage\n            type="resetPassword"\n            backLink={\n                <button\n                    type="button"\n                    onClick={() => {\n                        // your custom back link logic\n                    }}\n                >\n                    Go Back\n                </button>\n            }\n            submitButton={\n                <button\n                    type="submit"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        // you can access reset password form data from `event.target`\n                        console.log(event.target.form);\n                        // run your custom reset password logic\n                        resetPassword();\n                    }}\n                >\n                    Reset Password\n                </button>\n            }\n        />\n    );\n};\n')),(0,r.kt)("h3",{id:"updatepassword"},(0,r.kt)("inlineCode",{parentName:"h3"},"updatePassword")),(0,r.kt)("p",null,"You can use the following props for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,r.kt)("inlineCode",{parentName:"p"},'"updatePassword"'),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backLink")," property defines the render ReactNode that will be used as a back link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," property and use your own logic to submit the form.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useUpdatePassword } from "@pankod/refine-core";\n\nconst UpdatePasswordPage = () => {\n    const { mutate: updatePassword } = useUpdatePassword();\n\n    return (\n        <AuthPage\n            type="updatePassword"\n            backLink={\n                <button\n                    type="button"\n                    onClick={() => {\n                        // your custom back link logic\n                    }}\n                >\n                    Go Back\n                </button>\n            }\n            submitButton={\n                <button\n                    type="submit"\n                    onClick={(event) => {\n                        event.preventDefault();\n                        // you can access update password form data from `event.target`\n                        console.log(event.target.form);\n                        // run your custom update password logic\n                        updatePassword();\n                    }}\n                >\n                    Update Password\n                </button>\n            }\n        />\n    );\n};\n')),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"Render ",(0,r.kt)("inlineCode",{parentName:"td"},"<AuthPage>")," forms by ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," property."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"login")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"register")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"resetPassword")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"updatePassword"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"registerLink"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a register link to the ",(0,r.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loginLink"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a link to the ",(0,r.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resetPasswordLink"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a reset password link to the ",(0,r.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"updatePasswordLink"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a update password link to the ",(0,r.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"submitButton"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be used to submit form."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backLink"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom node that will be displayed as a back link."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"providers"),(0,r.kt)("td",{parentName:"tr",align:null},"Render social logins if ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},'"login"'),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#interface"},(0,r.kt)("inlineCode",{parentName:"a"},"IProvider[]")))))),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface IProvider {\n    name: string;\n    icon?: React.ReactNode;\n    label?: string;\n}\n")))}u.isMDXComponent=!0}}]);