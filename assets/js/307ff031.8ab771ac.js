"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[99299],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},46740:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=a(87462),r=(a(67294),a(3905)),i=a(70343);const o={id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},l=void 0,s={unversionedId:"core/providers/data-provider",id:"core/providers/data-provider",title:"Data Provider",description:"Overview",source:"@site/docs/core/providers/data-provider.md",sourceDirName:"core/providers",slug:"/core/providers/data-provider",permalink:"/docs/core/providers/data-provider",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/core/providers/data-provider.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1659531186,formattedLastUpdatedAt:"8/3/2022",frontMatter:{id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},sidebar:"someSidebar",previous:{title:"Audit Log Provider",permalink:"/docs/core/providers/audit-log-provider"},next:{title:"i18n Provider",permalink:"/docs/core/providers/i18n-provider"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating a data provider",id:"creating-a-data-provider",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"Parameter Types",id:"parameter-types",level:4},{value:"<code>createMany</code>",id:"createmany",level:3},{value:"Parameter Types",id:"parameter-types-1",level:4},{value:"<code>deleteOne</code>",id:"deleteone",level:3},{value:"Parameter Types",id:"parameter-types-2",level:4},{value:"<code>deleteMany</code>",id:"deletemany",level:3},{value:"Parameter Types",id:"parameter-types-3",level:4},{value:"<code>update</code>",id:"update",level:3},{value:"Parameter Types",id:"parameter-types-4",level:4},{value:"<code>updateMany</code>",id:"updatemany",level:3},{value:"Parameter Types",id:"parameter-types-5",level:4},{value:"<code>getOne</code>",id:"getone",level:3},{value:"Parameter Types",id:"parameter-types-6",level:4},{value:"<code>getMany</code>",id:"getmany",level:3},{value:"Parameter Types",id:"parameter-types-7",level:4},{value:"<code>getList</code>",id:"getlist",level:3},{value:"Parameter Types",id:"parameter-types-8",level:4},{value:"<code>custom</code>",id:"custom",level:3},{value:"Parameter Types",id:"parameter-types-9",level:4},{value:"Error Format",id:"error-format",level:3}],m={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"A data provider is the place where a refine app communicates with an API.",(0,r.kt)("br",{parentName:"p"}),"\n","Data providers also act as adapters for refine making it possible to consume different API's and data services conveniently.",(0,r.kt)("br",{parentName:"p"}),"\n","A data provider makes ",(0,r.kt)("strong",{parentName:"p"},"HTTP")," requests and returns response data back using predefined methods."),(0,r.kt)("p",null,"A data provider must include following methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const dataProvider = {\n    create: ({ resource, variables, metaData }) => Promise,\n    createMany: ({ resource, variables, metaData }) => Promise,\n    deleteOne: ({ resource, id, variables, metaData }) => Promise,\n    deleteMany: ({ resource, ids, variables, metaData }) => Promise,\n    getList: ({\n        resource,\n        pagination,\n        hasPagination,\n        sort,\n        filters,\n        metaData,\n    }) => Promise,\n    getMany: ({ resource, ids, metaData }) => Promise,\n    getOne: ({ resource, id, metaData }) => Promise,\n    update: ({ resource, id, variables, metaData }) => Promise,\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\n    custom: ({\n        url,\n        method,\n        sort,\n        filters,\n        payload,\n        query,\n        headers,\n        metaData,\n    }) => Promise,\n    getApiUrl: () => "",\n};\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"refine")," includes many out-of-the-box data providers to use in your projects like"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/graphql"},"GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/airtable"},"Airtable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/supabase"},"Supabase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/hasura"},"Hasura")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/nhost"},"Nhost")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/appwrite"},"Appwrite")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/medusa"},"Medusa")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/master/packages/altogic"},"Altogic"))),(0,r.kt)("h3",{parentName:"div",id:"community-\ufe0f"},"Community \u2764\ufe0f"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/rturan29/refine-firebase"},"Firebase")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/rturan29"},"rturan29")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek"))))),(0,r.kt)("br",null),(0,r.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"refine")," consumes this methods using ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCreate"},"data hooks"),"."),(0,r.kt)("p",{parentName:"div"},"Data hooks are used to operate CRUD actions like creating a new record, listing a resource or deleting a record etc.."))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Data hooks uses ",(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"React Query")," to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc.."))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{src:i.Z})),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To activate data provider in refine, we have to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\n\nimport dataProvider from "./dataProvider";\n\nconst App: React.FC = () => {\n    return <Refine dataProvider={dataProvider} />;\n};\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To activate multiple data provider in refine, we have to pass the default key with ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," for default data provider and we can pass other data provider with any key to the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\n\nimport defaultDataProvider from "./dataProvider";\nimport exampleDataProvider from "./dataProvider";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            dataProvider={{\n                default: defaultDataProvider,\n                example: exampleDataProvider,\n            }}\n        />\n    );\n};\n')))),(0,r.kt)("h2",{id:"creating-a-data-provider"},"Creating a data provider"),(0,r.kt)("p",null,"We will build ",(0,r.kt)("strong",{parentName:"p"},'"Simple REST Dataprovider"')," of ",(0,r.kt)("inlineCode",{parentName:"p"},"@pankod/refine-simple-rest")," from scratch to show the logic of how data provider methods interact with the API."),(0,r.kt)("p",null,"We will provide you a fully working, ",(0,r.kt)("em",{parentName:"p"},"fake REST API")," located at ",(0,r.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev."},"https://api.fake-rest.refine.dev.")," You may take a look at available ",(0,r.kt)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev"},"resources and routes of the API")," before proceeding to the next step.",(0,r.kt)("br",{parentName:"p"}),"\n","Our ",(0,r.kt)("strong",{parentName:"p"},'"Simple REST Dataprovider"')," will be consuming this ",(0,r.kt)("em",{parentName:"p"},"fake REST API"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Fake REST API is based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typicode/json-server"},"JSON Server Project"),". ",(0,r.kt)("strong",{parentName:"p"},"Simple REST Dataprovider")," is fully compatible with the REST rules and methods of the ",(0,r.kt)("strong",{parentName:"p"},"JSON Server"),"."))),(0,r.kt)("br",null),(0,r.kt)("p",null,"Let's build a method that returns our data provider:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'import axios, { AxiosInstance } from "axios";\nimport { DataProvider } from "./interfaces/dataProvider.ts";\n\nconst axiosInstance = axios.create();\n\nconst SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    create: ({ resource, variables, metaData }) => Promise,\n    createMany: ({ resource, variables, metaData }) => Promise,\n    deleteOne: ({ resource, id, variables, metaData }) => Promise,\n    deleteMany: ({ resource, ids, variables, metaData }) => Promise,\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\n    getMany: ({ resource, ids, metaData }) => Promise,\n    getOne: ({ resource, id, metaData }) => Promise,\n    update: ({ resource, id, variables, metaData }) => Promise,\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\n    custom: ({\n        url,\n        method,\n        sort,\n        filters,\n        payload,\n        query,\n        headers,\n        metaData,\n    }) => Promise,\n    getApiUrl: () => "",\n});\n')),(0,r.kt)("p",null,"It will take the API URL as a parameter and an optional ",(0,r.kt)("strong",{parentName:"p"},"HTTP")," client. We will use ",(0,r.kt)("strong",{parentName:"p"},"axios")," as the default ",(0,r.kt)("strong",{parentName:"p"},"HTTP")," client."),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"create"},(0,r.kt)("inlineCode",{parentName:"h3"},"create")),(0,r.kt)("p",null,"This method allows us to create a single item in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    create: async ({ resource, variables }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { data } = await httpClient.post(url, variables);\n\n        return {\n            data,\n        };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCreate#type-parameters"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreate"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useCreate")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCreate } from "@pankod/refine-core";\n\nconst { mutate } = useCreate();\n\nmutate({\n    resource: "categories",\n    values: {\n        title: "New Category",\n    },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCreate"},"Refer to the useCreate documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"createmany"},(0,r.kt)("inlineCode",{parentName:"h3"},"createMany")),(0,r.kt)("p",null,"This method allows us to create multiple items in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    createMany: async ({ resource, variables }) => {\n        const response = await Promise.all(\n            variables.map(async (param) => {\n                const { data } = await httpClient.post(\n                    `${apiUrl}/${resource}`,\n                    param,\n                );\n                return data;\n            }),\n        );\n\n        return { data: response };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-1"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCreateMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"createMany")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useCreateMany")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCreateMany } from "@pankod/refine-core";\n\nconst { mutate } = useCreateMany();\n\nmutate({\n    resource: "categories",\n    values: [\n        {\n            title: "New Category",\n        },\n        {\n            title: "Another New Category",\n        },\n    ],\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCreateMany"},"Refer to the useCreateMany documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"deleteone"},(0,r.kt)("inlineCode",{parentName:"h3"},"deleteOne")),(0,r.kt)("p",null,"This method allows us to delete an item in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    deleteOne: async ({ resource, id }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.delete(url);\n\n        return {\n            data,\n        };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-2"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useDelete"},(0,r.kt)("inlineCode",{parentName:"a"},"useDelete"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteOne")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDelete")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useDelete } from "@pankod/refine-core";\n\nconst { mutate } = useDelete();\n\nmutate({ resource: "categories", id: "2" });\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useDelete"},"Refer to the useDelete documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"deletemany"},(0,r.kt)("inlineCode",{parentName:"h3"},"deleteMany")),(0,r.kt)("p",null,"This method allows us to delete multiple items in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    deleteMany: async ({ resource, ids }) => {\n        const response = await Promise.all(\n            ids.map(async (id) => {\n                const { data } = await httpClient.delete(\n                    `${apiUrl}/${resource}/${id}`,\n                );\n                return data;\n            }),\n        );\n        return { data: response };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-3"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ids"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey[]")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useDeleteMany"},(0,r.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteMany")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDeleteMany")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useDeleteMany } from "@pankod/refine-core";\n\nconst { mutate } = useDeleteMany();\n\nmutate({\n    resource: "categories",\n    ids: ["2", "3"],\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useDeleteMany"},"Refer to the useDeleteMany documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"update"},(0,r.kt)("inlineCode",{parentName:"h3"},"update")),(0,r.kt)("p",null,"This method allows us to update an item in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    update: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.patch(url, variables);\n\n        return {\n            data,\n        };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-4"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useUpdate#type-parameters"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdate"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useUpdate")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useUpdate } from "@pankod/refine-core";\n\nconst { mutate } = useUpdate();\n\nmutate({\n    resource: "categories",\n    id: "2",\n    values: { title: "New Category Title" },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useUpdate"},"Refer to the useUpdate documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"updatemany"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateMany")),(0,r.kt)("p",null,"This method allows us to update multiple items in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    updateMany: async ({ resource, ids, variables }) => {\n        const response = await Promise.all(\n            ids.map(async (id) => {\n                const { data } = await httpClient.patch(\n                    `${apiUrl}/${resource}/${id}`,\n                    variables,\n                );\n                return data;\n            }),\n        );\n\n        return { data: response };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-5"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ids"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey[]")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"TVariables is a user defined type which can be passed to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useUpdateMany#type-parameters"},(0,r.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," to type ",(0,r.kt)("inlineCode",{parentName:"p"},"variables"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"updateMany")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useUpdateMany")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useUpdateMany } from "@pankod/refine-core";\n\nconst { mutate } = useUpdateMany();\n\nmutate({\n    resource: "posts",\n    ids: ["1", "2"],\n    values: { status: "draft" },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useUpdateMany"},"Refer to the useUpdateMany documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"getone"},(0,r.kt)("inlineCode",{parentName:"h3"},"getOne")),(0,r.kt)("p",null,"This method allows us to retrieve a single item in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    getOne: async ({ resource, id }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.get(url);\n\n        return {\n            data,\n        };\n    },\n// highlight-end\n    ...\n})\n")),(0,r.kt)("h4",{id:"parameter-types-6"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"getOne")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOne")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useOne } from "@pankod/refine-core";\n\nconst { data } = useOne<ICategory>({ resource: "categories", id: "1" });\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useOne"},"Refer to the useOne documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"getmany"},(0,r.kt)("inlineCode",{parentName:"h3"},"getMany")),(0,r.kt)("p",null,"This method allows us to retrieve multiple items in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'import { stringify } from "query-string";\n\nconst SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    ...\n// highlight-start\n    getMany: async ({ resource, ids }) => {\n        const { data } = await httpClient.get(\n            `${apiUrl}/${resource}?${stringify({ id: ids })}`,\n        );\n\n        return {\n            data,\n        };\n    },\n// highlight-end\n    ...\n})\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"We are using the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/query-string"},(0,r.kt)("inlineCode",{parentName:"a"},"query-string"))," package for ",(0,r.kt)("inlineCode",{parentName:"p"},"stringify"),"."))),(0,r.kt)("h4",{id:"parameter-types-7"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ids"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},"BaseKey[]")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"getMany")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useMany } from "@pankod/refine-core";\n\nconst { data } = useMany({ resource: "categories", ids: ["1", "2"] });\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useMany"},"Refer to the useMany documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"getlist"},(0,r.kt)("inlineCode",{parentName:"h3"},"getList")),(0,r.kt)("p",null,"This method allows us to retrieve a collection of items in a resource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n// highlight-start\n    getList: async ({ resource, hasPagination, pagination, filters, sort }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { data, headers } = await httpClient.get(\n            `${url}`,\n        );\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n// highlight-end\n}\n')),(0,r.kt)("h4",{id:"parameter-types-8"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasPagination?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,r.kt)("em",{parentName:"td"},"(defaults to ",(0,r.kt)("inlineCode",{parentName:"em"},"true"),")"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pagination?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#pagination"},(0,r.kt)("inlineCode",{parentName:"a"},"Pagination")),";")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sort?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")),";")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")),";")))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useList")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useList } from "@pankod/refine-core";\n\nconst { data } = useList({ resource: "posts" });\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useList"},"Refer to the useList documentation for more information. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Adding pagination")),(0,r.kt)("p",null,"We will send start and end parameters to list a certain size of items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'// highlight-next-line\nimport { stringify } from "query-string";\n\nconst SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n// highlight-next-line\n    getList: async ({ resource, hasPagination = true, pagination, filters, sort }) => {\n        const url = `${apiUrl}/${resource}`;\n\n// highlight-start\n        const current = pagination?.current || 1;\n        const pageSize = pagination?.pageSize || 10;\n// highlight-end\n\n// highlight-start\n        const query = hasPagination ? {\n            _start: (current - 1) * pageSize,\n            _end: current * pageSize,\n        } : {};\n// highlight-end\n\n        const { data, headers } = await httpClient.get(\n// highlight-next-line\n            `${url}?${stringify(query)}`,\n        );\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n')),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useList } from "@pankod/refine-core";\n\nconst { data } = useList({\n    resource: "posts",\n    config: {\n        // highlight-next-line\n        pagination: { current: 1, pageSize: 10 },\n        // highlight-next-line\n        hasPagination: true, // This can be omitted since it\'s default to `true` in the `getList` method of our data provider.\n    },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Listing will start from page 1 showing 10 records.")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Adding sorting")),(0,r.kt)("p",null,"We'll sort records by speficified order and field."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences#crudoperators"},"CrudSorting")," ?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'// highlight-start\nconst generateSort = (sort?: CrudSorting) => {\n    let _sort = ["id"]; // default sorting field\n    let _order = ["desc"]; // default sorting\n\n    if (sort) {\n        _sort = [];\n        _order = [];\n\n        sort.map((item) => {\n            _sort.push(item.field);\n            _order.push(item.order);\n        });\n    }\n\n    return {\n        _sort,\n        _order,\n    };\n};\n// highlight-end\n\nconst SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    getList: async ({ resource, hasPagination = true, pagination, filters, sort }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const current = pagination?.current || 1;\n        const pageSize = pagination?.pageSize || 10;\n\n// highlight-next-line\n        const { _sort, _order } = generateSort(sort);\n\n        const query = {\n            ...(hasPagination ? {\n                _start: (current - 1) * pageSize,\n                _end: current * pageSize,\n            } : {}),\n// highlight-start\n            _sort: _sort.join(","),\n            _order: _order.join(","),\n// highlight-end\n        };\n\n        const { data, headers } = await httpClient.get(\n// highlight-next-line\n            `${url}?${stringify(query)}`,\n        );\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n}\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Since our API accepts only certain parameter formats like ",(0,r.kt)("inlineCode",{parentName:"p"},"_sort")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_order")," we may need to transform some of the parameters."),(0,r.kt)("p",null,"So we added the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateSort")," method to transform sort parameters."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useList } from "@pankod/refine-core";\n\nconst { data } = useList({\n    resource: "posts",\n    config: {\n        pagination: { current: 1, pageSize: 10 },\n        // highlight-next-line\n        sort: [{ order: "asc", field: "title" }],\n    },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Listing starts from ascending alphabetical order on title field.")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Adding filtering")),(0,r.kt)("p",null,"Filters allow you to filter queries using ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences#crudoperators"},"refine's filter operators"),". It is configured via field, operator and value properites."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'const generateSort = (sort?: CrudSorting) => {\n    let _sort = ["id"]; // default sorting field\n    let _order = ["desc"]; // default sorting\n\n    if (sort) {\n        _sort = [];\n        _order = [];\n\n        sort.map((item) => {\n            _sort.push(item.field);\n            _order.push(item.order);\n        });\n    }\n\n    return {\n        _sort,\n        _order,\n    };\n};\n\n// highlight-start\nconst mapOperator = (operator: CrudOperators): string => {\n    switch (operator) {\n        case "ne":\n        case "gte":\n        case "lte":\n            return `_${operator}`;\n        case "contains":\n            return "_like";\n    }\n\n    return ""; // default "eq"\n};\n\nconst generateFilter = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: string } = {};\n    if (filters) {\n        filters.map(({ field, operator, value }) => {\n            const mappedOperator = mapOperator(operator);\n            queryFilters[`${field}${mappedOperator}`] = value;\n        });\n    }\n\n    return queryFilters;\n};\n// highlight-end\n\nconst SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n    getList: async ({ resource, hasPagination = true, pagination, filters, sort }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const current = pagination?.current || 1;\n        const pageSize = pagination?.pageSize || 10;\n\n        const { _sort, _order } = generateSort(sort);\n\n// highlight-next-line\n        const queryFilters = generateFilter(filters);\n\n        const query = {\n            ...(hasPagination ? {\n                _start: (current - 1) * pageSize,\n                _end: current * pageSize,\n            } : {}),\n            _sort: _sort.join(","),\n            _order: _order.join(","),\n        };\n\n        const { data, headers } = await httpClient.get(\n// highlight-next-line\n            `${url}?${stringify(query)}&${stringify(queryFilters)}`,\n        );\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n}\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Since our API accepts only certain parameter formats to filter the data, we may need to transform some parameters."),(0,r.kt)("p",null,"So we added the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateFilter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mapOperator")," methods to the transform filter parameters."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences#crudoperators"},"Refer to the list of all filter operators ","\u2192")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useList } from "@pankod/refine-core";\n\nconst { data } = useList({\n    resource: "posts",\n    config: {\n        // highlight-start\n        pagination: { current: 1, pageSize: 10 },\n        sort: [{ order: "asc", field: "title" }],\n        filters: [\n            {\n                field: "status",\n                operator: "eq",\n                value: "rejected",\n            },\n        ],\n    },\n    // highlight-end\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'Only lists records whose status equals to "rejected".')),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"custom"},(0,r.kt)("inlineCode",{parentName:"h3"},"custom")),(0,r.kt)("p",null,"An optional method named ",(0,r.kt)("inlineCode",{parentName:"p"},"custom")," can be added to handle requests with custom parameters like URL, CRUD methods and configurations.",(0,r.kt)("br",{parentName:"p"}),"\n","It's useful if you have non-stantard REST API endpoints or want to make a connection with external resources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'const SimpleRestDataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n custom: async ({ url, method, filters, sort, payload, query, headers }) => {\n        let requestUrl = `${url}?`;\n\n        if (sort) {\n            const { _sort, _order } = generateSort(sort);\n            const sortQuery = {\n                _sort: _sort.join(","),\n                _order: _order.join(","),\n            };\n            requestUrl = `${requestUrl}&${stringify(sortQuery)}`;\n        }\n\n        if (filters) {\n            const filterQuery = generateFilter(filters);\n            requestUrl = `${requestUrl}&${stringify(filterQuery)}`;\n        }\n\n        if (query) {\n            requestUrl = `${requestUrl}&${stringify(query)}`;\n        }\n\n        if (headers) {\n            httpClient.defaults.headers = {\n                ...httpClient.defaults.headers,\n                ...headers,\n            };\n        }\n\n        let axiosResponse;\n        switch (method) {\n            case "put":\n            case "post":\n            case "patch":\n                axiosResponse = await httpClient[method](url, payload);\n                break;\n            case "delete":\n                axiosResponse = await httpClient.delete(url);\n                break;\n            default:\n                axiosResponse = await httpClient.get(requestUrl);\n                break;\n        }\n\n        const { data } = axiosResponse;\n\n        return Promise.resolve({ data });\n    },\n }\n')),(0,r.kt)("h4",{id:"parameter-types-9"},"Parameter Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"url"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"method"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"get"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"delete"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"head"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"options"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"post"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"put"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"patch"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sort?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")),";")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")),";")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"payload?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headers?"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.kt)("inlineCode",{parentName:"p"},"custom")," method using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useCustom")," data hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCustom } from "@pankod/refine-core";\n\nconst { data, isLoading } = useCustom({\n    url: `${apiURL}/posts-unique-check`,\n    method: "get",\n    config: {\n        query: {\n            title: "Foo bar",\n        },\n    },\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useCustom"},"Refer to the useCustom documentation for more information. ","\u2192"))),(0,r.kt)("h3",{id:"error-format"},"Error Format"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," expects errors to be extended from ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")),".",(0,r.kt)("br",{parentName:"p"}),"\n","Axios interceptor can be used to transform the error from response before Axios returns the response to your code. Interceptors are methods which are triggered before the main method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},"...\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    },\n);\n...\n")))}u.isMDXComponent=!0},70343:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flow-3900c017d7457201e2d8f306c9dec91f.png"}}]);