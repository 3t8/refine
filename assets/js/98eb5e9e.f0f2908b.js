"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[13658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=s(n),c=o,k=m["".concat(l,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},30721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>d,metadata:()=>s,toc:()=>u});var a=n(87462),o=(n(67294),n(3905)),r=n(73879),i=n(38302);const d={id:"edit",title:"Edit"},l=void 0,s={unversionedId:"ui-frameworks/antd/components/basic-views/edit",id:"ui-frameworks/antd/components/basic-views/edit",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/docs/ui-frameworks/antd/components/basic-views/edit.md",sourceDirName:"ui-frameworks/antd/components/basic-views",slug:"/ui-frameworks/antd/components/basic-views/edit",permalink:"/docs/ui-frameworks/antd/components/basic-views/edit",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/ui-frameworks/antd/components/basic-views/edit.md",tags:[],version:"current",lastUpdatedBy:"Melih \xd6zkalay",lastUpdatedAt:1661510071,formattedLastUpdatedAt:"Aug 26, 2022",frontMatter:{id:"edit",title:"Edit"},sidebar:"someSidebar",previous:{title:"Create",permalink:"/docs/ui-frameworks/antd/components/basic-views/create"},next:{title:"List",permalink:"/docs/ui-frameworks/antd/components/basic-views/list"}},p={},u=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>canDelete</code> and <code>deleteButtonProps</code>",id:"candelete-and-deletebuttonprops",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>mutationMode</code>",id:"mutationmode",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"<del><code>actionButtons</code></del>",id:"actionbuttons",level:3},{value:"<del><code>pageHeaderProps</code></del>",id:"pageheaderprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],m={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,o.kt)("p",null,"We will show what ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/2",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/2"},'const { Edit, Form, Input, Select, useForm, useSelect, EditButton } =\n    RefineAntd;\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\n// visible-block-start\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n\nimport {\n    Edit,\n    Form,\n    Input,\n    Select,\n    useForm,\n    useSelect,\n} from "@pankod/refine-antd";\n\nconst PostEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n        warnWhenUnsavedChanges: true,\n    });\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n        defaultValue: postData?.category.id,\n    });\n\n    const [selectedTab, setSelectedTab] =\n        useState<"write" | "preview">("write");\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label="Category"\n                    name={["category", "id"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label="Status"\n                    name="status"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select\n                        options={[\n                            {\n                                label: "Published",\n                                value: "published",\n                            },\n                            {\n                                label: "Draft",\n                                value: "draft",\n                            },\n                            {\n                                label: "Rejected",\n                                value: "rejected",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton recordItemId="2">Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h3"},"title")),(0,o.kt)("p",null,"It allows adding titles inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>"),' component. if you don\'t pass title props it uses the "Edit" prefix and singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, Form, Input, Select, useForm, useSelect, EditButton } =\n    RefineAntd;\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n    ...dataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n        return {\n            data: {},\n        };\n    },\n};\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit title="Custom Title">\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton recordItemId="2">Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"savebuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button by default. If you want to customize this button you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,o.kt)("p",null,"Clicking on the save button will submit your form."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/ui-frameworks/antd/components/buttons/save-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, Form, Input, Select, useForm, useSelect, EditButton } =\n    RefineAntd;\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit saveButtonProps={{ size: "small" }}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"candelete-and-deletebuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"deleteButtonProps")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," property,refine adds the delete button by default. If you want to customize this button you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.kt)("p",null,"When clicked on, the delete button executes the ",(0,o.kt)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/ui-frameworks/antd/components/buttons/delete-button"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, Form, Input, Select, useForm, useSelect, EditButton } =\n    RefineAntd;\nconst { usePermissions } = RefineCore;\n\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n    ...dataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n        return {\n            data: {},\n        };\n    },\n};\n\nconst authProvider = {\n    login: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve("admin"),\n    getUserIdentity: () => Promise.resolve(),\n};\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\nimport { usePermissions } from "@pankod/refine-core";\n\nconst PostEdit: React.FC = () => {\n    const { data: permissionsData } = usePermissions();\n    return (\n        <Edit\n            /* highlight-start */\n            canDelete={permissionsData?.includes("admin")}\n            deleteButtonProps={{ size: "small" }}\n            /* highlight-end */\n            saveButtonProps={{ size: "small" }}\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        authProvider={authProvider}\n        dataProvider={customDataProvider}\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton>Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/auth/usePermissions"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192")),(0,o.kt)("h3",{id:"resource"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component in a custom page, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guides-and-concepts/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/2"},'const { Edit } = RefineAntd;\nconst { Refine } = RefineCore;\nconst routerProvider = RefineDemoReactRouterV6(["/custom/2"]);\nconst dataProvider = RefineSimpleRest.default;\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport { Edit } from "@pankod/refine-antd";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst CustomPage: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit resource="posts">\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    {\n                        element: <CustomPage />,\n                        path: "/custom/:id",\n                    },\n                ],\n                // highlight-end\n            }}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,o.kt)("h3",{id:"recorditemid"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL(when used on a custom page, modal or drawer)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const {\n    Edit,\n    Form,\n    Input,\n    Select,\n    useForm,\n    useSelect,\n    EditButton,\n    useModalForm,\n    Modal,\n    Button,\n} = RefineAntd;\n\n// visible-block-start\nimport { Edit, useModalForm, Modal, Button } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    const { modalProps, id, show } = useModalForm({\n        action: "edit",\n    });\n\n    return (\n        <div>\n            <Button onClick={() => show()}>Edit Button</Button>\n            <Modal {...modalProps}>\n                {/* highlight-next-line */}\n                <Edit recordItemId={id}>\n                    <p>Rest of your page here</p>\n                </Edit>\n            </Modal>\n        </div>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton recordItemId="2">Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly.")),(0,o.kt)("h3",{id:"mutationmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"mutationMode")),(0,o.kt)("p",null,"Determines which mode mutation will have while executing ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," ."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guides-and-concepts/mutation-mode"},"Refer to the mutation mode docs for further information. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/2",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/2"},'const { Edit, Form, Input, Select, useForm, useSelect, EditButton } =\n    RefineAntd;\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\n// visible-block-start\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n\nimport {\n    Edit,\n    Form,\n    Input,\n    Select,\n    useForm,\n    useSelect,\n} from "@pankod/refine-antd";\n\nconst PostEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps, queryResult } = useForm<IPost>({\n        warnWhenUnsavedChanges: true,\n    });\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "categories",\n        defaultValue: postData?.category.id,\n    });\n\n    const [selectedTab, setSelectedTab] =\n        useState<"write" | "preview">("write");\n\n    return (\n        <Edit\n            /* highlight-next-line */\n            mutationMode="undoable"\n            saveButtonProps={saveButtonProps}\n        >\n            <Form {...formProps} layout="vertical">\n                <Form.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label="Category"\n                    name={["category", "id"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label="Status"\n                    name="status"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select\n                        options={[\n                            {\n                                label: "Published",\n                                value: "published",\n                            },\n                            {\n                                label: "Draft",\n                                value: "draft",\n                            },\n                            {\n                                label: "Rejected",\n                                value: "rejected",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton recordItemId="2">Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"dataprovidername"},(0,o.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,o.kt)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@pankod/refine-core";\nimport { Edit } from "@pankod/refine-antd";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-start\nconst PostEdit = () => {\n    return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            // highlight-start\n            dataProvider={{\n                default: dataProvider("https://api.fake-rest.refine.dev/"),\n                other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n            }}\n            // highlight-end\n            resources={[{ name: "posts", edit: PostEdit }]}\n        />\n    );\n};\n')),(0,o.kt)("h3",{id:"goback"},(0,o.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,o.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, Icons, EditButton } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Icons } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit goBack={<Icons.SmileOutlined />}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts", "/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton>Edit Item 2</EditButton>\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"isloading"},(0,o.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,o.kt)("p",null,"To toggle the loading state of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton } = RefineAntd;\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Edit isLoading={true}>\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"breadcrumb"},(0,o.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,o.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," package."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/ui-frameworks/antd/components/breadcrumb"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton, Breadcrumb } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Breadcrumb } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            breadcrumb={\n                <div\n                    style={{\n                        padding: "3px 6px",\n                        border: "2px dashed cornflowerblue",\n                    }}\n                >\n                    <Breadcrumb />\n                </div>\n            }\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"wrapperprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,o.kt)("p",null,"If you want to customize the wrapper of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,o.kt)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," wrapper elements are simple ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton } = RefineAntd;\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            wrapperProps={{\n                style: {\n                    backgroundColor: "cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"headerprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,o.kt)("p",null,"If you want to customize the header of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/page-header/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"PageHeader")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton } = RefineAntd;\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerProps={{\n                subTitle: "This is a subtitle",\n                style: {\n                    backgroundColor: "cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"contentprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,o.kt)("p",null,"If you want to customize the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/card/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton } = RefineAntd;\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            contentProps={{\n                style: {\n                    backgroundColor: "cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"headerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton, Button } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Button } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit/2"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"headerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton, Button } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Button } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            headerButtonProps={{\n                style: {\n                    backgroundColor: "cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n            headerButtons={<Button type="primary">Custom Button</Button>}\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"footerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton, Button } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Button } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            footerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"footerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { Edit, EditButton, Button } = RefineAntd;\n\n// visible-block-start\nimport { Edit, Button } from "@pankod/refine-antd";\n\nconst PostEdit: React.FC = () => {\n    return (\n        <Edit\n            // highlight-start\n            footerButtonProps={{\n                style: {\n                    // hide-start\n                    float: "right",\n                    marginRight: 24,\n                    // hide-end\n                    backgroundColor: "cornflowerblue",\n                    padding: "16px",\n                },\n            }}\n            // highlight-end\n        >\n            <p>Rest of your page here</p>\n        </Edit>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineAntdDemo\n        initialRoutes={["/posts/edit"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <EditButton />\n                    </div>\n                ),\n                edit: PostEdit,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"actionbuttons"},(0,o.kt)("del",{parentName:"h3"},(0,o.kt)("inlineCode",{parentName:"del"},"actionButtons"))),(0,o.kt)("admonition",{title:"Deprecated",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtons")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtons")," instead.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," uses the Ant Design ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/card"},(0,o.kt)("inlineCode",{parentName:"a"},"<Card>"))," component. The ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Card>")," component shows ",(0,o.kt)("inlineCode",{parentName:"p"},"<SaveButton>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"<DeleteButton>")," based on your resource definition in the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources")," property you pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>"),". If you want to use other things instead of these buttons, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"actionButton")," property like the code below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Edit, Button } from "@pankod/refine-antd";\n\nexport const EditPage: React.FC = () => {\n    return (\n        <Edit\n            actionButtons={\n                <>\n                    <Button type="primary">Custom Button 1</Button>\n                    <Button size="small">Custom Button 2</Button>\n                </>\n            }\n        >\n            ...\n        </Edit>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:i.Z,alt:"actionButton Usage"})),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"pageheaderprops"},(0,o.kt)("del",{parentName:"h3"},(0,o.kt)("inlineCode",{parentName:"del"},"pageHeaderProps"))),(0,o.kt)("admonition",{title:"Deprecated",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"contentProps")," instead.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," uses the Ant Design ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/page-header/#API"},(0,o.kt)("inlineCode",{parentName:"a"},"<PageHeader>"))," components, which means that you can customize the properties of ",(0,o.kt)("inlineCode",{parentName:"p"},"pageHeaderProps"),"."),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"extra")," property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<PageHeader>")," component shows ",(0,o.kt)("inlineCode",{parentName:"p"},"<RefreshButton>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"<ListButton>")," based on your resource definition in the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources")," property you pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property shows ",(0,o.kt)("a",{parentName:"p",href:"/docs/ui-frameworks/antd/components/breadcrumb"},(0,o.kt)("inlineCode",{parentName:"a"},"<Breadcrumb>"))," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Edit } from "@pankod/refine-antd";\n\nexport const EditPage: React.FC = () => {\n    return (\n        <Edit\n            pageHeaderProps={{\n                onBack: () => console.log("Hello, refine"),\n                subTitle: "Subtitle",\n            }}\n        >\n            ...\n        </Edit>\n    );\n};\n')),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:r.Z,alt:"pageHeaderProps Usage"})),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information for work properly so if you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component in custom pages, you should pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"recordItemId")," property.")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties-1"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"title"),(0,o.kt)("td",{parentName:"tr",align:null},"Adds the title"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"Edit"')," prefix and singular of ",(0,o.kt)("inlineCode",{parentName:"td"},"resource.name"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Adds properties for save button"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: () => void; loading: boolean; }")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<SaveButton>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"canDelete"),(0,o.kt)("td",{parentName:"tr",align:null},"Adds a delete button"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"If the resource has ",(0,o.kt)("inlineCode",{parentName:"td"},"canDelete")," prop it is ",(0,o.kt)("inlineCode",{parentName:"td"},"true")," else ",(0,o.kt)("inlineCode",{parentName:"td"},"false")," ",(0,o.kt)("inlineCode",{parentName:"td"},"false"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"deleteButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Adds properties for delete button"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#delete-button-props"},(0,o.kt)("inlineCode",{parentName:"a"},"DeleteButtonProps"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<DeleteButton>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resource"),(0,o.kt)("td",{parentName:"tr",align:null},"Resource name for API data interactions"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"Resource name that it reads from the URL.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"recordItemId"),(0,o.kt)("td",{parentName:"tr",align:null},"The record id for ",(0,o.kt)("inlineCode",{parentName:"td"},"<RefreshButton>")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#basekey"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseKey"))),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"mutationMode","*"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/guides-and-concepts/mutation-mode"},"Determines when mutations are executed")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},' "pessimistic')," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},'"optimistic')," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},'"undoable"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"pessimistic"'),"*")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"dataProviderName"),(0,o.kt)("td",{parentName:"tr",align:null},"To specify a data provider other than ",(0,o.kt)("inlineCode",{parentName:"td"},"default")," use this property"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"goBack"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom back icon element"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<ArrowLeft />"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"isLoading"),(0,o.kt)("td",{parentName:"tr",align:null},"Loading state of the component"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"breadcrumb"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom breadcrumb element"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<Breadcrumb/>"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"wrapperProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Wrapper element props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.DetailedHTMLProps<HTMLDivElement>")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"headerProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Header element props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"PageHeaderProps")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"contentProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Content wrapper element props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CardProps")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"headerButtons"),(0,o.kt)("td",{parentName:"tr",align:null},"Header buttons element or render function"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"({ defaultButtons: React.ReactNode }) => React.ReactNode")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"headerButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Header buttons wrapper element props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SpaceProps")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"footerButtons"),(0,o.kt)("td",{parentName:"tr",align:null},"Footer buttons element or render function"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"({ defaultButtons: React.ReactNode }) => React.ReactNode")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"footerButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Footer buttons wrapper element props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SpaceProps")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("div",{className:"required-block"},(0,o.kt)("div",null,"actionButtons")," ",(0,o.kt)("div",{className:" required"},"deprecated"))),(0,o.kt)("td",{parentName:"tr",align:null},"Passes properties for ",(0,o.kt)("inlineCode",{parentName:"td"},"<PageHeader>")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<SaveButton>")," and depending on your resource configuration (",(0,o.kt)("inlineCode",{parentName:"td"},"canDelete")," prop)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("div",{className:"required-block"},(0,o.kt)("div",null,"pageHeaderProps")," ",(0,o.kt)("div",{className:" required"},"deprecated"))),(0,o.kt)("td",{parentName:"tr",align:null},"Passes properties for ",(0,o.kt)("inlineCode",{parentName:"td"},"<PageHeader>")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://ant.design/components/page-header/#API"},"PageHeaderProps")),(0,o.kt)("td",{parentName:"tr",align:null},"{ ghost: false, ",(0,o.kt)("a",{parentName:"td",href:"#title"},"title"),", extra: ",(0,o.kt)("inlineCode",{parentName:"td"},"<ListButton>")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"<RefreshButton>"),", breadcrumb: ",(0,o.kt)("a",{parentName:"td",href:"/docs/ui-frameworks/antd/components/breadcrumb"},"Breadcrumb")," }")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"*"),": These properties have default values in ",(0,o.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on the ",(0,o.kt)("strong",{parentName:"p"},"<",(0,o.kt)("a",{parentName:"strong",href:"/docs/core/components/refine-config"},"Refine"),">")," component.")))}c.isMDXComponent=!0},38302:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/actionButtonsUsage-bcf48b15fe78fd35447fc54bd3a2df99.png"},73879:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pageHeaderPropsUsage-d587110983b9d3d49bd09934a25ba7e9.png"}}]);