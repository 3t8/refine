"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[69218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),p=o,v=m["".concat(l,".").concat(p)]||m[p]||u[p]||r;return n?a.createElement(v,i(i({ref:t},c),{},{components:n})):a.createElement(v,i({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91604:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r=n.p+"assets/images/saveButtons-83cbe2f0c1734df19bef3c3c3c05dfc3.png",i={id:"save-and-continue",title:"Save and Continue"},s=void 0,l={unversionedId:"guides-and-concepts/forms/save-and-continue",id:"guides-and-concepts/forms/save-and-continue",title:"Save and Continue",description:"refine provides you with the necessary methods to add this feature. This feature is familiar to Django users.",source:"@site/docs/guides-and-concepts/forms/save-and-continue.md",sourceDirName:"guides-and-concepts/forms",slug:"/guides-and-concepts/forms/save-and-continue",permalink:"/docs/guides-and-concepts/forms/save-and-continue",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/guides-and-concepts/forms/save-and-continue.md",tags:[],version:"current",lastUpdatedBy:"Melih \xd6zkalay",lastUpdatedAt:1657179154,formattedLastUpdatedAt:"7/7/2022",frontMatter:{id:"save-and-continue",title:"Save and Continue"},sidebar:"someSidebar",previous:{title:"Custom Form Validation",permalink:"/docs/guides-and-concepts/forms/custom-form-validation"},next:{title:"CSV Export",permalink:"/docs/guides-and-concepts/import-export/csv-export"}},d={},c=[{value:"Disable <code>useForm</code> redirection after successfull mutation",id:"disable-useform-redirection-after-successfull-mutation",level:3},{value:"Creating form and adding buttons",id:"creating-form-and-adding-buttons",level:3},{value:"Handling submit events on buttons",id:"handling-submit-events-on-buttons",level:3},{value:"Live StackBlitz Example",id:"live-stackblitz-example",level:2}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"refine provides you with the necessary methods to add this feature. This feature is familiar to ",(0,o.kt)("a",{parentName:"p",href:"https://www.djangoproject.com/"},"Django")," users."),(0,o.kt)("p",null,"We have three save options: ",(0,o.kt)("inlineCode",{parentName:"p"},"Save"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Save and continue editing")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Save and add another"),"."),(0,o.kt)("p",null,"Now let's see how to handle these cases,"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Show Posts List"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/posts/pages/list.tsx"',title:'"src/posts/pages/list.tsx"'},'import { useTable, useNavigation } from "@pankod/refine-core";\n\nimport { IPost } from "interfaces";\n\nexport const PostList: React.FC = () => {\n    const { tableQueryResult } = useTable<IPost>();\n    const { edit, create } = useNavigation();\n\n    return (\n        <div>\n            <button onClick={() => create("posts")}>Create Post</button>\n            <table>\n                <thead>\n                    <td>ID</td>\n                    <td>Title</td>\n                    <td>Actions</td>\n                </thead>\n                <tbody>\n                    {tableQueryResult.data?.data.map((post) => (\n                        <tr key={post.id}>\n                            <td>{post.id}</td>\n                            <td>{post.title}</td>\n                            <td>\n                                <button onClick={() => edit("posts", post.id)}>\n                                    Edit\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n')))),(0,o.kt)("h3",{id:"disable-useform-redirection-after-successfull-mutation"},"Disable ",(0,o.kt)("inlineCode",{parentName:"h3"},"useForm")," redirection after successfull mutation"),(0,o.kt)("p",null,"When we create our Create Page, we pass ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect")," false to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," hook that we will use to manage the form. Thus, we will be able to do the redirection we want in our buttons."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/create.tsx"',title:'"src/pages/create.tsx"'},'// highlight-next-line\nimport { useForm } from "@pankod/refine-core";\n\nimport { IPost } from "interfaces";\n\nexport const PostCreate: React.FC = () => {\n    const { formLoading, onFinish, redirect } = useForm<IPost>({\n        // highlight-next-line\n        redirect: false,\n    });\n};\n')),(0,o.kt)("h3",{id:"creating-form-and-adding-buttons"},"Creating form and adding buttons"),(0,o.kt)("p",null,"We will create the form and listen to the changes in this form with the help of a state. We add the ",(0,o.kt)("inlineCode",{parentName:"p"},"Save"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Save and continue editing")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Save and add another")," buttons that we will use to submit the form to our page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/create.tsx"',title:'"src/pages/create.tsx"'},'import React, { useState } from "react";\nimport { useSelect, useForm, useNavigation } from "@pankod/refine-core";\n\nimport { IPost } from "interfaces";\n\nexport const PostCreate: React.FC = () => {\n    const [formValues, setFormValues] = useState({\n        title: "",\n        content: "",\n        status: "draft",\n        category: {\n            id: "",\n        },\n    });\n    const { formLoading, onFinish, redirect } = useForm<IPost>({\n        redirect: false,\n    });\n\n    const { goBack } = useNavigation();\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    return (\n        <div>\n            <button className="back" onClick={() => goBack()}>\n                Go Back\n            </button>\n            <form className="form-wrapper">\n                <div className="form-group">\n                    <label>Title: </label>\n                    <input\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                title: e.target.value,\n                            })\n                        }\n                        value={formValues.title}\n                    />\n                </div>\n                <div className="form-group">\n                    <label>Status: </label>\n                    <select\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                status: e.target.value as IPost["status"],\n                            })\n                        }\n                        value={formValues.status}\n                    >\n                        <option value="published">published</option>\n                        <option value="draft">draft</option>\n                        <option value="rejected">rejected</option>\n                    </select>\n                </div>\n                <div className="form-group">\n                    <label>Category: </label>\n                    <select\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                category: {\n                                    id: e.target.value,\n                                },\n                            })\n                        }\n                        value={formValues.category.id}\n                    >\n                        <option value={""} disabled>\n                            Please select\n                        </option>\n                        {options?.map((category) => (\n                            <option key={category.value} value={category.value}>\n                                {category.label}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                <div className="form-group">\n                    <label>Content: </label>\n\n                    <textarea\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                content: e.target.value,\n                            })\n                        }\n                        rows={10}\n                        cols={50}\n                        value={formValues.content}\n                    />\n                </div>\n                <div className="saveActions">\n                    // highlight-start\n                    <button type="button">Save</button>\n                    <button stype="button">Save and continue editing</button>\n                    <button type="button">Save and add another</button>\n                    // highlight-end\n                </div>\n                {formLoading && <p>Loading</p>}\n            </form>\n        </div>\n    );\n};\n')),(0,o.kt)("div",{class:"img-container"},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:r,alt:"save and continue buttons"})),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"handling-submit-events-on-buttons"},"Handling submit events on buttons"),(0,o.kt)("p",null,"We will use ",(0,o.kt)("inlineCode",{parentName:"p"},"handleSubmit")," function to manage submit event when clicking the buttons we created."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"onFinish")," function resolves to respect the ",(0,o.kt)("inlineCode",{parentName:"p"},"mutationMode")," property. In ",(0,o.kt)("inlineCode",{parentName:"p"},"pessimistic")," mode it will resolve after the response is returned from the request, in ",(0,o.kt)("inlineCode",{parentName:"p"},"optimistic")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"undoable")," modes it will resolve immediately. Only real await will happen in pessimistic mode and this will resolve with the response data, others will resolve immediately with undefined data."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"/docs/guides-and-concepts/mutation-mode"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"mutationMode")," documentation for more details. ","\u2192")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/create.tsx"',title:'"src/pages/create.tsx"'},'import React, { useState } from "react";\nimport { useSelect, useForm, useNavigation } from "@pankod/refine-core";\n\nimport { IPost } from "interfaces";\n\nexport const PostCreate: React.FC = () => {\n    const [formValues, setFormValues] = useState({\n        title: "",\n        content: "",\n        status: "draft",\n        category: {\n            id: "",\n        },\n    });\n    const { formLoading, onFinish, redirect } = useForm<IPost>({\n        redirect: false,\n    });\n\n    const { goBack } = useNavigation();\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    // highlight-start\n    const handleSubmit = async (redirectTo: "list" | "edit" | "create") => {\n        const response = await onFinish(formValues);\n\n        setFormValues({\n            title: "",\n            content: "",\n            status: "draft",\n            category: {\n                id: "",\n            },\n        });\n\n        redirect(redirectTo, response?.data?.id);\n    };\n    // highlight-end\n\n    return (\n        <div>\n            <button className="back" onClick={() => goBack()}>\n                Go Back\n            </button>\n            <form className="form-wrapper">\n                <div className="form-group">\n                    <label>Title: </label>\n                    <input\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                title: e.target.value,\n                            })\n                        }\n                        value={formValues.title}\n                    />\n                </div>\n                <div className="form-group">\n                    <label>Status: </label>\n                    <select\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                status: e.target.value as IPost["status"],\n                            })\n                        }\n                        value={formValues.status}\n                    >\n                        <option value="published">published</option>\n                        <option value="draft">draft</option>\n                        <option value="rejected">rejected</option>\n                    </select>\n                </div>\n                <div className="form-group">\n                    <label>Category: </label>\n                    <select\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                category: {\n                                    id: e.target.value,\n                                },\n                            })\n                        }\n                        value={formValues.category.id}\n                    >\n                        <option value={""} disabled>\n                            Please select\n                        </option>\n                        {options?.map((category) => (\n                            <option key={category.value} value={category.value}>\n                                {category.label}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                <div className="form-group">\n                    <label>Content: </label>\n\n                    <textarea\n                        required\n                        onChange={(e) =>\n                            setFormValues({\n                                ...formValues,\n                                content: e.target.value,\n                            })\n                        }\n                        rows={10}\n                        cols={50}\n                        value={formValues.content}\n                    />\n                </div>\n                <div className="saveActions">\n                    // highlight-start\n                    <button onClick={() => handleSubmit("list")} type="button">\n                        Save\n                    </button>\n                    <button onClick={() => handleSubmit("edit")} type="button">\n                        Save and continue editing\n                    </button>\n                    <button\n                        onClick={() => handleSubmit("create")}\n                        type="button"\n                    >\n                        Save and add another\n                    </button>\n                    // highlight-end\n                </div>\n                {formLoading && <p>Loading</p>}\n            </form>\n        </div>\n    );\n};\n')),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We used the ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect")," method to perform the redirection, which returns from ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," instead of ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/navigation/useNavigation"},(0,o.kt)("inlineCode",{parentName:"a"},"useNavigation"))," Thus, we can do our routing without dealing with managing resources."))),(0,o.kt)("h2",{id:"live-stackblitz-example"},"Live StackBlitz Example"),(0,o.kt)("iframe",{src:"https://stackblitz.com/github/pankod/refine/tree/master/examples/form/headless/saveAndContinue?embed=1&view=preview&theme=dark&preset=node",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-custom-validation-example-app"}))}m.isMDXComponent=!0}}]);