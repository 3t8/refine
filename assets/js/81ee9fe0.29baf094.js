"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[36682],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>m});var o=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=o.createContext({}),u=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},d=function(n){var e=u(n.components);return o.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},c=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),c=u(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||p[m]||i;return t?o.createElement(f,a(a({ref:e},d),{},{components:t})):o.createElement(f,a({ref:e},d))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,a=new Array(i);a[0]=c;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},48073:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const i=t.p+"assets/images/custom-menu-e646c121ef9f97df3f3586ab5d819d8a.gif",a=t.p+"assets/images/custom-menu-logout-d76867c98429c579daf7c6b59118b451.gif",s=t.p+"assets/images/custom-menu-mobile-0954bdc2fd8cff79772e1d37dc9bbd0f.gif",l={id:"mui-custom-sider",title:"Custom Sider"},u=void 0,d={unversionedId:"ui-frameworks/mui/customization/mui-custom-sider",id:"ui-frameworks/mui/customization/mui-custom-sider",title:"Custom Sider",description:"You can create a custom ` component and use it either by passing it to ` or using a Custom Layout.",source:"@site/docs/ui-frameworks/mui/customization/sider.md",sourceDirName:"ui-frameworks/mui/customization",slug:"/ui-frameworks/mui/customization/mui-custom-sider",permalink:"/docs/ui-frameworks/mui/customization/mui-custom-sider",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/ui-frameworks/mui/customization/sider.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1657104587,formattedLastUpdatedAt:"Jul 6, 2022",frontMatter:{id:"mui-custom-sider",title:"Custom Sider"},sidebar:"someSidebar",previous:{title:"Custom Layout",permalink:"/docs/ui-frameworks/mui/customization/mui-custom-layout"},next:{title:"Command Palette",permalink:"/docs/packages/command-palette"}},p={},c=[{value:"Recreating the Default Sider Menu",id:"recreating-the-default-sider-menu",level:2},{value:"Adding Logout Button",id:"adding-logout-button",level:3},{value:"Mobile View of Sider",id:"mobile-view-of-sider",level:3}],m={toc:c};function f(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can create a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"<Sider />")," component and use it either by passing it to ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/components/refine-config"},(0,r.kt)("inlineCode",{parentName:"a"},"<Refine />"))," or using a ",(0,r.kt)("a",{parentName:"p",href:"/docs/ui-frameworks/mui/customization/mui-custom-layout"},"Custom Layout"),"."),(0,r.kt)("h2",{id:"recreating-the-default-sider-menu"},"Recreating the Default Sider Menu"),(0,r.kt)("p",null,"We will show you how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"useMenu")," to create a custom sider menu that is identical to default sider menu."),(0,r.kt)("p",null,"First we define ",(0,r.kt)("inlineCode",{parentName:"p"},"<CustomMenu>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/CustomMenu.tsx"',title:'"src/CustomMenu.tsx"'},'import React, { useState } from "react";\nimport {\n    CanAccess,\n    ITreeMenu,\n    useTitle,\n    useMenu,\n    useTranslate,\n    useRouterContext,\n    useRefineContext,\n} from "@pankod/refine-core";\nimport {\n    Box,\n    Drawer,\n    MuiList,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Tooltip,\n    Button,\n    Title as DefaultTitle,\n} from "@pankod/refine-mui";\nimport {\n    Dashboard,\n    ListOutlined,\n    ExpandLess,\n    ExpandMore,\n    ChevronLeft,\n    ChevronRight,\n} from "@mui/icons-material";\n\nexport const CustomMenu: React.FC = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const [opened, setOpened] = useState(false);\n\n    const drawerWidth = () => {\n        if (collapsed) return 64;\n        return 200;\n    };\n\n    const t = useTranslate();\n\n    const { Link } = useRouterContext();\n    const { hasDashboard } = useRefineContext();\n\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu();\n    const Title = useTitle();\n\n    const [open, setOpen] = useState<{ [k: string]: any }>({});\n\n    React.useEffect(() => {\n        setOpen((previousOpen) => {\n            const previousOpenKeys: string[] = Object.keys(previousOpen);\n            const uniqueKeys = new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys,\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(\n                Array.from(uniqueKeys.values()).map((key) => [key, true]),\n            );\n            return uniqueKeysRecord;\n        });\n    }, [defaultOpenKeys]);\n\n    const RenderToTitle = Title ?? DefaultTitle;\n\n    const handleClick = (key: string) => {\n        setOpen({ ...open, [key]: !open[key] });\n    };\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const { icon, label, route, name, children, parentName } = item;\n            const isOpen = open[route || ""] || false;\n\n            const isSelected = route === selectedKey;\n            const isNested = !(parentName === undefined);\n\n            if (children.length > 0) {\n                return (\n                    <div key={route}>\n                        <Tooltip\n                            title={label ?? name}\n                            placement="right"\n                            disableHoverListener={!collapsed}\n                            arrow\n                        >\n                            <ListItemButton\n                                onClick={() => {\n                                    if (collapsed) {\n                                        setCollapsed(false);\n                                        if (!isOpen) {\n                                            handleClick(route || "");\n                                        }\n                                    } else {\n                                        handleClick(route || "");\n                                    }\n                                }}\n                                sx={{\n                                    pl: isNested ? 4 : 2,\n                                    justifyContent: "center",\n                                    "&.Mui-selected": {\n                                        "&:hover": {\n                                            backgroundColor: "transparent",\n                                        },\n                                        backgroundColor: "transparent",\n                                    },\n                                }}\n                            >\n                                <ListItemIcon\n                                    sx={{\n                                        justifyContent: "center",\n                                        minWidth: 36,\n                                        color: "primary.contrastText",\n                                    }}\n                                >\n                                    {icon ?? <ListOutlined />}\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={label}\n                                    primaryTypographyProps={{\n                                        noWrap: true,\n                                        fontSize: "14px",\n                                        fontWeight: isSelected\n                                            ? "bold"\n                                            : "normal",\n                                    }}\n                                />\n                                {!collapsed &&\n                                    (isOpen ? <ExpandLess /> : <ExpandMore />)}\n                            </ListItemButton>\n                        </Tooltip>\n                        {!collapsed && (\n                            <Collapse\n                                in={open[route || ""]}\n                                timeout="auto"\n                                unmountOnExit\n                            >\n                                <MuiList component="div" disablePadding>\n                                    {renderTreeView(children, selectedKey)}\n                                </MuiList>\n                            </Collapse>\n                        )}\n                    </div>\n                );\n            }\n\n            return (\n                <CanAccess\n                    key={route}\n                    resource={name.toLowerCase()}\n                    action="list"\n                >\n                    <Tooltip\n                        title={label ?? name}\n                        placement="right"\n                        disableHoverListener={!collapsed}\n                        arrow\n                    >\n                        <ListItemButton\n                            component={Link}\n                            to={route}\n                            selected={isSelected}\n                            onClick={() => {\n                                setOpened(false);\n                            }}\n                            sx={{\n                                pl: isNested ? 4 : 2,\n                                py: isNested ? 1.25 : 1,\n                                justifyContent: "center",\n                                "&.Mui-selected": {\n                                    "&:hover": {\n                                        backgroundColor: "transparent",\n                                    },\n                                    backgroundColor: "transparent",\n                                },\n                            }}\n                        >\n                            <ListItemIcon\n                                sx={{\n                                    justifyContent: "center",\n                                    minWidth: 36,\n                                    color: "primary.contrastText",\n                                }}\n                            >\n                                {icon ?? <ListOutlined />}\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={label}\n                                primaryTypographyProps={{\n                                    noWrap: true,\n                                    fontSize: "14px",\n                                    fontWeight: isSelected ? "bold" : "normal",\n                                }}\n                            />\n                        </ListItemButton>\n                    </Tooltip>\n                </CanAccess>\n            );\n        });\n    };\n\n    const drawer = (\n        <MuiList disablePadding sx={{ mt: 1, color: "primary.contrastText" }}>\n            {hasDashboard ? (\n                <Tooltip\n                    title={t("dashboard.title", "Dashboard")}\n                    placement="right"\n                    disableHoverListener={!collapsed}\n                    arrow\n                >\n                    <ListItemButton\n                        component={Link}\n                        to="/"\n                        selected={selectedKey === "/"}\n                        onClick={() => {\n                            setOpened(false);\n                        }}\n                        sx={{\n                            pl: 2,\n                            py: 1,\n                            "&.Mui-selected": {\n                                "&:hover": {\n                                    backgroundColor: "transparent",\n                                },\n                                backgroundColor: "transparent",\n                            },\n                            justifyContent: "center",\n                        }}\n                    >\n                        <ListItemIcon\n                            sx={{\n                                justifyContent: "center",\n                                minWidth: 36,\n                                color: "primary.contrastText",\n                            }}\n                        >\n                            <Dashboard />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t("dashboard.title", "Dashboard")}\n                            primaryTypographyProps={{\n                                noWrap: true,\n                                fontSize: "14px",\n                                fontWeight:\n                                    selectedKey === "/" ? "bold" : "normal",\n                            }}\n                        />\n                    </ListItemButton>\n                </Tooltip>\n            ) : null}\n            {renderTreeView(menuItems, selectedKey)}\n        </MuiList>\n    );\n\n    return (\n        <>\n            <Box\n                sx={{\n                    width: { xs: drawerWidth() },\n                    display: {\n                        xs: "none",\n                        md: "block",\n                    },\n                    transition: "width 0.3s ease",\n                }}\n            />\n            <Box\n                component="nav"\n                sx={{\n                    position: "fixed",\n                    zIndex: 1101,\n                    width: { sm: drawerWidth() },\n                    display: "flex",\n                }}\n            >\n                <Drawer\n                    variant="permanent"\n                    PaperProps={{ elevation: 1 }}\n                    sx={{\n                        display: { xs: "none", md: "block" },\n                        "& .MuiDrawer-paper": {\n                            width: drawerWidth,\n                            bgcolor: "secondary.main",\n                            overflow: "hidden",\n                            transition:\n                                "width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms",\n                        },\n                    }}\n                    open\n                >\n                    <Box\n                        sx={{\n                            height: 64,\n                            display: "flex",\n                            alignItems: "center",\n                            justifyContent: "center",\n                        }}\n                    >\n                        <RenderToTitle collapsed={collapsed} />\n                    </Box>\n                    <Box\n                        sx={{\n                            flexGrow: 1,\n                            overflowX: "hidden",\n                            overflowY: "auto",\n                        }}\n                    >\n                        // highlight-next-line\n                        {drawer}\n                    </Box>\n                    <Button\n                        sx={{\n                            background: "rgba(0,0,0,.5)",\n                            color: "primary.contrastText",\n                            textAlign: "center",\n                            borderRadius: 0,\n                            borderTop: "1px solid #ffffff1a",\n                        }}\n                        fullWidth\n                        size="large"\n                        onClick={() => setCollapsed((prev) => !prev)}\n                    >\n                        {collapsed ? <ChevronRight /> : <ChevronLeft />}\n                    </Button>\n                </Drawer>\n            </Box>\n        </>\n    );\n};\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useMenu")," hook is used to get style agnostic menu items. We render these items in the body of the sider. We create a recursive ",(0,r.kt)("inlineCode",{parentName:"p"},"renderTreeView")," function to create menu items from the list of resources passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),". We get the ",(0,r.kt)("inlineCode",{parentName:"p"},"Title")," component with the ",(0,r.kt)("inlineCode",{parentName:"p"},"useTitle")," hook."),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you want to create a multi-level menu, you can take a look at this ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/multi-level-menu/"},(0,r.kt)("inlineCode",{parentName:"a"},"multi-level menu"))," example and also ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides-and-concepts/multi-level-menu/"},(0,r.kt)("inlineCode",{parentName:"a"},"here"))," is the guide.")),(0,r.kt)("p",null,"We can override the default sider and show the custom menu we implemented in its place by passing a custom component to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),"s ",(0,r.kt)("inlineCode",{parentName:"p"},"Sider")," prop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport { PostList } from "pages/posts";\n\n// highlight-next-line\nimport { CustomMenu } from "./CustomMenu";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            dataProvider={dataProvider(API_URL)}\n            // highlight-next-line\n            Sider={CustomMenu\n            resources={[{ name: "posts", list: PostList }]}\n        />\n    );\n};\n\nexport default App;\n')),(0,r.kt)("div",{classname:"img-container"},(0,r.kt)("div",{classname:"window"},(0,r.kt)("div",{classname:"control red"}),(0,r.kt)("div",{classname:"control orange"}),(0,r.kt)("div",{classname:"control green"})),(0,r.kt)("img",{src:i,alt:"Custom Menu"})),(0,r.kt)("h3",{id:"adding-logout-button"},"Adding Logout Button"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useLogout")," hook allows us to add a Logout button to our menu if we have an authentication provider. When the Logout button is clicked, the ",(0,r.kt)("inlineCode",{parentName:"p"},"autProvider")," will be invoked and the user will be logged out. This is a convenient way to provide a Logout button for our users without having to implement the logic ourselves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/CustomMenu.tsx"',title:'"src/CustomMenu.tsx"'},'// imports\n\n    ...\n\nexport const CustomSider: React.FC = () => {\n    import {\n        ...\n        // highlight-start\n        useIsExistAuthentication,\n        useLogout,\n        // highlight-end\n        ...\n    } from "@pankod/refine-core";\n    // highlight-start\n    const isExistAuthentication = useIsExistAuthentication();\n    const { mutate: logout } = useLogout();\n    // highlight-end\n\n    ...\n\n    const drawer = (\n        <MuiList disablePadding sx={{ mt: 1, color: "primary.contrastText" }}>\n            {hasDashboard ? (\n                <Tooltip\n                    title={t("dashboard.title", "Dashboard")}\n                    placement="right"\n                    disableHoverListener={!collapsed}\n                    arrow\n                >\n                    <ListItemButton\n                        component={Link}\n                        to="/"\n                        selected={selectedKey === "/"}\n                        onClick={() => {\n                            setOpened(false);\n                        }}\n                        sx={{\n                            pl: 2,\n                            py: 1,\n                            "&.Mui-selected": {\n                                "&:hover": {\n                                    backgroundColor: "transparent",\n                                },\n                                backgroundColor: "transparent",\n                            },\n                            justifyContent: "center",\n                        }}\n                    >\n                        <ListItemIcon\n                            sx={{\n                                justifyContent: "center",\n                                minWidth: 36,\n                                color: "primary.contrastText",\n                            }}\n                        >\n                            {<ListOutlined />}\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t("dashboard.title", "Dashboard")}\n                            primaryTypographyProps={{\n                                noWrap: true,\n                                fontSize: "14px",\n                                fontWeight:\n                                    selectedKey === "/" ? "bold" : "normal",\n                            }}\n                        />\n                    </ListItemButton>\n                </Tooltip>\n            ) : null}\n            {renderTreeView(menuItems, selectedKey)}\n            // highlight-start\n            {isExistAuthentication && (\n                <Tooltip\n                    title={t("buttons.logout", "Logout")}\n                    placement="right"\n                    disableHoverListener={!collapsed}\n                    arrow\n                >\n                    <ListItemButton\n                        key="logout"\n                        // highlight-next-line\n                        onClick={() => logout()}\n                        sx={{ justifyContent: "center" }}\n                    >\n                        <ListItemIcon\n                            sx={{\n                                justifyContent: "center",\n                                minWidth: 36,\n                                color: "primary.contrastText",\n                            }}\n                        >\n                            <Logout />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t("buttons.logout", "Logout")}\n                            primaryTypographyProps={{\n                                noWrap: true,\n                                fontSize: "14px",\n                            }}\n                        />\n                    </ListItemButton>\n                </Tooltip>\n            )}\n            // highlight-end\n        </MuiList>\n    );\n    ...\n};\n')),(0,r.kt)("div",{classname:"img-container"},(0,r.kt)("div",{classname:"window"},(0,r.kt)("div",{classname:"control red"}),(0,r.kt)("div",{classname:"control orange"}),(0,r.kt)("div",{classname:"control green"})),(0,r.kt)("img",{src:a,alt:"Custom Menu Logout"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"mobile-view-of-sider"},"Mobile View of Sider"),(0,r.kt)("p",null,"By adding another drawer that opens on mobile, we can make the user experience even better!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/CustomMenu.tsx"',title:'"src/CustomMenu.tsx"'},'// imports\n...\n\nexport const CustomSider: React.FC = () => {\n    ...\n    return (\n        <>\n            <Box\n                sx={{\n                    width: { xs: drawerWidth() },\n                    display: {\n                        xs: "none",\n                        md: "block",\n                    },\n                    transition: "width 0.3s ease",\n                }}\n            />\n            <Box\n                component="nav"\n                sx={{\n                    position: "fixed",\n                    zIndex: 1101,\n                    width: { sm: drawerWidth() },\n                    display: "flex",\n                }}\n            >\n                // highlight-start\n                <Drawer\n                    variant="temporary"\n                    open={opened}\n                    onClose={() => setOpened(false)}\n                    ModalProps={{\n                        keepMounted: true, // Better open performance on mobile.\n                    }}\n                    sx={{\n                        display: { sm: "block", md: "none" },\n                        "& .MuiDrawer-paper": {\n                            width: 256,\n                            bgcolor: "secondary.main",\n                        },\n                    }}\n                >\n                    <Box\n                        sx={{\n                            height: 64,\n                            display: "flex",\n                            alignItems: "center",\n                            justifyContent: "center",\n                        }}\n                    >\n                        <RenderToTitle collapsed={false} />\n                    </Box>\n                    {drawer}\n                </Drawer>\n                // highlight-end\n                <Drawer\n                    variant="permanent"\n                    PaperProps={{ elevation: 1 }}\n                    sx={{\n                        display: { xs: "none", md: "block" },\n                        "& .MuiDrawer-paper": {\n                            width: drawerWidth,\n                            bgcolor: "secondary.main",\n                            overflow: "hidden",\n                            transition:\n                                "width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms",\n                        },\n                    }}\n                    open\n                >\n                    <Box\n                        sx={{\n                            height: 64,\n                            display: "flex",\n                            alignItems: "center",\n                            justifyContent: "center",\n                        }}\n                    >\n                        <RenderToTitle collapsed={collapsed} />\n                    </Box>\n                    <Box\n                        sx={{\n                            flexGrow: 1,\n                            overflowX: "hidden",\n                            overflowY: "auto",\n                        }}\n                    >\n                        {drawer}\n                    </Box>\n                    <Button\n                        sx={{\n                            background: "rgba(0,0,0,.5)",\n                            color: "primary.contrastText",\n                            textAlign: "center",\n                            borderRadius: 0,\n                            borderTop: "1px solid #ffffff1a",\n                        }}\n                        fullWidth\n                        size="large"\n                        onClick={() => setCollapsed((prev) => !prev)}\n                    >\n                        {collapsed ? <ChevronRight /> : <ChevronLeft />}\n                    </Button>\n                </Drawer>\n                // highlight-start\n                <Box\n                    sx={{\n                        display: { xs: "block", md: "none" },\n                        position: "fixed",\n                        top: "64px",\n                        left: "0px",\n                        borderRadius: "0 6px 6px 0",\n                        bgcolor: "secondary.main",\n                        zIndex: 1199,\n                        width: "36px",\n                    }}\n                >\n                    <IconButton\n                        sx={{ color: "#fff", width: "36px" }}\n                        onClick={() => setOpened((prev) => !prev)}\n                    >\n                        <MenuRounded />\n                    </IconButton>\n                </Box>\n                // highlight-end\n            </Box>\n        </>\n    );\n};\n')),(0,r.kt)("div",null,(0,r.kt)("img",{src:s,alt:"Custom Mobile Menu"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useLogout")," provides the logout functionality."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useLogout")," hook can only be used if the ",(0,r.kt)("inlineCode",{parentName:"p"},"authProvider")," is provided.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider"},"Refer to authProvider docs for more detailed information. ","\u2192"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/core/hooks/auth/useLogout"},"Refer to useLogout docs for more detailed information. ","\u2192"))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can further customize the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Sider>")," and its appearance.",(0,r.kt)("br",{parentName:"p"}),"\n","Refer to Material UI docs for more detailed information about ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-menu"},"Menu ","\u2192")," and ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-drawer"},"Drawer ","\u2192"),".")))}f.isMDXComponent=!0}}]);