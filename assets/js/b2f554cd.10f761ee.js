"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[11477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"how-to-add-darkmode-in-ant-design","metadata":{"permalink":"/blog/how-to-add-darkmode-in-ant-design","source":"@site/blog/2022-02-12-implement-darkmode.md","title":"Implementing Dark Mode In Ant Design Using gulp","description":"In this article, we\u2019ll learn how to efficiently implement dark mode in a Refine/Ant Design app, using gulp library and leveraging some React features like hooks","date":"2022-02-12T00:00:00.000Z","formattedDate":"February 12, 2022","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"darkmode","permalink":"/blog/tags/darkmode"},{"label":"theme","permalink":"/blog/tags/theme"},{"label":"ant-design","permalink":"/blog/tags/ant-design"}],"readingTime":4.825,"truncated":true,"authors":[{"name":"Pierre van Male","title":"Junior Fullstack Developer","url":"https://github.com/vmalep","imageURL":"https://github.com/vmalep.png","key":"vmalep"}],"nextItem":{"title":"How to Import CSV File with React","permalink":"/blog/how-to-import-csv"}},"content":"import css from \'@site/static/img/blog/2022-02-12-implement-darkmode/css.png\';\\nimport light from \'@site/static/img/blog/2022-02-12-implement-darkmode/light.png\';\\nimport dark from \'@site/static/img/blog/2022-02-12-implement-darkmode/dark.png\';\\n\\nIn this article, we will provide an example on how to implement darkmode with **refine**. In order to switch between light and dark mode, we need 2 different styles and the possibility to switch between one and the other without restarting the application. Since the Less stylesheets with React doesn\'t allow variables to be modified without compilation and therefore a restart of the application. To solve this, we are going to use **gulp** that will compile the Less files into swappable CSS, directly accessible to the running application.\\n\\n\x3c!--truncate--\x3e\\n\\nThe solution was presented in this [blog](https://jfelix.info/blog/dynamic-themes-in-ant-design-how-to-change-between-light-and-dark-theme) and lightly adapted to **Refine**.\\n\\n## Initial setup\\nFor this article, we started from a basic Refine app with Ant Design:\\n```tsx\\nnpx superplate-cli -p refine-react tutorial\\n```\\nSelect the following options to complete the CLI wizard:\\n```tsx\\nCloned remote source successfully.\\n\u2714 What will be the name of your app \xb7 tutorial\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to using UI Framework?: \xb7 antd\\n\u2714 Do you want to customize theme?: \xb7 less\\n\u2714 Data Provider: \xb7 custom-json-rest-data-provider\\n\u2714 Auth Provider: \xb7 none\\n\u2714 Do you want to add an example page? \xb7 example-resource\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\nFrom there, install the following packages:\\n```tsx\\nnpm install -s gulp gulp-less gulp-postcss gulp-debug gulp-csso autoprefixer less-plugin-npm-import\\nnpm install -s react-redux react-css-theme-switcher\\n```\\n\\n## Create the Less and then CSS files\\n\\n### Copy the `antd.less` file\\nMake a copy of the `src/styles/antd.less` file into `antd.light-theme.less` and add the following lines inside (because this setting will be removed from the Header/index.tsx file later on):\\n```tsx\\n// Header\\n@layout-header-background:#fff;\\n```\\n\\n### Create a Less file for the dark mode\\nCreate the following file `src/styles/antd.dark-theme.less` with this content:\\n```tsx title=\\"src/styles/antd.dark-theme.less\\"\\n// Run \'npx gulp less\' after modifying this file\\n\\n@import \'~antd/lib/style/color/colorPalette.less\';\\n@import \'~antd/dist/antd.less\';\\n@import \'~antd/lib/style/themes/dark.less\';\\n\\n@primary-color: rgba(255, 255, 255, 0.75);\\n@border-radius-base: 4px;\\n@icon-color: rgba(255, 255, 255, 0.75);\\n\\n@component-background: #303030;\\n@body-background: #303030;\\n@popover-background: #303030;\\n@border-color-base: #6f6c6c;\\n@border-color-split: #424242;\\n@table-header-sort-active-bg: #424242;\\n@card-skeleton-bg: #424242;\\n@skeleton-color: #424242;\\n@table-header-sort-active-bg: #424242;\\n@layout-header-background:#424242;\\n```\\n\\n### Compile the CSS files with `gulp`\\n\\nCreate the following `gulpfile.js` in the root of the repo:\\n```tsx title=\\"gulpfile.js\\"\\nconst gulp = require(\'gulp\')\\nconst gulpless = require(\'gulp-less\')\\nconst postcss = require(\'gulp-postcss\')\\nconst debug = require(\'gulp-debug\')\\nvar csso = require(\'gulp-csso\')\\nconst autoprefixer = require(\'autoprefixer\')\\nconst NpmImportPlugin = require(\'less-plugin-npm-import\')\\n\\ngulp.task(\'less\', function () {\\n  const plugins = [autoprefixer()]\\n\\n  return gulp\\n    .src(\'src/styles/*-theme.less\')\\n    .pipe(debug({title: \'Less files:\'}))\\n    .pipe(\\n      gulpless({\\n        javascriptEnabled: true,\\n        plugins: [new NpmImportPlugin({prefix: \'~\'})],\\n      }),\\n    )\\n    .pipe(postcss(plugins))\\n    .pipe(\\n      csso({\\n        debug: true,\\n      }),\\n    )\\n    .pipe(gulp.dest(\'./public\'))\\n})\\n\\nexports.sync = gulp.series(\'less\');\\n```\\nAnd run `npx gulp less`\\n```tsx\\n\u25b6npx gulp less                       \\n[22:36:28] Using gulpfile ./gulpfile.js\\n[22:36:28] Starting \'less\'...\\n[22:36:28] Less files: src/styles/antd.dark-theme.less\\n[22:36:28] Less files: src/styles/antd.light-theme.less\\n[22:36:28] Less files: 2 items\\n## parsing done in 165 ms\\n\\nCompress block #1\\n[0.028s] init\\n[0.038s] clean\\n[0.068s] replace\\n[0.076s] prepare\\n[0.011s] mergeAtrule\\n[0.052s] initialMergeRuleset\\n[0.011s] disjoinRuleset\\n[0.068s] restructShorthand\\n[0.076s] restructBlock\\n[0.015s] mergeRuleset\\n[0.075s] restructRuleset\\n## compress done in 522 ms\\n\\n## generate done in 44 ms\\n\\n## parsing done in 114 ms\\n\\nCompress block #1\\n[0.007s] init\\n[0.020s] clean\\n[0.057s] replace\\n[0.067s] prepare\\n[0.006s] mergeAtrule\\n[0.068s] initialMergeRuleset\\n[0.012s] disjoinRuleset\\n[0.045s] restructShorthand\\n[0.033s] restructBlock\\n[0.010s] mergeRuleset\\n[0.061s] restructRuleset\\n## compress done in 389 ms\\n\\n## generate done in 15 ms\\n\\n[22:36:33] Finished \'less\' after 5 s\\n```\\n:::info\\nthis command must be repeated each time the Less files are modified and the application restarted to see the changes)\\n:::\\n\\nYou should now have 2 CSS files inside the public folder: `antd.dark-theme.css`and `antd.light-theme.css`\\n<div class=\\"img-container\\">\\n    <img src={css} alt=\\"signin\\" />\\n</div>\\n\\n## Adapt the Refine application to be able to switch between the 2 styles\\n\\n### App.tsx file\\n// highlight-start\\n// highlight-end\\nIn App.tsx, adapt the file so it looks like this\xa0:\\n```tsx\\nimport { Refine, } from \'@pankod/refine-core\';\\nimport { notificationProvider } from \'@pankod/refine-antd\';\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport \\"styles/antd.less\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport { PostList, PostCreate, PostEdit, PostShow } from \\"pages/posts\\";\\nimport { Title, Header, Sider, Footer, Layout, OffLayoutArea } from \\"components/layout\\"\\n// highlight-start\\nimport { ThemeSwitcherProvider } from \\"react-css-theme-switcher\\";\\n// highlight-end\\n\\nfunction App() {\\n// highlight-start\\n    const currThemes = {\\n        dark: `${process.env.PUBLIC_URL}/antd.dark-theme.css`,\\n        light: `${process.env.PUBLIC_URL}/antd.light-theme.css`,\\n    };\\n// highlight-end\\n\\n    return (\\n// highlight-start\\n        <ThemeSwitcherProvider themeMap={currThemes} defaultTheme=\\"light\\">\\n// highlight-end\\n            <Refine routerProvider={routerProvider} notificationProvider={notificationProvider}\\n                dataProvider={dataProvider(\\"https://api.fake-rest.refine.dev\\")}\\n                resources={[\\n                    {\\n                        name: \\"posts\\",\\n                        list: PostList,\\n                        create: PostCreate,\\n                        edit: PostEdit,\\n                        show: PostShow,\\n                    },\\n                ]}\\n                Title={Title}\\n                Header={Header}\\n                Sider={Sider}\\n                Footer={Footer}\\n                Layout={Layout}\\n                OffLayoutArea={OffLayoutArea} />\\n// highlight-start\\n        </ThemeSwitcherProvider>\\n// highlight-end\\n    );\\n};\\n\\nexport default App;\\n```\\n\\n### Header\\n\\nAdd a theme switcher in the Header (`src/components/layout/header/index.tsx`) with the added lines so it looks like this (the Header has been simplified for the sake of clarity and the switch can be installed somewhere else in the application obviously):\\n\\n```tsx\\nimport { useState } from \\"react\\";\\n// highlight-start\\nimport { useThemeSwitcher } from \\"react-css-theme-switcher\\";\\n// highlight-end\\nimport {\\n    AntdLayout,\\n// highlight-start\\n    Switch,\\n// highlight-end\\n} from \\"@pankod/refine-antd\\";\\n\\nexport const Header: React.FC = () => {\\n// highlight-start\\n    const [isDarkMode, setIsDarkMode] = useState<boolean>();\\n    const { switcher, themes } = useThemeSwitcher();\\n\\n    function toggleTheme(isChecked: boolean) { // added\\n        setIsDarkMode(isChecked);\\n        switcher({ theme: isChecked ? themes.dark : themes.light });\\n    };\\n// highlight-end\\n\\n    return (\\n        <AntdLayout.Header\\n            style={{\\n                display: \\"flex\\",\\n                justifyContent: \\"flex-end\\",\\n                alignItems: \\"center\\",\\n                padding: \\"0px 24px\\",\\n                height: \\"64px\\",\\n// highlight-start\\n                //backgroundColor: \\"#FFF\\", // commented out, otherwise the header remains white in dark mode\\n// highlight-end\\n            }}\\n\\n        >\\n// highlight-start\\n            <div className=\\"main fade-in\\"> // added\\n                <Switch\\n                    checkedChildren=\\"\ud83c\udf1c\\"\\n                    unCheckedChildren=\\"\ud83c\udf1e\\"\\n                    checked={isDarkMode}\\n                    onChange={toggleTheme}\\n                />\\n            </div>\\n// highlight-end\\n        </AntdLayout.Header>\\n    );\\n};\\n```\\nYou should now have a light/dark mode switcher in the header:\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={light} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dark} alt=\\"signin\\" />\\n</div>\\n<br />"},{"id":"how-to-import-csv","metadata":{"permalink":"/blog/how-to-import-csv","source":"@site/blog/2022-01-18-csv-import.md","title":"How to Import CSV File with React","description":"In this guide, I will show you how to import CSV files using React and JavaScript.","date":"2022-01-18T00:00:00.000Z","formattedDate":"January 18, 2022","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"csv","permalink":"/blog/tags/csv"},{"label":"import","permalink":"/blog/tags/import"},{"label":"React","permalink":"/blog/tags/react"}],"readingTime":5.035,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Implementing Dark Mode In Ant Design Using gulp","permalink":"/blog/how-to-add-darkmode-in-ant-design"},"nextItem":{"title":"How to Multipart File Upload Using FormData with HTML","permalink":"/blog/how-to-multipart-upload"}},"content":"import console from \'@site/static/img/blog/2022-01-18-csv-import/console.gif\';\\nimport overview from \'@site/static/img/blog/2022-01-18-csv-import/overview.gif\';\\nimport importing from \'@site/static/img/blog/2022-01-18-csv-import/importing.gif\';\\n\\nIn this guide, we will learn how to import any CSV file received from the user with React. Our application will consist of two parts. We will create a form for the user to select a file. Next, we will do some operations with JavaScript to be able to view this CSV file. Let\'s start with our example.\\n\\n\x3c!--truncate--\x3e\\n\\n## Example\\n\\nFirst, let\'s create a [Form](https://tr.reactjs.org/docs/forms.html) in React so that the user can upload a CSV file.\\n\\n```tsx title=\\"App.js\\"\\nfunction App() {\\n    return (\\n        <div style={{ textAlign: \\"center\\" }}>\\n            <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n            <form>\\n                //highlight-start\\n                <input type={\\"file\\"} accept={\\".csv\\"} />\\n                //highlight-end\\n                <button>IMPORT CSV</button>\\n            </form>\\n        </div>\\n    );\\n}\\n```\\n\\nWe created a simple form and our input items. With the accept feature of the input element, we specify that the format of the file can only be CSV. Now, let\'s load and read the CSV file selected by the user with [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader).\\n\\n```tsx\\nimport React, { useState } from \\"react\\";\\n\\nfunction App() {\\n    const [file, setFile] = useState();\\n\\n    const fileReader = new FileReader();\\n\\n    const handleOnChange = (e) => {\\n        setFile(e.target.files[0]);\\n    };\\n\\n    const handleOnSubmit = (e) => {\\n        e.preventDefault();\\n\\n        if (file) {\\n            fileReader.onload = function (event) {\\n                const csvOutput = event.target.result;\\n            };\\n\\n            fileReader.readAsText(file);\\n        }\\n    };\\n\\n    return (\\n        <div style={{ textAlign: \\"center\\" }}>\\n            <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n            <form>\\n                <input\\n                    type={\\"file\\"}\\n                    id={\\"csvFileInput\\"}\\n                    accept={\\".csv\\"}\\n                    onChange={handleOnChange}\\n                />\\n\\n                <button\\n                    onClick={(e) => {\\n                        handleOnSubmit(e);\\n                    }}\\n                >\\n                    IMPORT CSV\\n                </button>\\n            </form>\\n        </div>\\n    );\\n}\\n```\\n\\nHere, once the user-selected file has been successfully uploaded, we can process and display the file. Now let\'s load a sample CSV file and see it output on our console.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={console} alt=\\"console_csv_output\\" />\\n</div>\\n<br />\\n\\nAs you can see, we can now read a selected CSV file. We can convert this file, which we read as a plain text type, into an Array of Object with JavaScript and place it inside a Table element.\\n\\n```tsx\\nfunction App() {\\n import React, { useState } from \\"react\\";\\n\\nfunction App() {\\n  const [file, setFile] = useState();\\n  const [array, setArray] = useState([]);\\n\\n  const fileReader = new FileReader();\\n\\n  const handleOnChange = (e) => {\\n    setFile(e.target.files[0]);\\n  };\\n\\n  const csvFileToArray = string => {\\n    const csvHeader = string.slice(0, string.indexOf(\\"\\\\n\\")).split(\\",\\");\\n    const csvRows = string.slice(string.indexOf(\\"\\\\n\\") + 1).split(\\"\\\\n\\");\\n\\n    const array = csvRows.map(i => {\\n      const values = i.split(\\",\\");\\n      const obj = csvHeader.reduce((object, header, index) => {\\n        object[header] = values[index];\\n        return object;\\n      }, {});\\n      return obj;\\n    });\\n\\n    setArray(array);\\n  };\\n\\n  const handleOnSubmit = (e) => {\\n    e.preventDefault();\\n\\n    if (file) {\\n      fileReader.onload = function (event) {\\n        const text = event.target.result;\\n        csvFileToArray(text);\\n      };\\n\\n      fileReader.readAsText(file);\\n    }\\n  };\\n\\n  const headerKeys = Object.keys(Object.assign({}, ...array));\\n\\n  return (\\n    <div style={{ textAlign: \\"center\\" }}>\\n      <h1>REACTJS CSV IMPORT EXAMPLE </h1>\\n      <form>\\n        <input\\n          type={\\"file\\"}\\n          id={\\"csvFileInput\\"}\\n          accept={\\".csv\\"}\\n          onChange={handleOnChange}\\n        />\\n\\n        <button\\n          onClick={(e) => {\\n            handleOnSubmit(e);\\n          }}\\n        >\\n          IMPORT CSV\\n        </button>\\n      </form>\\n\\n      <br />\\n\\n      <table>\\n        <thead>\\n          <tr key={\\"header\\"}>\\n            {headerKeys.map((key) => (\\n              <th>{key}</th>\\n            ))}\\n          </tr>\\n        </thead>\\n\\n        <tbody>\\n          {array.map((item) => (\\n            <tr key={item.id}>\\n              {Object.values(item).map((val) => (\\n                <td>{val}</td>\\n              ))}\\n            </tr>\\n          ))}\\n        </tbody>\\n      </table>\\n    </div>\\n  );\\n}\\n....\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview_csv\\" />\\n</div>\\n<br />\\n\\nWe formatted the CSV file that came in plain text format, using Javascript [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) and [split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) methods, and created two separate array. Then we converted Header and Rows arrays to Array of Object format as Key, Value.\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/csv-import-example-hw3ne?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"csv-import-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n## Are You Looking React Web Framework?\\n\\nA React-based framework for building data-intensive applications in no time. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\ud83d\udd25 **Headless** : So you can bring your own UI and fuel it with Refine for top speed development.\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/)\\n\\n## How to CSV Import with Refine?\\n\\nThe CSV import with **refine** is very simple and out-of-the-box feature. How to use it is explained step by step in the guide and example.\\n\\n[Refer to the **refine** CSV import guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/import-export/csv-import/)\\n\\n[View Source](https://github.com/pankod/refine/blob/master/examples/importExport/src/pages/posts/list.tsx#L32)\\n\\n## Refine CSV Import Usage\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={importing} alt=\\"importing_csv\\" />\\n</div>\\n<br />\\n\\nImporting CSV files is simple and fast using the [`useImport`](https://refine.dev/docs/core/hooks/import-export/useImport/) hook and [`ImportButton`](https://refine.dev/docs/ui-frameworks/antd/components/buttons/import-button/) provided by **refine**.\\n\\n```tsx\\nimport {\\n    List,\\n    Table,\\n    useTable,\\n    //highlight-start\\n    useImport,\\n    ImportButton,\\n    //highlight-end\\n} from \\"@pankod/refine\\";\\n\\nexport const PostList: React.FC = () => {\\n    const { tableProps } = useTable<IPost>();\\n\\n    //highlight-start\\n    const importProps = useImport<IPostFile>();\\n    //highlight-end\\n\\n    return (\\n        <List\\n            pageHeaderProps={{\\n                //highlight-start\\n                extra: <ImportButton {...importProps} />,\\n                //highlight-end\\n            }}\\n        >\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n                <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n                <Table.Column dataIndex=\\"status\\" title=\\"Status\\" />\\n            </Table>\\n        </List>\\n    );\\n};\\n\\ninterface IPostFile {\\n    title: string;\\n    categoryId: string;\\n}\\ninterface IPost {\\n    id: string;\\n    title: string;\\n    status: string;\\n}\\n```\\n\\nYou can also divide the data into chunk with the `batchSize` option while performing the insertion process.\\n\\n[Refer to the **refine** CSV Import API References for more information. \u2192](https://refine.dev/docs/core/hooks/import-export/useImport/#api-reference)\\n\\n## Refine CSV Import Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-import-export-example-4nneu?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"refine-import-export-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"how-to-multipart-upload","metadata":{"permalink":"/blog/how-to-multipart-upload","source":"@site/blog/2021-12-27-multipart-upload.md","title":"How to Multipart File Upload Using FormData with HTML","description":"In this guide, I\'m going to show you how to multipart files upload with using HTML and JavaScript","date":"2021-12-27T00:00:00.000Z","formattedDate":"December 27, 2021","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"multipart/form-data","permalink":"/blog/tags/multipart-form-data"},{"label":"multipart-upload","permalink":"/blog/tags/multipart-upload"},{"label":"file-upload","permalink":"/blog/tags/file-upload"}],"readingTime":3.68,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to Import CSV File with React","permalink":"/blog/how-to-import-csv"},"nextItem":{"title":"How to upload files from your HTML form using Base64 encoding","permalink":"/blog/how-to-base64-upload"}},"content":"import upload from \'@site/static/img/blog/2021-12-27-multipart-upload/upload.png\';\\nimport overview from \'@site/static/img/blog/2021-12-27-multipart-upload/overview.gif\';\\n\\nIn this guide, we will look at how we can upload a file from HTML form data to a server with the multipart-upload method. Multipart-Upload is commonly used method for sending files or data to a server.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Multipart Upload Request?\\n\\nA multipart request is a HTTP request that HTTP clients construct to send files and data over to a HTTP Server. It is commonly used by browsers and HTTP clients to upload files to the server.\\n\\n## Example\\n\\nWe will take a file from the user with [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and send it to the server. First, let\'s create our fields for the user to choose a file using HTML form.\\n\\n```html\\n<body>\\n    <div class=\\"container\\">\\n        <h1>Multipart File Upload</h1>\\n        <form id=\\"form\\" enctype=\\"multipart/form-data\\">\\n            <div class=\\"input-group\\">\\n                <label for=\\"files\\">Select files</label>\\n                <input id=\\"file\\" type=\\"file\\" multiple />\\n            </div>\\n            <button class=\\"submit-btn\\" type=\\"submit\\">Upload</button>\\n        </form>\\n    </div>\\n    <script src=\\"index.js\\"><\/script>\\n</body>\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={upload} alt=\\"upload_screen\\" />\\n</div>\\n<br />\\n\\nHere we simply created an input and a button. With these HTML elements we have created, we can get the file chosen by the user.\\n\\nLet\'s make a request with JavaScript and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to send the selected files to the server.\\n\\n```jsx\\nconst form = document.getElementById(\\"form\\");\\nconst inputFile = document.getElementById(\\"file\\");\\n\\nconst formData = new FormData();\\n\\nconst handleSubmit = (event) => {\\n    event.preventDefault();\\n\\n    for (const file of inputFile.files) {\\n        formData.append(\\"files\\", file);\\n    }\\n\\n    fetch(\\"http://localhost:8080/files\\", {\\n        method: \\"post\\",\\n        body: formData,\\n    }).catch((error) => (\\"Something went wrong!\\", error));\\n};\\n\\nform.addEventListener(\\"submit\\", handleSubmit);\\n```\\n\\nWe added the file we received from the user with the input file to FormData. We then created a request to send this FormData object to the server.\\n\\nNow, let\'s create a simple server using [Express](https://expressjs.com/) and [Multer](https://github.com/expressjs/multer) in order to see that the files we sent are received by the server successfully.\\n\\n:::note\\nMulter: JavaScript middleware for handling multipart/form-data , which is used for uploading files.\\n:::\\n\\n```jsx title=server.js\\nimport express from \\"express\\";\\nimport cors from \\"cors\\";\\nimport multer from \\"multer\\";\\n\\nconst app = express();\\n\\n//Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins\\napp.use(cors());\\n\\nconst storage = multer.diskStorage({\\n    destination: (req, file, cb) => {\\n        cb(null, __dirname + \\"/uploads\\");\\n    },\\n    filename: (req, file, cb) => {\\n        cb(null, file.originalname);\\n    },\\n});\\n\\nconst Data = multer({ storage: storage });\\n\\napp.post(\\"/files\\", Data.any(\\"files\\"), (req, res) => {\\n    if (res.status(200)) {\\n        console.log(\\"Your file has been uploaded successfully.\\");\\n        console.log(req.files);\\n        res.json({ message: \\"Successfully uploaded files\\" });\\n        res.end();\\n    }\\n});\\n\\napp.listen(8000, () => {\\n    console.log(\\"Server is running\\");\\n});\\n```\\n\\nAs you can see, we have created our multer structure and a simple server to run locally in order to manage and receive FormData.\\n\\nThe requests we created to send files by JavaScript will now be sent to our local server.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"upload overview\\" />\\n</div>\\n<br />\\n\\n## Are You Looking React Web Framework?\\nA React-based framework for building data-intensive applications in no time. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udd18 Headless : So you can bring your own UI and fuel it with Refine for top speed development.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/) \\n## How to Multipart Upload with Refine?\\nThe Multipart file upload process with **refine** is very simple. How to use it is explained step by step in the guide and example. \\n\\n[Refer to the **refine** Multipart Upload guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/upload/multipart-upload/) \\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/upload/multipartUpload)\\n\\n## Refine Multipart Upload Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/refine-multipart-upload-example-88thp?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-multipart-upload-example\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"how-to-base64-upload","metadata":{"permalink":"/blog/how-to-base64-upload","source":"@site/blog/2021-12-22-base64-upload.md","title":"How to upload files from your HTML form using Base64 encoding","description":"Uploading files using Base64 encoding is a common practice. In this guide, I\'m going to show you how to upload files using base64 encoding","date":"2021-12-22T00:00:00.000Z","formattedDate":"December 22, 2021","tags":[{"label":"JavaScript","permalink":"/blog/tags/java-script"},{"label":"how-to","permalink":"/blog/tags/how-to"},{"label":"base64","permalink":"/blog/tags/base-64"},{"label":"file-upload","permalink":"/blog/tags/file-upload"}],"readingTime":4.32,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to Multipart File Upload Using FormData with HTML","permalink":"/blog/how-to-multipart-upload"},"nextItem":{"title":"Web3 with Refine","permalink":"/blog/web3-with-refine"}},"content":"import upload from \'@site/static/img/blog/2021-12-22-base64-upload/upload.png\';\\nimport overview from \'@site/static/img/blog/2021-12-22-base64-upload/overview.png\';\\n\\nUploading files using Base64 encoding is a common practice. In this guide, I\'m going to show you how to upload files using base64 encoding\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Base64 encoding?\\n\\n`Base64 Encoding` is the most widely used technique for storing or transmitting binary data by converting it to text. With this technique, binary data, which basically consists of 8-bit bytes, is divided into 6-bit (2^6 = 64) parts. 64 different numbers expressed in 6 bits are matched with 64 different characters expressed as Printable Characters in the `ASCII` character set.\\n\\nBase64 encoding is most commonly used to attach binary files to electronic mail in applications of the MIME (Multipurpose Internet Mail Extensions) standard.\\n\\nAnother usage area of \u200b\u200bBase64 Encoding is adding images and other files to HTML and CSS documents by encoding with Base64 using Data URLs format in modern browsers.\\n\\n## Example\\n\\nIn our example, we will upload the image file by encoding the image as Base64. First, let\'s write simple HTML and set the [Bootstrap](https://getbootstrap.com/docs/5.1/getting-started/introduction/) CSS link.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"utf-8\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n        <link\\n            href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n            rel=\\"stylesheet\\"\\n            integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n            crossorigin=\\"anonymous\\"\\n        />\\n        <title>Base64 File Upload</title>\\n    </head>\\n\\n    <body>\\n        <div style=\\"margin: 24px\\">\\n            <h2>Upload Image</h2>\\n        </div>\\n\\n        <script src=\\"./index.js\\"><\/script>\\n    </body>\\n</html>\\n```\\n\\nThen we need to use the HTML [input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file) tag to receive an image file from the user.\\n\\nWe will use `file input` because it must be the input type file we want to receive.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n    <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n    <link href=\\"assets/css/bootstrap-responsive.css\\" rel=\\"stylesheet\\" />\\n    <link\\n      href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n      rel=\\"stylesheet\\"\\n      integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n      crossorigin=\\"anonymous\\"\\n    />\\n\\n    <title>Base64 File Upload</title>\\n  </head>\\n  <body>\\n    <div style=\\"margin: 24px\\">\\n      <h2>Upload Image</h2>\\n    </div>\\n    //highlight-start\\n    <div style=\\"margin: 16px; padding: 16px\\">\\n      <input\\n        class=\\"form-control form-control-lg\\"\\n        id=\\"selectAvatar\\"\\n        type=\\"file\\"\\n      />\\n    </div>\\n    //highlight-end\\n</html>\\n```\\n\\nNow we have an input to interact with the user and select a file. Let\'s add the HTML elements that will show the image file and Base64 code we received from the user.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"utf-8\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"stylesheet\\" href=\\"./index.css\\" />\\n        <link href=\\"assets/css/bootstrap-responsive.css\\" rel=\\"stylesheet\\" />\\n        <link\\n            href=\\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\\"\\n            rel=\\"stylesheet\\"\\n            integrity=\\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\\"\\n            crossorigin=\\"anonymous\\"\\n        />\\n\\n        <title>Base64 File Upload</title>\\n    </head>\\n    <body>\\n        <div style=\\"margin: 24px\\">\\n            <h2>Upload Image</h2>\\n        </div>\\n\\n        <div style=\\"margin: 16px; padding: 16px\\">\\n            <input\\n                class=\\"form-control form-control-lg\\"\\n                id=\\"selectAvatar\\"\\n                type=\\"file\\"\\n            />\\n        </div>\\n        //highlight-start\\n        <div class=\\"container\\">\\n            <div class=\\"row\\">\\n                <div class=\\"col\\">\\n                    <h6>Image Preview:</h6>\\n                    <img class=\\"img\\" id=\\"avatar\\" />\\n                </div>\\n                <div class=\\"col\\">\\n                    <h6>Base64 Output</h6>\\n                    <textarea id=\\"textArea\\" rows=\\"30\\" cols=\\"50\\"></textarea>\\n                </div>\\n            </div>\\n        </div>\\n        //highlight-end\\n        <script src=\\"./index.js\\"><\/script>\\n    </body>\\n</html>\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={upload} alt=\\"upload_screen\\" />\\n</div>\\n<br />\\n\\nOur fields are ready to display the image file and Base64 code. Now let\'s do our operations on the JavaScript side.\\n\\n```jsx\\nconst input = document.getElementById(\\"selectAvatar\\");\\nconst avatar = document.getElementById(\\"avatar\\");\\nconst textArea = document.getElementById(\\"textAreaExample\\");\\n\\nconst convertBase64 = (file) => {\\n    return new Promise((resolve, reject) => {\\n        const fileReader = new FileReader();\\n        fileReader.readAsDataURL(file);\\n\\n        fileReader.onload = () => {\\n            resolve(fileReader.result);\\n        };\\n\\n        fileReader.onerror = (error) => {\\n            reject(error);\\n        };\\n    });\\n};\\n\\nconst uploadImage = async (event) => {\\n    const file = event.target.files[0];\\n    const base64 = await convertBase64(file);\\n    avatar.src = base64;\\n    textArea.innerText = base64;\\n};\\n\\ninput.addEventListener(\\"change\\", (e) => {\\n    uploadImage(e);\\n});\\n```\\n\\nHere we take data in file format and encode it as Base64. Then we show this encoded image and Base64 encoding output.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/base64-upload-file-h3yy0?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"base64-upload-file\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n<br/>\\n<br/>\\n\\n## Are You Looking React Web Framework?\\nA React-based framework for building data-intensive applications in no time. **refine** offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to admin panels, B2B applications and dashboards.\\n\\n\ud83d\udd25 **Headless** : So you can bring your own UI and fuel it with Refine for top speed development.\\n\\n\u2699\ufe0f Zero-configuration: One-line setup with superplate. It takes less than a minute to start a project.\\n\\n\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI.\\n\\n\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, Strapi, NestJs CRUD, Airtable, Supabase, Appwrite and Altogic.\\n\\n\ud83d\udcdd Native Typescript Core : You can always opt-out for plain JavaScript.\\n\\n\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design System. (Support for multiple UI frameworks is on the Roadmap)\\n\\n\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable.\\n\\n[Refer to the **refine** documentation for more information. \u2192](https://refine.dev/docs/getting-started/overview/) \\n## How to Base64 Upload with Refine?\\nThe Base64 file upload process with **refine** is very simple. How to use it is explained step by step in the guide and example. \\n\\n[Refer to the **refine** Base64 Upload guide for more information. \u2192](https://refine.dev/docs/guides-and-concepts/upload/base64-upload/) \\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/upload/base64Upload)\\n\\n## Refine Base64 Upload Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/refine-base64-upload-example-tm5nh?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n    style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n    title=\\"refine-base64-upload-example\\"\\n    allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n    sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"web3-with-refine","metadata":{"permalink":"/blog/web3-with-refine","source":"@site/blog/2021-12-13-web3-refine.md","title":"Web3 with Refine","description":"Sign-in Ethereum with Web3 and Refine","date":"2021-12-13T00:00:00.000Z","formattedDate":"December 13, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"dapps","permalink":"/blog/tags/dapps"},{"label":"metamask","permalink":"/blog/tags/metamask"},{"label":"login-ethereum","permalink":"/blog/tags/login-ethereum"}],"readingTime":1.72,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"How to upload files from your HTML form using Base64 encoding","permalink":"/blog/how-to-base64-upload"},"nextItem":{"title":"Refine vs AdminBro - Comparison Admin Panel Framework","permalink":"/blog/refine-vs-adminbro"}},"content":"In this article, we will talk about what is web3 and a simple ethereum wallet login application with **refine**.\\n\\nimport login from \'@site/static/img/blog/2021-12-13-web3-refine/login.gif\';\\nimport overview from \'@site/static/img/blog/2021-12-13-web3-refine/overview.gif\';\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Web3?\\n\\nWeb 3.0 eliminates intermediates. There\u2019s no centralized database that stores the application state.\\n\\nIn web3, developers don\'t usually build and deploy applications that run on a single server or that store their data in a single database.\\nInstead of, Web3 applications run on blockchains, decentralized networks of many peer to peer nodes\\n\\nFeatures provided by Web3:\\n* Verifiable\\n* Self-governing\\n* Permissionless\\n* Stateful\\n* Trustless\\n* Native built-in payments\\n* Anonymity\\n\\n## What is dApps(Dapps)?\\nDapps is short for \\"Decentralized Applications\\" and refers to any application that is decentralized in nature, built on a blockchain, and may use tokens for transactions.\\n\\nDapps is just like any other software application you use. It could be a website or an app on your phone. What makes a Dapp different than a traditional app is that it\'s built on a decentralized network, like Ethereum.\\n\\nMany applications on the logic of dApp have been developed and continue to be developed.\\n\\n[Here you can browse some dapps](https://ethereum.org/en/dapps/)\\n\\nWe have developed a simple app where you can login with ethereum and send ethereum over the network using Metamask Wallet and **refine**.\\n\\nThis application allows you to login with your web3 wallet and you can also send ethereum over the ethereum network.\\n\\nThis example is simple intro to dApps development  built with web3 and **refine**.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"login\\" />\\n</div>\\n<br />\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\nYou can develop many fast and functional dApps using web3 and **refine**.\\n\\n[View Source](https://github.com/pankod/refine/tree/master/examples/web3/ethereumLogin)\\n\\n[View Guide](https://refine.dev/docs/guides-and-concepts/web3/ethereum-signin/)\\n\\n## Live Codesandbox Example\\n<iframe src=\\"https://codesandbox.io/embed/signin-with-ethereum-umho3?autoresize=1&fontsize=14&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"signin-with-ethereum\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"refine-vs-adminbro","metadata":{"permalink":"/blog/refine-vs-adminbro","source":"@site/blog/2021-11-29-refine-vs-admin-bro.md","title":"Refine vs AdminBro - Comparison Admin Panel Framework","description":"Refine vs AdminBro","date":"2021-11-29T00:00:00.000Z","formattedDate":"November 29, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"admin-bro","permalink":"/blog/tags/admin-bro"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"},{"label":"react-framework","permalink":"/blog/tags/react-framework"}],"readingTime":13.12,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Web3 with Refine","permalink":"/blog/web3-with-refine"},"nextItem":{"title":"Refine vs React-Admin Which is Better for Your Project?","permalink":"/blog/refine-vs-react-admin"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nimport refine_flow from \'@site/static/img/blog/2021-11-29-refine-vs-adminbro/refine_flow.png\';\\nimport project_setup from \'@site/static/img/blog/2021-11-29-refine-vs-adminbro/project_setup.gif\';\\n\\nLooking for open source **admin panel framework**? Here we are going to review two of the best **Open Source admin panel frameworks of 2021**.\\n\\n\\n\x3c!--truncate--\x3e\\n\\nThese frameworks that we will talk about have emerged to offer solutions to the same business demands in general. Although the purpose of these two frameworks is the same, the solutions are different from each other. Our goal in this article is to show you these differences and help you find the appropriate framework for your project.\\n\\n:::note\\nThis comparison table strives to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes (with notes or evidence of claims) contact info@refine.dev or you can open a issue on [Github](https://github.com/pankod/refine).\\n:::\\n\\n\\n## Refine\\n**refine** is a React-based framework that helps you to develop admin panel, B2B and dashboard that can be fully customized with Ant Design.\\n\\n**refine** directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.\\n\\n**refine** is a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.\\n\\n**refine** uses [React Query](https://react-query.tanstack.com/) for data processing, caching, and state management. In this respect, you do not need to define anything extra for every cases and model.\\n\\nAlthough **refine** is a newer framework, it is successful in identifying deficiencies in development and producing solutions accordingly. Using new technologies, it offers users more effective and simpler development options.\\n\\n### Installation\\n* Installation is very simple and customizable options can be added.\\n\\n```bash\\nnpx superplate-cli demo-refine-project\\n```\\n\\n<img src={project_setup} alt=\\"setup\\" />\\n\\n### Features\\n\\n* Configuration: One-line setup with superplate. Project setup is very simple. Using superplate you can choose the content of your project and the features you want to add. \\n\\n* UI: You have full control over the UI elements. Fully customizable, open to use. Works seamlessly with Ant Design System.\\n\\n* Out-of-the-box: Routing, networking, authentication, state managment, i18n and UI.\\n\\n* Next.js / SSR integration: **refine** can be used with Next.js to SSR your pages.\\n\\n* React Location: React Location router provider support \\n\\n### SSR - Next.js Support \\nrefine has support for SSR - Next.js. This is an important feature that separates **refine** from other frameworks. Thanks to this feature, **refine** provides the opportunity to develop B2C applications in addition to B2B and admin panel.\\n\\nrefine can be used with Next.js to SSR your pages. It doesn\'t get in the way and follows Next.js conventions and also provides helper modules when necessary.\\n\\n#### SSR-Next.js Setup\\n\\n```bash\\nnpm i @pankod/refine @pankod/refine-nextjs-router\\n```\\n\\n#### SSR-Next.js Basic Usage\\n`<Refine>` must wrap your pages in a custom App component. This way your pages are integrated to refine.\\n\\n```tsx title=pages/_app.tsx\\nimport { AppProps } from \\"next/app\\";\\n\\nimport { Refine } from \\"@pankod/refine\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst API_URL = \\"https://api.fake-rest.refine.dev\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(API_URL)}\\n        >\\n            <Component {...pageProps} />\\n        </Refine>\\n    );\\n}\\n\\nexport default MyApp;\\n```\\n[For more information on how to add SSR-Next.js to your Refine project ->](https://refine.dev/docs/guides-and-concepts/ssr-nextjs/) \\n\\n### Routing\\n**refine** uses a customized Router Provider to save routes and navigate between pages. **refine** offers a much more flexible structure thanks to its routerProvider support.\\n\\nA router provider must include the following methods:\\n\\n```tsx\\nconst routerProvider = {\\n    useHistory: () => {\\n        push: (...args) => any,\\n        replace: (...args) => any,\\n        goBack: (...args) => any,\\n    },\\n    useLocation: () => {\\n        pathname: string,\\n        search: string,\\n    },\\n    useParams: <Params extends { [K in keyof Params]?: string } = {}>() => Params,\\n    Prompt: React.FC<PromptProps*>,\\n    Link: React.FC<any>,\\n    RouterComponent?: React.FC<any>,\\n};\\n```\\n\\n:::info\\nrefine includes many  router providers to use in your projects like: \\n\\n* React Router\\n* React Location\\n* Next.js Router\\n:::\\n\\n[To take a look at how other router providers are defined and working](https://refine.dev/docs/api-references/providers/router-provider/)\\n\\nTo activate router provider in **refine**, we have to pass the routerProvider to the `<Refine />` component.\\n\\n<Tabs\\ndefaultValue=\\"react-router\\"\\nvalues={[\\n{label: \'React Router\', value: \'react-router\'},\\n{label: \'React Location\', value: \'react-location\'},\\n{label: \'Next.js Router\', value: \'nextjs\'}\\n]}>\\n<TabItem value=\\"react-router\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"react-location\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-location\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"nextjs\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\nYou just need to tell the route of your component to the routerProvider.\\n\\n\\n### Data Provider Logic\\n\\nA data provider is the place where a **refine** app communicates with an API.\\n\\n<img src={refine_flow} alt=\\"refine\\" />\\n\\n\\nA data provider must include following methods:\\n\\n```ts\\nconst dataProvider = {\\n    create: ({ resource, variables, metaData }) => Promise,\\n    createMany: ({ resource, variables, metaData }) => Promise,\\n    deleteOne: ({ resource, id, metaData }) => Promise,\\n    deleteMany: ({ resource, ids, metaData }) => Promise,\\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\\n    getMany: ({ resource, ids, metaData }) => Promise,\\n    getOne: ({ resource, id, metaData }) => Promise,\\n    update: ({ resource, id, variables, metaData }) => Promise,\\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\\n    custom: ({\\n        url,\\n        method,\\n        sort,\\n        filters,\\n        payload,\\n        query,\\n        headers,\\n        metaData,\\n    }) => Promise,\\n    getApiUrl: () => \\"\\",\\n};\\n```\\n\\n\\n:::note\\nData hooks uses React Query to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc..\\n:::\\n\\n#### GraphQL Data Provider\\nIt is well covered by GraphQL data provider **refine** and explained step by step in the documentation.\\n\\n**refine** GraphQL data provider is built with [qql-query-builder](https://github.com/atulmy/gql-query-builder) and [graphql-request](https://github.com/prisma-labs/graphql-request). The purpose here is to send dynamic queries that we can do with qql-query-builder as requests with graphql-request. \\n\\nQuery builder helps us build queries and mutations. We can use these queries with the getList, getMany and getOne methods in our data provider. On the other hand, the create, createMany, update, updateMany, deleteOne and deleteMany methods generate a mutation to send a request.\\n\\nIn order to create a query, we need to specify the fields that we will use from our data provider. Thanks to the MetaDataQuery, we pass these fields to our data provider and start using them.\\n\\n#### Basic GraphQL Usage\\n\\n```tsx src/App.tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-strapi-graphql\\";\\nimport { GraphQLClient } from \\"graphql-request\\";\\n\\nconst client = new GraphQLClient(\\"API_URL\\");\\n\\nconst App: React.FC = () => {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(client)}\\n        />\\n    );\\n};\\n```\\n\\nWhen sending the request, we must specify which fields will come, so we send fields in `metaData` to hooks that we will fetch data from.\\n\\n<Tabs\\ndefaultValue=\\"usage\\"\\nvalues={[\\n{label: \'usage\', value: \'usage\'},\\n{label: \'output\', value: \'output\'},\\n]}>\\n\\n<TabItem value=\\"usage\\">\\n\\n```tsx\\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<IPost>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n        // highlight-start\\n        metaData: {\\n            fields: [\\n                \\"id\\",\\n                \\"title\\",\\n                {\\n                    category: [\\"title\\"],\\n                },\\n            ],\\n        },\\n        // highlight-end\\n    });\\n\\n    const { selectProps } = useSelect<ICategory>({\\n        resource: \\"categories\\",\\n         // highlight-start\\n        metaData: {\\n            fields: [\\"id\\", \\"title\\"],\\n        },\\n         // highlight-end\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter={{ multiple: 2 }}\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                />\\n                <Table.Column\\n                    key=\\"title\\"\\n                    dataIndex=\\"title\\"\\n                    title=\\"Title\\"\\n                    sorter={{ multiple: 1 }}\\n                />\\n                <Table.Column<IPost>\\n                    dataIndex=\\"category\\"\\n                    title=\\"Category\\"\\n                    filterDropdown={(props) => (\\n                        <FilterDropdown {...props}>\\n                            <Select\\n                                style={{ minWidth: 200 }}\\n                                mode=\\"multiple\\"\\n                                placeholder=\\"Select Category\\"\\n                                {...selectProps}\\n                            />\\n                        </FilterDropdown>\\n                    )}\\n                    render={(_, record) => record.category.title}\\n                />\\n                <Table.Column<IPost>\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, record) => (\\n                        <Space>\\n                            <EditButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <ShowButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <DeleteButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n</TabItem>\\n\\n<TabItem value=\\"output\\">\\n\\n```tsx\\nquery ($sort: String, $where: JSON, $start: Int, $limit: Int) {\\n    posts (sort: $sort, where: $where, start: $start, limit: $limit) {\\n        id,\\n        title,\\n        category {\\n            title\\n        }\\n    }\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\nHere we only make requests for queries that are necessary. As you can see, all you have to do is specify the field you want to select with `metaData`.\\n\\n[Refer to the GraphQL for detailed usage. \u2192 ](https://refine.dev/docs/guides-and-concepts/data-provider/graphql/)\\n\\n\\n\\n### Refine Avaible Providers\\nConnects to any REST or GraphQL custom backend.\\n\\n* NestJs CRUD: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud](https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud)\\n* Airtable: [https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable](https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable)\\n* Strapi: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi)\\n* Strapi v4: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4)\\n* Strapi GraphQL: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql)\\n* Supabase: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Hasura: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Appwrite: [https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite](https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite)\\n* Altogic: [https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic](https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic)\\n\\n### Customization\\n* **refine\'s** motivation and main purpose are as follows: \\"Higher-level frontend frameworks can save you a lot time, but they typically offer you a trade-off between speed and flexibility.\\" \\n* While the admin panel allows you to make dashboard, B2B and B2C applications quickly, we offer you flexibility in your UI or business model.\\n\\n#### UI/UX Customization: \\n* **refine**, comes ready-made decoupled from the UI, and is used. **refine** mostly touches UI components via hooks. The main advantage of this for you is that you can successfully perform any Business request or different case.\\n#### Logic Customization:\\n* **refine**, works flawless with react-query. You don\'t have to worry about state management in your business model or when you encounter a different situation.\\n\\n### Pricing\\nAll features of **refine** are available as **open source**.\\n\\n* Access Control Provider (RBAC, ABAC, ACL, IP, LDAP, etc...)\\n* Realtime\\n* Search \\n* Navigation and more features are available\\n\\nIf you want to get information about the Enterprise, refine ready to help you for Support and Training.\\n[For more info about Enterprise->](https://refine.dev/enterprise/) \\n\\n**refine** Docs & Demo: [Documentation](https://refine.dev/docs/) - [Live Demo](https://refine.dev/demo/)\\n\\n## AdminBro\\n[AdminBro](https://adminbro.com/index.html) is an open-source package from  that adds an auto-generated admin panel to your Node.js application. You provide database models or schemas and AdminBro generates the user interface for you. \\n\\nYou can connect your various databases to the admin interface and perform standard CRUD operations  on the records. In this way, it makes it to make changes on your data and provides you with a great deal of convenience.\\n\\nYou can quickly develop and customize the Admin panel with AdminBro.\\n\\nIt provides you with solutions and provides convenience when making admin panel and b2b applications. It is an open source project that has been in development and ongoing development for a long time. \\n\\n### Installation\\n\\nWe can say that it is difficult to install, but it is clearly explained step by step in the documentation.\\n\\n:::note\\nSince AdminBro uses your existing framework to render its routes - you have to use one of our plugins.\\n\\nThere are plugins for:\\n* Express\\n* Hapi\\n* Koa.js\\n* Nest.js\\n:::note\\n\\nInstall the AdminBro along with the express plugin\\n\\n```bash\\nnpm install admin-bro @admin-bro/express\\n```\\n\\nThen, we need to install some dependencies express and the express-formidable packages. express-formidable is a peer dependency for AdminBro\\n\\n ```bash\\n npm install express express-formidable\\n ```\\n\\n[For detailed installation \u2192](https://adminbro.com/tutorial-installation-instructions.html)\\n\\n### Features \\n\\n* You can use any data from any source and make changes to the data(create, read, update, delete)\\n* Custom actions\\n* Custom resource decorators\\n* Form validation \\n* A full-featured control panel can be created.\\n* Internationalization(i18n)\\n\\n### SSR - Next.js Support\u200b\\nAdminBro does not support SSR-Next.js. It only helps you develop B2B and admin panel applications.\\n\\n### Routing\\nAdminbro\'s routing processes are slightly different than others. You can also define the routes of the components that you have created custom here.\\n\\n```jsx\\nconst AdminBro = require(\'admin-bro\')\\nconst AdminBroExpress = require(\'@admin-bro/express\')\\n\\nconst express = require(\'express\')\\nconst app = express()\\n\\nconst adminBro = new AdminBro({\\n  databases: [],\\n  rootPath: \'/admin\',\\n})\\n\\nconst router = AdminBroExpress.buildRouter(adminBro)\\n```\\nThe concept of routing is handled in a different way and in general all routing operations are defined through this file.\\n\\n\\n### Data Provider Logic\\nIt does not have a data provider exactly like other frameworks. It has a different structure. It has created functions for you to control your data. But there are rules that we must follow and do.\\n\\nAdminBro can be connected to many different types of resources. Right now, they support the following options:\\n\\n* Mongoose\\n* Sequelize\\n* TypeORM\\n\\nTo add resources , you first have to intall an adapter for the resource you want to use.\\n\\n#### Install the Database Adapter and add resources\\n\\nLet\'s take a look at an example made with the mongoose adapter.\\n\\n```bash\\nnpm install mongoose @admin-bro/mongoose\\n```\\n\\n```tsx title=\\"index.js\\"\\nconst AdminBro = require(\'admin-bro\')\\nconst AdminBroExpress = require(\'@admin-bro/express\')\\nconst AdminBroMongoose = require(\'@admin-bro/mongoose\')\\n \\nconst express = require(\'express\')\\nconst app = express()\\n \\nconst mongoose = require(\'mongoose\')\\n \\nAdminBro.registerAdapter(AdminBroMongoose)\\n \\nconst run = async () => {\\n  const connection = await mongoose.connect(\'mongodb://localhost:27017/users\', {useNewUrlParser: true, useUnifiedTopology: true})\\n \\n  const User = mongoose.model(\'User\', { name: String, email: String, surname: String })\\n \\n  const adminBro = new AdminBro ({\\n    Databases: [connection],\\n    rootPath: \'/admin\',\\n    resources: [User]\\n  })\\n  const router = AdminBroExpress.buildRouter(adminBro)\\n  app.use(adminBro.options.rootPath, router)\\n     \\n  app.listen(3000, ()=> {\\n    console.log(\'Application is up and running under localhost:3000/admin\')\\n  })\\n}\\nrun()\\n```\\nHere we first installed and connected mongoose. We then created a model and passed it to the AdminBro resource. AdminBro has built an interface for us where we can list our users. You can also add your own [custom adapters](https://adminbro.com/tutorial-writing-custom-adapters.html) and set up [custom resources](https://adminbro.com/tutorial-customizing-resources.html).\\n\\nThe logic is well covered and also well explained in the documentation. But we can say that it is complex compared to other frameworks. It can be difficult to use on big data. \\n#### GraphQL Data Provider\\nThere is no native GraphQL support. It can be supported with 3rd party packages.\\n\\n[https://www.npmjs.com/package/admin-bro-graphql](https://www.npmjs.com/package/admin-bro-graphql)\\n[https://github.com/SoftwareBrothers/adminjs/issues/655](https://github.com/SoftwareBrothers/adminjs/issues/655)\\n\\n\\n### Customization\\nAdminBro is good at customizing. You can connect your own adapters and customize your resources. These customizations are challenging and complex.\\n\\nSome customizable features are as follows:\\n * [Customize Resources](https://adminbro.com/tutorial-customizing-resources.html)\\n * [Customize Actions](https://adminbro.com/tutorial-actions.html)\\n * [Custom Validations](https://adminbro.com/tutorial-actions-validations.html)\\n * [Customize dashboard](https://adminbro.com/tutorial-custom-dashboard.html)\\n\\n#### UI/UX Customization:\u200b\\nIt automatically offers you an interface option that you can use. You can also develop and customize your own components. You can do your own styling and write your own custom components, but for this customization, you need to follow and apply a few steps. It doesn\'t speed you up in UI development.\\n\\n[For more information about developing your own components ->](https://adminbro.com/tutorial-writing-react-components.html)\\n\\n### Pricing\\nAll features of Adminbro are open source and accessible.\\n\\n* Role-Based Access Control\\n* Content Management System\\n\\nAdminBro Docs & Demo: [Documentation](https://adminbro.com/tutorial-installation-instructions.html) - [Live Demo](https://admin-bro-example-app-staging.herokuapp.com/admin/login)\\n\\n## Conclusion\\nWe have examined these two frameworks under some headings. Both help you successfully develop admin panel and B2B applications.\\n\\nWe suggest asking some questions to find out which one is more suitable for your project.\\n\\nAt this point, the questions you should ask when choosing these of framework may be as follows:\\n\\n* How flexible are they in offering solutions to the different business demands we may encounter?\\n\\n* How difficult will it be to implement the providers and features we will be using?\\n\\n* If any problem arises, can I easily find a solution from the documentation?\\n\\n* How dependent am I on this framework when using it in my project and does it offer customization possibilities?\\n\\n* What does it offer me as an extra feature?\\n\\nHere **refine** directly answers some of your questions. **refine**\'s customized structures (API, Router, i18n, GraphQL provider, etc...) provide you convenience from many points, unlike admin bro. This convenience and perspective provided by **refine** can be preferred for many projects. In addition, you can be limited to internal tool/B2B applications with AdminBro.  You can develop many different projects with **refine**\'s rich UI library and SSR support.\\n\\nIn this article, we tried to answer these questions. By reading this article, you can choose the appropriate framework for your project and use it."},{"id":"refine-vs-react-admin","metadata":{"permalink":"/blog/refine-vs-react-admin","source":"@site/blog/2021-11-26-refine-vs-react-admin.md","title":"Refine vs React-Admin Which is Better for Your Project?","description":"We will compare the features of refine and react-admin","date":"2021-11-26T00:00:00.000Z","formattedDate":"November 26, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react-admin","permalink":"/blog/tags/react-admin"},{"label":"react","permalink":"/blog/tags/react"},{"label":"admin-panel","permalink":"/blog/tags/admin-panel"}],"readingTime":14.575,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Refine vs AdminBro - Comparison Admin Panel Framework","permalink":"/blog/refine-vs-adminbro"},"nextItem":{"title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nimport admin_flow from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/admin_flow.png\';\\nimport refine_flow from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/refine_flow.png\';\\nimport project_setup from \'@site/static/img/blog/2021-11-26-refine-vs-react-admin/project_setup.gif\';\\n\\nIf you are reading this, chances are you are a developer researching options for delivering an admin panel or another internal tool. Together with you, we will take a look at the best admin panel frameworks in response to this need.\\n\\n\x3c!--truncate--\x3e\\n\\nMotivation is our most important resource when developing a project. If you lose your motivation as your project progresses, you will not be able to produce a successful product. The point where you will lose this feeling the most is the point where you cannot meet your Business needs. Different UI / UX solutions may be requested for many business models and it is very important that you can realize them regardless of the framework you use. \\n\\nWhen you decide to use these types of frameworks, we need to know to what extent and how they solve your work. If we do not know what these frameworks do and how customizable they are, the problems we may encounter can reduce our motivation.\\n\\nWe will examine how the frameworks we will talk about solve our work and how customizable they are under the title of `Customization`.\\n\\n:::note\\nThis comparison table strives to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes (with notes or evidence of claims) contact info@refine.dev or you can open a issue on [Github](https://github.com/pankod/refine).\\n:::\\n\\n## React-Admin\\n\\n[React-Admin](https://marmelab.com/react-admin/) is an  B2B application framework based on Material Design, using Material UI. It provides ready-to-fetch-data components, so you just compose them together to create an application.\\n\\nIt can fetch data from any API connected to the data source, like REST, GraphQL, RPC. It\u2019s powered by React, React Router, Redux, and Redux Saga, while Material UI is responsible for the visual.\\n\\nReact-admin uses Redux and redux-saga for state management. React-Admin creates actions and reducers automatically. Developer should only create data provider, which is used for running requests to the server side and parse server responses. But in some cases it is necessary to run non-typical request to the server side, or to change custom Store parameters. In this case React-Admin gives possibility to create custom actions, reducers and sagas.\\n\\nReact-admin is a framework that has been developed for a long time and has a wider community. Besides being stable, it works with old technologies.\\n\\n### Installation\\n* Can be included in another React app \\n* Installation is very simple\\n\\n```bash\\nnpm install react-admin\\n#or\\nyarn add react-admin\\n```\\n\\n### Features\\n* It can be used with any backend(Rest, GraphQL, SOAP)\\n* API-based. The UI fetches the data from an API connected to the data source.\\n* Powered by Material UI, Redux, Redux Saga, React-router.\\n* Supports any authentication provider of your choice(REST API, OAuth, Basic Auth)\\n* Internationalization : Uses i18n\\n* Supports data validation\\n\\n### SSR - Next.js Support \\nReact-Admin does not support SSR-Next.js. Therefore, it only helps you develop B2B and admin panel applications.\\n\\n### Routing\\nReact admin does it with react-router-dom to save routes. You need to create your own module and define it in the `<Route>` component.\\n\\n```tsx title=\\"src/customRoutes.js\\"\\nimport * as React from \\"react\\";\\nimport { Route } from \'react-router-dom\';\\nimport Foo from \'./Foo\';\\nimport Bar from \'./Bar\';\\n\\nexport default [\\n    <Route exact path=\\"/foo\\" component={Foo} />,\\n    <Route exact path=\\"/bar\\" component={Bar} />,\\n];\\n```\\n\\nThen, pass this array as customRoutes prop in the `<Admin>` component:\\n\\n```tsx title=\\"src/App.js\\"\\nimport * as React from \\"react\\";\\nimport { Admin } from \'react-admin\';\\n\\nimport customRoutes from \'./customRoutes\';\\n\\nconst App = () => (\\n    <Admin customRoutes={customRoutes} dataProvider={simpleRestProvider(\'http://path.to.my.api\')}>\\n        ...\\n    </Admin>\\n);\\n\\nexport default App;\\n```\\n\\nNow, when a user browses to /foo or /bar, the components you defined will appear in the main part of the screen.\\n\\n\\n### Data Provider Logic\\nWhen React-admin needs to communicate with API, it uses Data Provider.\\n\\n<img src={admin_flow} alt=\\"admin\\" />\\n\\nHere are the React-Admin data provider methods:\\n\\n```ts\\nconst dataProvider = {\\n    getList:    (resource, params) => Promise,\\n    getOne:     (resource, params) => Promise,\\n    getMany:    (resource, params) => Promise,\\n    getManyReference: (resource, params) => Promise,\\n    create:     (resource, params) => Promise,\\n    update:     (resource, params) => Promise,\\n    updateMany: (resource, params) => Promise,\\n    delete:     (resource, params) => Promise,\\n    deleteMany: (resource, params) => Promise,\\n}\\n```\\n#### GraphQL Data Provider\\nWe can say that React-Admin is a bit lacking in terms of both graphql provider and its documentation. \\n\\nReact-Admin calls the GraphQL endpoint by running an introspection query for GraphQL.\\n\\n```jsx title=\\"App.js\\"\\nimport React from \'react\';\\nimport { Component } from \'react\';\\nimport buildGraphQLProvider from \'ra-data-graphql-simple\';\\nimport { Admin, Resource } from \'react-admin\';\\n\\nimport { PostCreate, PostEdit, PostList } from \'./posts\';\\n\\nconst App = () => {\\n\\n    const [dataProvider, setDataProvider] = React.useState(null);\\n    React.useEffect(() => {\\n        buildGraphQLProvider({ clientOptions: { uri: \'http://localhost:4000\' } })\\n            .then(graphQlDataProvider => setDataProvider(() => graphQlDataProvider));\\n    }, []);\\n\\n    if (!dataProvider) {\\n        return <div>Loading</div>;\\n    }\\n\\n    return (\\n        <Admin dataProvider={dataProvider}>\\n            <Resource name=\\"Post\\" list ={PostList} edit ={PostEdit} create ={PostCreate}/>\\n        </Admin>\\n    );\\n}\\n\\nexport default App;\\n```\\n\\nWhen we want to see this data in a table, all GraphQL entities are queried requested by default(even if you don\'t add columns to the table). This is against GraphQL\'s approach and is a scenario we would not want.\\n\\nThe way to prevent this is to override all your queries.\\n\\n```jsx title=\\"src/dataProvider.js\\"\\nimport buildGraphQLProvider, { buildQuery } from \'ra-data-graphql-simple\';\\n\\nconst myBuildQuery = introspection => (fetchType, resource, params) => {\\n    const builtQuery = buildQuery(introspection)(fetchType, resource, params);\\n\\n    if (resource === \'Command\' && fetchType === \'GET_ONE\') {\\n        return {\\n            // Use the default query variables and parseResponse\\n            ...builtQuery,\\n            // Override the query\\n            query: gql`\\n                query Command($id: ID!) {\\n                    data: Command(id: $id) {\\n                        id\\n                        reference\\n                        customer {\\n                            id\\n                            firstName\\n                            lastName\\n                        }\\n                    }\\n                }`,\\n        };\\n    }\\n\\n    return builtQuery;\\n};\\n\\nexport default buildGraphQLProvider({ buildQuery: myBuildQuery })\\n```\\n\\nAlthough this is a solution, it complicates your project in many ways (debugging, maintenence, etc...).\\n\\n### React-Admin Avaible Providers\\nThe providers that React admin supports are as follows:\\n* Simple Rest: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-simple-rest](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-simple-rest)\\n* Json Server: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server)\\n* Simple GrapgQL: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql-simple](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql-simple)\\n* Local JSON: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage)\\n* Local Strage: [https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage](https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage)\\n* Supabase: [https://github.com/marmelab/ra-supabase](https://github.com/marmelab/ra-supabase)\\n\\n[You can view the full list of providers here ->](https://marmelab.com/react-admin/DataProviders.html)\\n\\n### Customization\\nWith React-Admin, you can develop effective B2B applications and admin panels in a very short time. Although most of the processes are handled with hooks, the general architecture is built on components. In general, we can say that it is customizable but not very flexible. In some cases or business models, you may need to think about this yourself and make some additions.\\n#### UI/UX Customization: \\nReact-Admin offers solutions in component architecture. The disadvantage of this is that you will have difficulty meeting your customization needs or different business requests. These  customizable, but they can be a bit of a hard for different business models. \\n#### Logic Customization:\\nReact-Admin uses redux and redux-saga for state management. You should know these two technologies well. In some cases you may need to create the actions and reducers yourself. This is also a disadvantage for many situations.\\n\\n### Pricing\\nIn addition to these features it provides, React-Admin offers some modules as Enterprise-Edition.\\n\\nA few of these modules are as follows:\\n\\n* RBAC\\n* Editable-Datagrid\\n* Realtime\\n* Search \\n* Navigation\\n\\n[For more information about Enterprise-Edition and other modules](https://marmelab.com/ra-enterprise)\\n\\n\\n\\nReact-Admin Docs & Demo : [Documentation](https://marmelab.com/react-admin/Readme.html) - [Live Demo](https://marmelab.com/react-admin-demo/#/)\\n\\n## Refine\\n**refine** is a React-based framework that helps you to develop admin panel, B2B and dashboard that can be fully customized with Ant Design.\\n\\n**refine** directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.\\n\\n**refine** is a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.\\n\\n**refine** uses [React Query](https://react-query.tanstack.com/) for data processing, caching, and state management. In this respect, you do not need to define anything extra for every cases and model.\\n\\nAlthough **refine** is a newer framework, it is successful in identifying deficiencies in development and producing solutions accordingly. Using new technologies, it offers users more effective and simpler development options.\\n\\n### Installation\\n* Installation is very simple and customizable options can be added.\\n\\n```bash\\nnpx superplate-cli demo-refine-project\\n```\\n\\n<img src={project_setup} alt=\\"setup\\" />\\n\\n### Features\\n\\n* Configuration: One-line setup with superplate. Project setup is very simple. Using superplate you can choose the content of your project and the features you want to add. \\n\\n* UI: You have full control over the UI elements. Fully customizable, open to use. Works seamlessly with Ant Design System.\\n\\n* Out-of-the-box: Routing, networking, authentication, state managment, i18n and UI.\\n\\n* Next.js / SSR integration: refine can be used with Next.js to SSR your pages.\\n\\n* React Location: React Location router provider support \\n\\n### SSR - Next.js Support \\n**refine** has support for SSR - Next.js. This is an important feature that separates refine from other frameworks. Thanks to this feature, refine provides the opportunity to develop B2C applications in addition to B2B and admin panel.\\n\\n**refine** can be used with Next.js to SSR your pages. It doesn\'t get in the way and follows Next.js conventions and also provides helper modules when necessary.\\n\\n#### SSR-Next.js Setup\\n\\n```bash\\nnpm i @pankod/refine @pankod/refine-nextjs-router\\n```\\n\\n#### SSR-Next.js Basic Usage\\n`<Refine>` must wrap your pages in a custom App component. This way your pages are integrated to refine.\\n\\n```tsx title=pages/_app.tsx\\nimport { AppProps } from \\"next/app\\";\\n\\nimport { Refine } from \\"@pankod/refine\\";\\nimport dataProvider from \\"@pankod/refine-simple-rest\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst API_URL = \\"https://api.fake-rest.refine.dev\\";\\n\\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(API_URL)}\\n        >\\n            <Component {...pageProps} />\\n        </Refine>\\n    );\\n}\\n\\nexport default MyApp;\\n```\\n[For more information on how to add SSR-Next.js to your Refine project ->](https://refine.dev/docs/guides-and-concepts/ssr-nextjs/) \\n\\n### Routing\\n**refine** uses a customized Router Provider to save routes and navigate between pages. **refine** offers a much more flexible structure thanks to its routerProvider support.\\n\\nA router provider must include the following methods:\\n\\n```tsx\\nconst routerProvider = {\\n    useHistory: () => {\\n        push: (...args) => any,\\n        replace: (...args) => any,\\n        goBack: (...args) => any,\\n    },\\n    useLocation: () => {\\n        pathname: string,\\n        search: string,\\n    },\\n    useParams: <Params extends { [K in keyof Params]?: string } = {}>() => Params,\\n    Prompt: React.FC<PromptProps*>,\\n    Link: React.FC<any>,\\n    RouterComponent?: React.FC<any>,\\n};\\n```\\n\\n:::info\\n**refine** includes many  router providers to use in your projects like: \\n\\n* React Router\\n* React Location\\n* Next.js Router\\n:::\\n\\n[To take a look at how other router providers are defined and working](https://refine.dev/docs/api-references/providers/router-provider/)\\n\\nTo activate router provider in **refine**, we have to pass the routerProvider to the `<Refine />` component.\\n\\n<Tabs\\ndefaultValue=\\"react-router\\"\\nvalues={[\\n{label: \'React Router\', value: \'react-router\'},\\n{label: \'React Location\', value: \'react-location\'},\\n{label: \'Next.js Router\', value: \'nextjs\'}\\n]}>\\n<TabItem value=\\"react-router\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"react-location\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-location\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"nextjs\\">\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-nextjs-router\\";\\n\\nconst App: React.FC = () => {\\n    return <Refine routerProvider={routerProvider} />;\\n};\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\nYou just need to tell the route of your component to the routerProvider.\\n\\n\\n### Data Provider Logic\\n\\nA data provider is the place where a **refine** app communicates with an API.\\n\\n<img src={refine_flow} alt=\\"refine\\" />\\n\\n\\nA data provider must include following methods:\\n\\n```ts\\nconst dataProvider = {\\n    create: ({ resource, variables, metaData }) => Promise,\\n    createMany: ({ resource, variables, metaData }) => Promise,\\n    deleteOne: ({ resource, id, metaData }) => Promise,\\n    deleteMany: ({ resource, ids, metaData }) => Promise,\\n    getList: ({ resource, pagination, sort, filters, metaData }) => Promise,\\n    getMany: ({ resource, ids, metaData }) => Promise,\\n    getOne: ({ resource, id, metaData }) => Promise,\\n    update: ({ resource, id, variables, metaData }) => Promise,\\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\\n    custom: ({\\n        url,\\n        method,\\n        sort,\\n        filters,\\n        payload,\\n        query,\\n        headers,\\n        metaData,\\n    }) => Promise,\\n    getApiUrl: () => \\"\\",\\n};\\n```\\n\\n\\n:::note\\nData hooks uses React Query to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc..\\n:::\\n\\n#### GraphQL Data Provider\\nIt is well covered by GraphQL data provider **refine** and explained step by step in the documentation.\\n\\n**refine** GraphQL data provider is built with [qql-query-builder](https://github.com/atulmy/gql-query-builder) and [graphql-request](https://github.com/prisma-labs/graphql-request). The purpose here is to send dynamic queries that we can do with qql-query-builder as requests with graphql-request. \\n\\nQuery builder helps us build queries and mutations. We can use these queries with the getList, getMany and getOne methods in our data provider. On the other hand, the create, createMany, update, updateMany, deleteOne and deleteMany methods generate a mutation to send a request.\\n\\nIn order to create a query, we need to specify the fields that we will use from our data provider. Thanks to the MetaDataQuery, we pass these fields to our data provider and start using them.\\n\\n#### Basic GraphQL Usage\\n\\n```tsx src/App.tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport dataProvider from \\"@pankod/refine-strapi-graphql\\";\\nimport { GraphQLClient } from \\"graphql-request\\";\\n\\nconst client = new GraphQLClient(\\"API_URL\\");\\n\\nconst App: React.FC = () => {\\n    return (\\n        <Refine\\n            routerProvider={routerProvider}\\n            dataProvider={dataProvider(client)}\\n        />\\n    );\\n};\\n```\\n\\nWhen sending the request, we must specify which fields will come, so we send fields in `metaData` to hooks that we will fetch data from.\\n\\n<Tabs\\ndefaultValue=\\"usage\\"\\nvalues={[\\n{label: \'usage\', value: \'usage\'},\\n{label: \'output\', value: \'output\'},\\n]}>\\n\\n<TabItem value=\\"usage\\">\\n\\n```tsx\\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<IPost>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n        // highlight-start\\n        metaData: {\\n            fields: [\\n                \\"id\\",\\n                \\"title\\",\\n                {\\n                    category: [\\"title\\"],\\n                },\\n            ],\\n        },\\n        // highlight-end\\n    });\\n\\n    const { selectProps } = useSelect<ICategory>({\\n        resource: \\"categories\\",\\n         // highlight-start\\n        metaData: {\\n            fields: [\\"id\\", \\"title\\"],\\n        },\\n         // highlight-end\\n    });\\n\\n    return (\\n        <List>\\n            <Table {...tableProps} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter={{ multiple: 2 }}\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                />\\n                <Table.Column\\n                    key=\\"title\\"\\n                    dataIndex=\\"title\\"\\n                    title=\\"Title\\"\\n                    sorter={{ multiple: 1 }}\\n                />\\n                <Table.Column<IPost>\\n                    dataIndex=\\"category\\"\\n                    title=\\"Category\\"\\n                    filterDropdown={(props) => (\\n                        <FilterDropdown {...props}>\\n                            <Select\\n                                style={{ minWidth: 200 }}\\n                                mode=\\"multiple\\"\\n                                placeholder=\\"Select Category\\"\\n                                {...selectProps}\\n                            />\\n                        </FilterDropdown>\\n                    )}\\n                    render={(_, record) => record.category.title}\\n                />\\n                <Table.Column<IPost>\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, record) => (\\n                        <Space>\\n                            <EditButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <ShowButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                            <DeleteButton\\n                                hideText\\n                                size=\\"small\\"\\n                                recordItemId={record.id}\\n                            />\\n                        </Space>\\n                    )}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n</TabItem>\\n\\n<TabItem value=\\"output\\">\\n\\n```tsx\\nquery ($sort: String, $where: JSON, $start: Int, $limit: Int) {\\n    posts (sort: $sort, where: $where, start: $start, limit: $limit) {\\n        id,\\n        title,\\n        category {\\n            title\\n        }\\n    }\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\nHere we only make requests for queries that are necessary. As you can see, all you have to do is specify the field you want to select with `metaData`.\\n\\n[Refer to the GraphQL for detailed usage. \u2192 ](https://refine.dev/docs/guides-and-concepts/data-provider/graphql/)\\n\\n\\n\\n### Refine Avaible Providers\\nConnects to any REST or GraphQL custom backend.\\n\\n* NestJs CRUD: [https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud](https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud)\\n* Airtable: [https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable](https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable)\\n* Strapi: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi)\\n* Strapi v4: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-v4)\\n* Strapi GraphQL: [https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql](https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql)\\n* Supabase: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Hasura: [https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase](https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase)\\n* Appwrite: [https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite](https://github.com/pankod/refine/tree/master/examples/dataProvider/appwrite)\\n* Altogic: [https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic](https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic)\\n\\n### Customization\\n* **refine\'s** motivation and main purpose are as follows: \\"Higher-level frontend frameworks can save you a lot time, but they typically offer you a trade-off between speed and flexibility.\\" \\n* While the admin panel allows you to make dashboard, B2B and B2C applications quickly, we offer you flexibility in your UI or business model.\\n\\n#### UI/UX Customization: \\n**refine**, comes ready-made decoupled from the UI, and is used. **refine** mostly touches UI components via hooks. The main advantage of this for you is that you can successfully perform any Business request or different case.\\n#### Logic Customization:\\n**refine**, works flawless with react-query. You don\'t have to worry about state management in your business model or when you encounter a different situation.\\n\\n### Pricing\\nAll features of **refine** are available as **open source**.\\n\\n* Access Control Provider (RBAC, ABAC, ACL, IP, LDAP, etc...)\\n* Realtime\\n* Search \\n* Navigation and more features are available\\n\\nIf you want to get information about the Enterprise, refine ready to help you for Support and Training.\\n[For more info about Enterprise->](https://refine.dev/enterprise/) \\n\\nrefine Docs & Demo: [Documentation](https://refine.dev/docs/) - [Live Demo](https://refine.dev/demo/)\\n\\n\\n## Conclusion\\nWith the pricing, customization and flexibility that **refine** offers you, you will be able to meet all your business demands. In addition, you can easily develop both B2B and B2C applications using a single framework with the support of SSR - Next.js. \\n\\n\\nIn general, these frameworks that we are comparing have appeared for the same purpose. All of them are successful in meeting business demands and offering you a solution. Here are the this solutions way that they offer, they may differ and there may be distinguishing features between them.\\n\\nAt this point, the questions you should ask when choosing these of framework may be as follows:\\n\\n* How flexible are they in offering solutions to the different business demands we may encounter?\\n\\n* How difficult will it be to implement the providers and features we will be using?\\n\\n* If any problem arises, can I easily find a solution from the documentation?\\n\\n* How dependent am I on this framework when using it in my project and does it offer customization possibilities?\\n\\n* What does it offer me as an extra feature?\\n\\nIn this article, we tried to answer these questions. By reading this article, you can choose the appropriate framework for your project and use it."},{"id":"customizable-issue-tracker-with-refine-and-supabase","metadata":{"permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase","source":"@site/blog/2021-11-12-issue-tracker-refine.md","title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","description":"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.","date":"2021-11-12T00:00:00.000Z","formattedDate":"November 12, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":17.63,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Refine vs React-Admin Which is Better for Your Project?","permalink":"/blog/refine-vs-react-admin"},"nextItem":{"title":"Create E-mail Subscription Panel with Refine and Strapi","permalink":"/blog/e-mail-subscription-panel-with-refine"}},"content":"import start from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/start.png\';\\nimport login from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/login.gif\';\\nimport labelTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_table.png\';\\nimport common from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/common_table.png\';\\nimport userTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/user_table.png\';\\nimport taskTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_table.png\';\\nimport labelValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_value.png\';\\nimport priorityValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/priority_value.png\';\\nimport statusValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/status_value.png\';\\nimport list from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/list.png\';\\nimport taskList from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_list.png\';\\nimport create from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create.png\';\\nimport edit from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit.png\';\\nimport show from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/show.png\';\\nimport dashOverview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dash_overview.png\';\\nimport overview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/overview-project.gif\';\\nimport filter from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/filter.gif\';\\nimport dashboard from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dashboard.gif\';\\nimport taskTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_test.gif\';\\nimport createTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create_test.gif\';\\nimport editTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit_test.gif\';\\n\\n\\nIn this article, we will make a customizable internal issue tracker web application with supabase and refine.\\n\\n\x3c!--truncate--\x3e\\n\\nThis web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.\\n\\n\\nWe will use [Supabase](https://supabase.io/) in backend. Let\'s start by creating our Supabase account and tables.\\n\\n\\n## Create Supabase Database\\n\\nWe have to go to [Supabase](https://supabase.io/) and create an organization and database. Then we can start creating our tables.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={start} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nThe tables we need to create for our project are as follows:\\n\\n> label\\n* `id`: bigint\\n* `title`: varchar\\n* `color`: varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> priority \\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\n> status\\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> users\\n* `email` varchar\\n* `id` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={userTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n> tasks\\n* `id` bigint\\n* `title` varchar\\n* `description` varchar\\n* `start_time` date\\n* `end_time` date\\n* `label` bigint\\n* `priority` bigint\\n* `statuts` bigint\\n* `users` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe created our database tables. The important part here is that as you can see, in our tasks table, label, priority, status and users values \u200b\u200bare defined as bigint. To summarize the reason for this, we relation the label, priority, status and users tables that we created above with the corresponding values \u200b\u200bin our tasks table.\\n\\n:::tip\\n  Add Foreign key relationships steps:\\n\\n1. Got to a table, right click the column you wish to add a foreign key for\\n\\n2. Select \'edit column\'\\n\\n3. Select \'Add foreign key relation\'\\n\\n4. Select the table and column to make a foreign key for\\n\\n5. Click save\\n:::\\n\\n\\nSo we can take  reference their id and use their value in our tasks table.\\n\\nNow let\'s go to the Supabase Table editor and create our constant values.\\n\\n`Label Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Priority Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={priorityValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n`Status Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={statusValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s create a test task to better understand key relation. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, since we have defined the ids of our label, status, priority and users tables as references to our tasks table, we can now use their values.\\n\\nLet\'s look at how we can use this data we created on the Supabase side with refine .\\n\\n## Refine Project Setup\\n\\nNow let\'s refine the task-manager panel. With superplate, we can quickly create a refine project\\n\\n```bash\\n  npx superplate-cli refine-task-manager\\n```\\n\\n```bash\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 refine-task-manager\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to customize theme?: \xb7 css\\n\u2714 Data Provider: \xb7 supabase-data-provider\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nAfter the project setup is loaded, let\'s start by entering our project and making the necessary changes.\\n\\nLet\'s add our supabase url and key to our refine project.\\n\\n\\n```ts title=\\"src/utility/supabaseClient.ts\\"\\nimport { createClient } from \\"@pankod/refine-supabase\\";\\n\\nconst SUPABASE_URL = \\"YOUR_SUPABASE_URL\\";\\nconst SUPABASE_KEY = \\"YOUR_SUPABASE_API_KEY\\";\\n\\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\\n```\\n\\nNow we can access and list the tables we created via the supabase.\\n\\n- Add custom login and signup page in App.tsx\\n\\nOur purpose here is to log in if there is a registered user in the supabase. If you do not have a registered user, saving a user to the supabase with refine.\\n \\n## Custom Login Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useLogin,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport \\"./styles.css\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                 initialValues={{\\n                  email: \\"info@refine.dev\\",\\n                  password: \\"refine-supabase\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\", marginLeft:  12 }}\\n                    onClick={() => push(\\"signup\\")}\\n                  >\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n## Custom Signup Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ISignup {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Signup: React.FC = () => {\\n  const [form] = Form.useForm<ISignup>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign Up\\n    </Title>\\n  );\\n\\n  const signup = async (email: string, password: string) => {\\n    const { error } = await supabaseClient.auth.signUp({\\n      email,\\n      password,\\n    });\\n\\n    if (error) {\\n      return Promise.reject(error);\\n    }\\n  };\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ISignup>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  signup(values.email, values.password);\\n                  push(\\"login\\");\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button\\n                  type=\\"primary\\"\\n                  size=\\"large\\"\\n                  htmlType=\\"submit\\"\\n                  block\\n                  style={{ marginTop: 24 }}\\n                >\\n                  Create Account\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 16 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\" }}\\n                    onClick={() => push(\\"login\\")}\\n                  >\\n                    Sign in\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\n\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nHere we define our login and signup pages. We then use the refine\'s [router-provider](https://refine.dev/docs/next/api-references/providers/router-provider/) and [useNavigaton](https://refine.dev/docs/next/core/hooks/navigation/useNavigation/) hooks to switch between login and signup.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe can now create supabase users and log in from our refine interface.\\n \\n## Add Resource\\n**Adding resources according to the table name we created in Supabase**\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\"\\n        },\\n        {\\n          name: \\"tasks\\"\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={list} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nWe can now create lists of tasks and make changes to them.\\n\\n## Add List and Filter \\n\\n```tsx title=\\"src/pages/task/list.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  useMany,\\n  List,\\n  Table,\\n  TextField,\\n  TagField,\\n  DateField,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n  HttpError,\\n  CrudFilters,\\n  Row,\\n  Col,\\n  Card,\\n} from \\"@pankod/refine\\";\\n\\nimport {\\n  ILabel,\\n  IPriority,\\n  ITask,\\n  ITaskFilterVariables,\\n  IStatus,\\n  IAuthUser,\\n} from \\"interfaces\\";\\n\\nimport { Filter } from \\"../task\\";\\n\\nexport const TaskList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, searchFormProps } = useTable<\\n    ITask,\\n    HttpError,\\n    ITaskFilterVariables\\n  >({\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { title, label, priority, users, status, start_time, end_time } =\\n        params;\\n\\n      filters.push(\\n        {\\n          field: \\"title\\",\\n          operator: \\"eq\\",\\n          value: title,\\n        },\\n\\n        {\\n          field: \\"label\\",\\n          operator: \\"eq\\",\\n          value: label,\\n        },\\n\\n        {\\n          field: \\"priority\\",\\n          operator: \\"eq\\",\\n          value: priority,\\n        },\\n\\n        {\\n          field: \\"users\\",\\n          operator: \\"eq\\",\\n          value: users,\\n        },\\n\\n        {\\n          field: \\"status\\",\\n          operator: \\"eq\\",\\n          value: status,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"gte\\",\\n          value: start_time ? start_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"lte\\",\\n          value: start_time ? start_time[1].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"gte\\",\\n          value: end_time ? end_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"lte\\",\\n          value: end_time ? end_time[1].toISOString() : undefined,\\n        }\\n      );\\n      return filters;\\n    },\\n  });\\n\\n  const labelIds = tableProps?.dataSource?.map((item) => item.label) ?? [];\\n  const priorityIds = tableProps?.dataSource?.map((item) => item.priority) ?? [];\\n  const assignedIds = tableProps?.dataSource?.map((item) => item.users) ?? [];\\n  const statusIds = tableProps?.dataSource?.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds,\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds,\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds,\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds,\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col lg={6} xs={24}>\\n        <Card title=\\"Task Filter\\">\\n          <Filter formProps={searchFormProps} />\\n        </Card>\\n      </Col>\\n      <Col lg={18} xs={24}>\\n        <List>\\n          <Table {...tableProps} rowKey=\\"id\\">\\n            <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n            <Table.Column\\n              dataIndex=\\"label\\"\\n              title=\\"Label\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    color={\\n                      labels?.data.find((item) => item.id === value)?.color\\n                    }\\n                    value={\\n                      labels?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"priority\\"\\n              title=\\"Priority\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      priority?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"users\\"\\n              title=\\"Assigned\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    value={\\n                      assigned?.data.find((item) => item.id === value)?.email\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"status\\"\\n              title=\\"Status\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      status?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"start_time\\"\\n              title=\\"Start Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column\\n              dataIndex=\\"end_time\\"\\n              title=\\"Due Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column<ITask>\\n              title=\\"Actions\\"\\n              dataIndex=\\"actions\\"\\n              render={(_, record): React.ReactNode => {\\n                return (\\n                  <Space>\\n                    <ShowButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <EditButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <DeleteButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                  </Space>\\n                );\\n              }}\\n            />\\n          </Table>\\n        </List>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n\\n```tsx title=\\"src/pages/task/filter.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  Form,\\n  FormProps,\\n  Input,\\n  useSelect,\\n  Select,\\n  DatePicker,\\n  Icons,\\n  Button,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { RangePicker } = DatePicker\\n\\nexport const Filter: React.FC<{ formProps: FormProps }> = ({ formProps }) => {\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  return (\\n    <Form layout=\\"vertical\\" {...formProps}>\\n      <Form.Item label=\\"Search\\" name=\\"title\\">\\n        <Input\\n          placeholder=\\"Title\\"\\n          prefix={<Icons.SearchOutlined />}\\n        />\\n      </Form.Item>\\n      <Form.Item label=\\"Label\\" name=\\"label\\">\\n        <Select {...labelSelectProps} allowClear placeholder=\\"Seach Label\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n        <Select {...priorityProps} allowClear placeholder=\\"Seach Priority\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Status\\" name=\\"status\\">\\n        <Select {...statusProps} allowClear placeholder=\\"Search Status\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Assigned\\" name=\\"users\\">\\n        <Select {...assigneProps} allowClear placeholder=\\"Search Assignee\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item>\\n        <Button htmlType=\\"submit\\" type=\\"primary\\">\\n          Filter\\n        </Button>\\n      </Form.Item>\\n    </Form>\\n  );\\n};\\n```\\n\\n```ts title=\\"src/interfaces\\"\\nexport interface IAuthUser {\\n  id: string;\\n  email: string;\\n}\\n\\nexport interface ILabel {\\n  id: string;\\n  title: string;\\n  color: string;\\n}\\n\\nexport interface IPriority {\\n  id: string;\\n  title: string;\\n}\\n\\nexport interface IStatus {\\n  id: string;\\n  title: string\\n}\\n\\nexport interface ITask {\\n  id: string;\\n  title: string;\\n  description: string;\\n  start_time: string;\\n  end_time: string;\\n  label: string;\\n  priority: string;\\n  status: string;\\n  users: string\\n}\\n\\nexport interface ITaskFilterVariables {\\n  title: string;\\n  label: string;\\n  priority: string;\\n  users: string;\\n  status: string;\\n  start_time: [Dayjs, Dayjs];\\n  end_time: [Dayjs, Dayjs];\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskList} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n Using refine\'s [tableSearch](https://refine.dev/docs/guides-and-concepts/search/table-search) and list, we can create our list and perform filtering. \\n\\nAs seen in the example, we listed and showed the task table we created in supabase with refine. Now you can make changes as you want with refine.\\n\\nNow how do we create task? Let\'s examine how we can edit them and see their details.\\n\\n## Create Task\\n\\n```tsx title=\\"src/pages/task/create.tsx\\"\\nimport {\\n  useForm,\\n  Create,\\n  Form,\\n  Input,\\n  Select,\\n  useSelect,\\n  IResourceComponentsProps,\\n  DatePicker,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const TaskCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ILabel>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: prioritySelectPorps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneSelectProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusSelectProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  })\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Title\\"\\n          name=\\"title\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...prioritySelectPorps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne To\\" name=\\"users\\">\\n          <Select {...assigneSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Select Status\\" name=\\"status\\">\\n          <Select {...statusSelectProps}/>\\n        </Form.Item>\\n        <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n        <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={createTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n\\n## Edit Task\\n\\n```tsx title=\\"src/pages/task/edit.tsx\\"\\nimport {\\n  useForm,\\n  Form,\\n  Input,\\n  Select,\\n  Edit,\\n  useSelect,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority,  IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const EditTask: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\",\\n  });\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item label=\\"Title\\" name=\\"title\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...priorityProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Status\\" name=\\"status\\">\\n          <Select {...statusProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne\\" name=\\"users\\">\\n          <Select {...assigneProps} />\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={editTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Show Task\\n\\n```tsx title=\\"src/pages/task/show\\"\\nimport { useShow, Show, Typography, Tag, useOne, DateField } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const TaskShow: React.FC = () => {\\n  const { queryResult } = useShow<ITask>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { data: assigned } = useOne<IAuthUser>({\\n    resource: \\"users\\",\\n    id: record?.users || \\"\\",\\n  });\\n\\n  const { data: label } = useOne<ILabel>({\\n    resource: \\"label\\",\\n    id: record?.label || \\"\\",\\n  });\\n\\n  const { data: priority } = useOne<IPriority>({\\n    resource: \\"priority\\",\\n    id: record?.priority || \\"\\",\\n  });\\n\\n  const { data: status } = useOne<IStatus>({\\n    resource: \\"status\\",\\n    id: record?.status || \\"\\",\\n  });\\n\\n  return (\\n    <Show isLoading={isLoading}>\\n      <Title level={5}>Task:</Title>\\n      <Text>{record?.title || \\"-\\"}</Text>\\n\\n      <Title level={5}>Task Desciption:</Title>\\n      <Text>{record?.description}</Text>\\n\\n      <Title level={5}>Assigned To:</Title>\\n      <Text>\\n        <Tag>{assigned?.data?.email ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Label:</Title>\\n      <Text>\\n        <Tag>{label?.data?.title ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Priority:</Title>\\n      <Text>{priority?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Status:</Title>\\n      <Text>{status?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Start Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.start_time ?? \\"-\\"}/>\\n\\n      <Title level={5}>Due Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.end_time ?? \\"-\\"}/>\\n    </Show>\\n  );\\n};\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nBy using Refine\'s basic views such as [create](https://refine.dev/docs/ui-framewors/antd/components/basic-views/create), [edit](https://refine.dev/docs/ui-frameworks/antd/components/basic-views/edit/) and [show](https://refine.dev/docs/ui-frameworks/antd/components/basic-views/show/), we can now create tasks, edit these tasks and view their details.\\n\\n\\nLet\'s see how to add a dashboard page to our project together.\\n\\n## Add Custom Chart \\n\\n```tsx title=\\"src/components/task/pie.tsx\\"\\nimport React from \\"react\\";\\nimport { Pie } from \\"@ant-design/charts\\";\\n\\ninterface ChartProps {\\n  data: {\\n    type: any;\\n    value: any;\\n  }[];\\n}\\n\\nexport const TaskChart: React.FC<ChartProps> = ({ data }) => {\\n  var config = {\\n    data: data,\\n    angleField: \\"value\\",\\n    colorField: \\"type\\",\\n    radius: 0.9,\\n    label: {\\n      type: \\"inner\\",\\n      offset: \\"-30%\\",\\n      content: function content(_ref: any) {\\n        var percent = _ref.percent;\\n        return \\"\\".concat((percent * 100).toFixed(0), \\"%\\");\\n      },\\n      style: {\\n        fontSize: 14,\\n        textAlign: \\"center\\",\\n      },\\n    },\\n    interactions: [{ type: \\"element-active\\" }],\\n  };\\n  return <Pie {...config} />;\\n};\\n```\\n\\n```tsx title=\\"src/pages/dashboard/index.tsx\\"\\nimport React from \\"react\\";\\nimport { useList, useMany, Row, Col, Card } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\nimport { TaskChart } from \\"components/task/pie\\";\\nimport { groupBy } from \\"helper\\";\\n\\nexport const Dashboard = () => {\\n  const taskList = useList<ITask>({\\n    resource: \\"tasks\\",\\n  });\\n\\n  const labelIds = taskList.data?.data.map((item) => item.label) ?? [];\\n  const priorityIds = taskList.data?.data.map((item) => item.priority) ?? [];\\n  const assignedIds = taskList.data?.data.map((item) => item.users) ?? [];\\n  const statusIds = taskList.data?.data.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds || [],\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds || [],\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds || [],\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds || [],\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              labels?.data.map((i) => {\\n                return { type: i.title, value: groupBy(labelIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              priority?.data.map((i) => {\\n                return { type: i.title, value: groupBy(priorityIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              status?.data.map((i) => {\\n                return { type: i.title, value: groupBy(statusIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              assigned?.data.map((i) => {\\n                return { type: i.email, value: groupBy(assignedIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashOverview} alt=\\"overview\\" />\\n</div>\\n<br/>\\n\\n\\n \\nFinal version of our `<App.tsx/>`.\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      DashboardPage={Dashboard}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\",\\n          list: UserList,\\n        },\\n        {\\n          name: \\"tasks\\",\\n          list: TaskList,\\n          edit: EditTask,\\n          create: TaskCreate,\\n          show: TaskShow,\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\nOur project is done. Lets see how its look like.\\n\\n## Overview Project\\n\\n`Overview`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Task Filter`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={filter} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Dashboard Page`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashboard} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, we made a simple and short task manager application using refine on our front end and using its data-provider. \\n\\n[Here is repo](https://github.com/pankod/refine/tree/master/examples/blog/issueTracker) \\n\\nFor more information about Refine: [Refine Github Page](https://github.com/pankod/refine)\\n\\nFor other examples and articles that will interest you with refine:  [https://refine.dev/blog/](https://refine.dev/blog/)\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-supabase-issue-tracker-ifuh4?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-supabase-issue-tracker\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"},{"id":"e-mail-subscription-panel-with-refine","metadata":{"permalink":"/blog/e-mail-subscription-panel-with-refine","source":"@site/blog/2021-10-25-mail-subscription-with-refine.md","title":"Create E-mail Subscription Panel with Refine and Strapi","description":"We will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We\u2019ll use refine to develop the frontend easily and strapi for backend solutions.","date":"2021-10-25T00:00:00.000Z","formattedDate":"October 25, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":7.805,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}],"prevItem":{"title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase"},"nextItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"}},"content":"import auth from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/auth.png\';\\nimport create from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/create.gif\';\\nimport dummy_data from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/dummy_data.png\';\\nimport login from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/login.gif\';\\nimport messages from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/messages.png\';\\nimport overview from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/overview.png\';\\nimport refine_messages from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_messages.png\';\\nimport refine_subs from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_subs.png\';\\nimport refine_welcome from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/refine_welcome.png\';\\nimport send from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/send.gif\';\\nimport signin from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/signin.png\';\\nimport strapi from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/strapi.png\';\\nimport subscribers from \'@site/static/img/blog/2021-10-25-mail-subscription-with-refine/subscribers.png\';\\n\\nWe will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We\u2019ll use refine to develop the frontend easily and strapi for backend solutions.\\n\\n\x3c!--truncate--\x3e\\n\\nLet\'s start by creating our strapi and refine projects.\\n\\n## Creating API with `Strapi`\\n```bash\\nnpx create-strapi-app strapi-email-subscription-api --quickstart\\n```\\n\\nAfter the project is loaded, the admin panel will open automatically open in the browser. We need to create an admin user in order to log in to the strapi.\\n\\n<img src={strapi} alt=\\"strapi\\" />\\n\\n\\nWith the information we will create here, we can now enter the strapi and start shaping our backend.\\n\\nAfter logging into the Strapi interface, we have two collection models that we need to create for our e-mail subscription project.\\n\\nWe will create these collections from the Collection-Types Builder part of the strapi.\\n\\n> Subscribers\\n* `name` text field\\n* `email` Email\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={subscribers} alt=\\"subscribers\\" />\\n</div>\\n<br />\\n \\n\\n> Messages\\n* `subject` text field\\n* `text` text field\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={messages} alt=\\"messages\\" />\\n</div>\\n<br />\\n \\n\\nWith these collections and features we have created, we can now create subscribers, delete them and make changes to them.\\n\\n## Creating panel with `refine`\\n\\nNow let\'s refine the subscription panel. With [superplate](https://github.com/pankod/superplate), we can quickly create a refine project\\n\\n```bash\\nnpx superplate-cli email-subscription-panel\\n```\\n\\nSelect the following options to complete the CLI wizard:\\n\\n```bash\\n? Select your project type:\\n> refine\\n\\n? Package manager:\\n> Npm\\n\\n? Do you want to customize the theme?:\\n> No (Ant Design default theme)\\n\\n? Data Provider: \\n> Strapi\\n\\n? Do you want to customize layout?:\\n> Yes, I want\\n\\n? i18n - Internationalization: \\n> No\\n```\\n\\nAfter the upload is finished, let\'s go into our project and see how it looks.\\n\\n```bash\\ncd email-subscription-panel\\nnpm run dev\\n```\\n\\nThis is a example Refine project:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_welcome} alt=\\"refine_welcome\\" />\\n</div>\\n<br />\\n\\nLet\'s list our messages and subscribers with refine. Here are the changes we need to make:\\n\\n* Change Strapi API URL from refine\\n* Adding resources according to the collection name we created in Strapi\\n\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi\\";\\nimport strapiAuthProvider from \\"authProvider\\";\\nimport { Header, Layout, OffLayoutArea } from \\"components\\";\\n\\n\\nfunction App() {\\n - const API_URL = \\"your-strapi-api-url\\";\\n + const API_URL = \\"http://localhost:1337\\";\\n\\n  const { authProvider, axiosInstance } = strapiAuthProvider(API_URL);\\n  const dataProvider = DataProvider(API_URL, axiosInstance);\\n  return (\\n    <Refine\\n      dataProvider={dataProvider}\\n      authProvider={authProvider}\\n      Header={Header}\\n      Layout={Layout}\\n      OffLayoutArea={OffLayoutArea}\\n      routerProvider={routerProvider}\\n      resources={[{\\n        name: \\"subscribers\\",\\n      }, {\\n        name: \\"messages\\",\\n      }]} \\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\nAfter adding the resources, we need to define a user in the strapi in order to be able to login to the refine. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={auth} alt=\\"auth\\" />\\n</div>\\n<br />\\n\\nLet\'s login with this user we created\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"login\\" />\\n</div>\\n\\n \\nWe can now list subscribers and messages and make changes to our list. Before doing this, let\'s create test users and messages on the strapi side. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dummy_data} alt=\\"dummy_data\\" />\\n</div>\\n<br />\\n \\n\\n\\nCreate SubscriberList.tsx and MessagesList.tsx file under the pages folder. Then, let\'s create our component as follows with the components and hooks that come with refine.\\n\\n## Subscriber List\\n\\n```tsx title=\\"/src/pages/subscriber/SubscriberList.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  List,\\n  Table,\\n  DateField,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ISubscriber } from \\"interfaces\\";\\n\\nexport const SubscriberList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps } = useTable<ISubscriber>();\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"Id\\" />\\n        <Table.Column dataIndex=\\"name\\" title=\\"Name\\" />\\n        <Table.Column dataIndex=\\"email\\" title=\\"E-mail\\" />\\n        <Table.Column\\n          dataIndex=\\"created_at\\"\\n          title=\\"createdAt\\"\\n          render={(value) => <DateField format=\\"LLL\\" value={value} />}\\n        />\\n        <Table.Column<ISubscriber>\\n          title=\\"Unsubscribe\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record): React.ReactNode => {\\n            return (\\n              <DeleteButton size=\\"small\\" recordItemId={record.id} hideText />\\n            );\\n          }}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n## Message List\\n\\n```tsx title=\\"/src/pages/mail/MessageList.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  List,\\n  Table,\\n  DateField,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMail } from \\"interfaces\\";\\n\\nexport const MessageList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps } = useTable<IMail>();\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"Id\\" />\\n        <Table.Column dataIndex=\\"subject\\" title=\\"Subject\\" />\\n        <Table.Column dataIndex=\\"text\\" title=\\"Body\\" />\\n        <Table.Column \\n          dataIndex=\\"created_at\\"\\n          title=\\"createdAt\\"\\n          render={(value) => <DateField format=\\"LLL\\" value={value} />}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n```\\n\\n```tsx title=\\"/src/interfaces/intex.d.ts\\"\\nexport interface ISubscriber {\\n  id: any;\\n  name: string;\\n  email: string;\\n  created_at: string;\\n}\\n\\nexport interface IMail {\\n  subject: string;\\n  text: string;\\n  to: string;\\n  create_at: string;\\n}\\n```\\n\\nIn this component:\\n\\nWe used refine\'s [list](https://refine.dev/docs/examples/list/useSimpleList) and [table](https://refine.dev/docs/api-references/hooks/table/useTable/) to show our subscribers and messages.\\n\\nNow let\'s see how our subscriber panel looks like:\\n\\n`Subscriber:`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_subs} alt=\\"refine_subs\\" />\\n</div>\\n<br />\\n\\n\\n`Messages:`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_messages} alt=\\"refine_messages\\" />\\n</div>\\n<br />\\n\\n\\nAs you can see, we were able to list our subscribers and e-mails very simply with refine. Now let\'s examine how we can create subscribers and messages from our interface.\\n\\n## Create Subscriber\\n\\n```tsx title=\\"/src/pages/subscriber/create.tsx\\"\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  useForm,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ICreateSubscriber } from \\"interfaces\\";\\n\\nexport const CreateSubscriber: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ICreateSubscriber>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item label=\\"Name\\" name=\\"name\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"E-mail\\"\\n          name=\\"email\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n  \\n## Create Message\\n\\n```tsx title=\\"/src/pages/mail/create.tsx\\"\\nimport React, { useState } from \\"react\\";\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  useForm,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport ReactMarkdown from \\"react-markdown\\";\\nimport ReactMde from \\"react-mde\\";\\nimport \\"react-mde/lib/styles/css/react-mde-all.css\\";\\nimport { IMail } from \\"interfaces\\";\\n\\nexport const MailCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMail>();\\n  const [selectedTab, setSelectedTab] = useState<\\"write\\" | \\"preview\\">(\\"write\\");\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      {console.log(\\"create\\")}\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Subject\\"\\n          name=\\"subject\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"Body\\"\\n          name=\\"text\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <ReactMde\\n            selectedTab={selectedTab}\\n            onTabChange={setSelectedTab}\\n            generateMarkdownPreview={(markdown: any) =>\\n              Promise.resolve(<ReactMarkdown>{markdown}</ReactMarkdown>)\\n            }\\n          />\\n        </Form.Item>\\n        <Form.Item\\n          label=\\"To\\"\\n          name=\\"to\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\nUsing refine\'s [form](https://refine.dev/docs/api-references/hooks/form/useForm) and [create](https://refine.dev/docs/ui-framewors/antd/components/basic-views/create) components, we can now create subscribers and messages with refine.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br />\\n  \\n\\nWe\'re done with our panel. We can now list, create and delete subscribers. Finally, the step of sending real mails using our panel and strapi is left. Let\'s see how we do this.\\n\\n\\n## Strapi E-mail Plugin\\n\\nIn order to send mail via Strapi, we need to install the [strapi-email](https://strapi.io/documentation/developer-docs/latest/development/plugins/email.html#programmatic-usage) plugin in our api project that we created above.\\n\\nLet\'s open our API project that we created and download the email plugin.\\n\\n```bash\\ncd strapi-email-subscription-api\\nnpm install strapi-provider-email-sendgrid --save\\n```\\n\\nAfter installing your plugin you will need to add some settings in config/plugins.js. If this file doesn\'t exists, you\'ll need to create it. \\n\\n### Configure your provider\\n\\n`Path \u2014 ./config/plugins.js`\\n\\n```jsx\\nmodule.exports = ({ env }) => ({\\n    email: {\\n      provider: \'sendgrid\',\\n      providerOptions: {\\n        apiKey: env(\'SENDGRID_API_KEY\'),\\n      },\\n      settings: {\\n        defaultFrom: \'your-email-adress\',\\n        defaultReplyTo: \'your-email-adress\',\\n        testAddress: \'your-email-adress\',\\n      },\\n    },\\n  });\\n```\\n\\n:::tip\\nStrapi sends emails via sendgrid. That\'s why you need to create a [SendGrid](https://sendgrid.com/) account and get an api-key.\\n:::\\n\\nNow, let\'s send the text and subject in the collection of messages we created over the strapi as parameters to the send() function of the email plugin.\\n\\n\\n\\n```jsx title=\\"api/messages/controllers/messages.js\\"\\nconst { parseMultipartData, sanitizeEntity } = require(\\"strapi-utils\\");\\n\\nmodule.exports = {\\n  async create(ctx) {\\n    let entity;\\n    if (ctx.is(\\"multipart\\")) {\\n      const { data, files } = parseMultipartData(ctx);\\n      entity = await strapi.services.messages.create(data, { files });\\n    } else {\\n      entity = await strapi.services.messages.create(ctx.request.body);\\n    }\\n\\n    entity = sanitizeEntity(entity, { model: strapi.models.messages });\\n\\n    const { subject, text } = entity;\\n\\n    const worker = (await strapi.services.subscribers.find()).map(\\n      (subscriber) => {\\n        let to = subscriber.email;\\n\\n        return strapi.plugins[\\"email\\"].services.email.send({\\n          subject,\\n          text,\\n          to,\\n        });\\n      }\\n    );\\n\\n    await Promise.all(worker);\\n\\n    return entity;\\n  },\\n};\\n```\\n\\nOur project is finished. Let\'s try it now.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s send the same e-mail to our subscribers shown in the picture at once.\\n\\n<br />\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={send} alt=\\"send\\" />\\n</div>\\n<br />\\n\\nSending mail was successful. As you can see, we were able to send the same email to all subscribers by sending a single email.\\n\\n[Here is repo](https://github.com/pankod/refine/tree/master/examples/blog/mailSubscription)"},{"id":"migrating-a-react-admin-application-to-refine","metadata":{"permalink":"/blog/migrating-a-react-admin-application-to-refine","source":"@site/blog/2021-10-6-migrating-react-admin-application-to-refine.md","title":"Migrating a React-Admin Application to Refine","description":"Recently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity.","date":"2021-10-06T00:00:00.000Z","formattedDate":"October 6, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"react-admin","permalink":"/blog/tags/react-admin"},{"label":"adminpanel","permalink":"/blog/tags/adminpanel"},{"label":"crud","permalink":"/blog/tags/crud"}],"readingTime":5.77,"truncated":true,"authors":[{"name":"Umut \xd6zdemir","title":"Frontend Developer","url":"https://github.com/miyavsu-limited","imageURL":"https://github.com/miyavsu-limited.png","key":"umut"}],"prevItem":{"title":"Create E-mail Subscription Panel with Refine and Strapi","permalink":"/blog/e-mail-subscription-panel-with-refine"},"nextItem":{"title":"Build Fast and Customizable Admin Panel with NestJS","permalink":"/blog/customizable-admin-panel-with-nestjs"}},"content":"import sider from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/sider.png\';\\nimport react_admin from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin.png\';\\nimport refine_table from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/refine_table.png\';\\nimport react_admin_create from \'@site/static/img/blog/2021-10-6-migrating-react-admin-to-refine/react_admin_create.png\';\\n\\nRecently, our team decided to migrate a B2B admin panel of one of our customers from React-Admin to refine to battle test our new framework and improve our productivity. My mission was to migrate it and it took one and a half days for me to rewrite the panel in refine.\\n\\n\x3c!--truncate--\x3e\\n### Migrating a React-Admin Application to refine\\n\\n[refine](https://refine.dev/) is an extremely customizable [Ant Desig](https://ant.design/) based [React](https://reactjs.org/) framework for data-intensive applications and it handles most of the CRUD functionality that can be a requirement in many applications, without much effort. Providing the rest of the desired functionality (outside CRUD) is up to you, like in any <strong>React</strong> application.\\n\\n[React-Admin](https://marmelab.com/react-admin/) is an amazing B2B application framework based on [Material Design](https://material.io/), using [Material UI](https://mui.com/). It provides ready-to-fetch-data components, so you just compose them together to create an application.\\n\\n<strong>refine</strong> is different in the way it makes you compose your application. refine directly provides <strong>Ant Design</strong> components and some hooks to work with those components. Hooks give you the required props for those Ant Design components.\\n\\nIt is, also, one step forward towards the dream of <strong>making it headless</strong>.\\n\\nTo learn more about refine, see: https://refine.dev/docs/getting-started/overview\\n\\n\\n|  <img src={sider} alt=\\"sider\\" /> | \\n|:--:| \\n| *Our panel has 7 resources (all listable), which 4 of them must have create and edit pages, 6 of them must be exportable to `.csv` files and some of those resources have images, all images must be uploaded in `base64` format.* |\\n\\nThis is how it looks before the migration (React-Admin):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nAnd this is how it looks like after the migration (refine):\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nBoth of these images show a list page of a resource (campaign).\\n\\n## Migrating Listing Pages\\n\\nList pages have one/more tables inside them. Ideally, all table state should be managed by the framework in use.\\n\\nrefine is very flexible with tables. You can put them anywhere, configure it as much as you want with [useTable](https://refine.dev/docs/api-references/hooks/table/useTable/). See the [fineFoods example](https://refine.dev/demo/) and [it\'s code](https://github.com/pankod/refine/blob/master/examples/fineFoods/admin/src/pages/categories/list.tsx).\\n\\nHere is an example list page from React-Admin that shows you the list of `id`,`name`, `isActive`, `startDate`, `endDate` from the API endpoint for `campaigns` resource.\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List as ReactAdminList,\\n    Datagrid,\\n    TextField,\\n    BooleanField,\\n    EditButton,\\n} from \\"react-admin\\";\\n\\nimport LocalizeDateField from \\"../../fields/LocalizeDateField\\";\\n\\nconst List = (props) => (\\n    <ReactAdminList {...props}>\\n        <Datagrid>\\n            <TextField source=\\"id\\" label=\\"ID\\" />\\n            <TextField source=\\"name\\" label=\\"Name\\" />\\n            <BooleanField source=\\"isActive\\" label=\\"Active\\" />\\n            <LocalizeDateField source=\\"startDate\\" />\\n            <LocalizeDateField source=\\"endDate\\" />\\n            <EditButton basePath=\\"/campaigns\\" />\\n        </Datagrid>\\n    </ReactAdminList>\\n);\\n\\nexport default List;\\n```\\n\\nAnd looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nHere\'s the code that renders this same list in refine:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    List,\\n    Table,\\n    Space,\\n    Button,\\n    BooleanField,\\n    DateField,\\n    CreateButton,\\n    EditButton,\\n    ExportButton,\\n    Icons,\\n    useTable,\\n    getDefaultSortOrder,\\n    useExport,\\n    useDeleteMany,\\n    IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ICampaign } from \\"interfaces\\";\\n\\nexport const CampaignsList: React.FC<IResourceComponentsProps> = () => {\\n    const { tableProps, sorter } = useTable<ICampaign>({\\n        initialSorter: [\\n            {\\n                field: \\"id\\",\\n                order: \\"asc\\",\\n            },\\n        ],\\n    });\\n\\n    const { isLoading: isExportLoading, triggerExport } = useExport();\\n\\n    const [selectedRowKeys, setSelectedRowKeys] = React.useState<React.Key[]>(\\n        [],\\n    );\\n\\n    const handleSelectChange = (selectedRowKeys: React.Key[]) => {\\n        setSelectedRowKeys(selectedRowKeys);\\n    };\\n\\n    const rowSelection = {\\n        selectedRowKeys,\\n        onChange: handleSelectChange,\\n    };\\n\\n    const { mutate, isLoading } = useDeleteMany<ICampaign>();\\n\\n    const deleteSelectedItems = () => {\\n        mutate(\\n            {\\n                resource: \\"campaigns\\",\\n                ids: selectedRowKeys.map(String),\\n                mutationMode: \\"undoable\\",\\n            },\\n            {\\n                onSuccess: () => {\\n                    setSelectedRowKeys([]);\\n                },\\n            },\\n        );\\n    };\\n\\n    const hasSelected = selectedRowKeys.length > 0;\\n\\n    return (\\n        <List\\n            pageHeaderProps={{\\n                subTitle: hasSelected && (\\n                    <Button\\n                        type=\\"text\\"\\n                        onClick={() => deleteSelectedItems()}\\n                        loading={isLoading}\\n                        icon={\\n                            <Icons.DeleteOutlined style={{ color: \\"green\\" }} />\\n                        }\\n                    >\\n                        Delete\\n                    </Button>\\n                ),\\n                extra: (\\n                    <Space>\\n                        <CreateButton />\\n                        <ExportButton\\n                            onClick={triggerExport}\\n                            loading={isExportLoading}\\n                        />\\n                    </Space>\\n                ),\\n            }}\\n        >\\n            <Table {...tableProps} rowSelection={rowSelection} rowKey=\\"id\\">\\n                <Table.Column\\n                    dataIndex=\\"id\\"\\n                    title=\\"ID\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n                    width=\\"70px\\"\\n                />\\n                <Table.Column\\n                    dataIndex=\\"name\\"\\n                    title=\\"Name\\"\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"name\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"isActive\\"\\n                    title=\\"Active\\"\\n                    render={(isActive) => <BooleanField value={isActive} />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"isActive\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"startDate\\"\\n                    title=\\"Start Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"startDate\\", sorter)}\\n                />\\n                <Table.Column\\n                    dataIndex=\\"endDate\\"\\n                    title=\\"End Date\\"\\n                    render={(value) => <DateField value={value} format=\\"LLL\\" />}\\n                    sorter\\n                    defaultSortOrder={getDefaultSortOrder(\\"endDate\\", sorter)}\\n                />\\n                <Table.Column<ICampaign>\\n                    fixed=\\"right\\"\\n                    title=\\"Actions\\"\\n                    dataIndex=\\"actions\\"\\n                    render={(_, { id }) => <EditButton recordItemId={id} />}\\n                />\\n            </Table>\\n        </List>\\n    );\\n};\\n```\\n\\nIt is long. Because we had to handle selection and bulk delete button manually. That\'s because refine is decoupled from Ant Design components\' code, too. But the advantage here is that you use Ant Design. You can use the Ant Design\'s Table as however you like, and then connect its data with refine. The point is customizability.\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_table} alt=\\"refine\\" />\\n</div>\\n<br/>\\n\\nIn refine, we use Ant Design\'s [Table](https://ant.design/components/table/) components.\\n\\n## Migrating Create/Edit Pages\\n\\nA resource creation page\'s code looked like this in React-Admin:\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n    required,\\n    Create as ReactAdminCreate,\\n    SimpleForm,\\n    BooleanInput,\\n    TextInput,\\n    DateTimeInput,\\n} from \\"react-admin\\";\\n\\nconst Create = (props: any) => (\\n    <ReactAdminCreate {...props}>\\n        <SimpleForm>\\n            <TextInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"name\\"\\n                validate={[required()]}\\n            />\\n            <BooleanInput\\n                fullWidth\\n                variant=\\"outlined\\"\\n                source=\\"isActive\\"\\n                label=\\"Active\\"\\n            />\\n            <DateTimeInput\\n                source=\\"startDate\\"\\n                label=\\"Start Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n            <DateTimeInput\\n                source=\\"endDate\\"\\n                label=\\"End Date\\"\\n                validate={[required()]}\\n                fullWidth\\n                variant=\\"outlined\\"\\n            />\\n        </SimpleForm>\\n    </ReactAdminCreate>\\n);\\n\\nexport default Create;\\n```\\n\\nAnd it looks like this:\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={react_admin_create} alt=\\"react-admin\\" />\\n</div>\\n<br/>\\n\\nFor refine, code of our campaign create page looks like:\\n\\n```tsx\\nimport {\\n    Create,\\n    DatePicker,\\n    Form,\\n    Input,\\n    IResourceComponentsProps,\\n    Switch,\\n    useForm,\\n} from \\"@pankod/refine\\";\\nimport dayjs from \\"dayjs\\";\\n\\nexport const CampaignsCreate: React.FC<IResourceComponentsProps> = () => {\\n    const { formProps, saveButtonProps } = useForm();\\n\\n    return (\\n        <Create saveButtonProps={saveButtonProps}>\\n            <Form\\n                {...formProps}\\n                layout=\\"vertical\\"\\n                initialValues={{ isActive: false }}\\n            >\\n                <Form.Item\\n                    label=\\"Name\\"\\n                    name=\\"name\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                >\\n                    <Input />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Is Active\\"\\n                    name=\\"isActive\\"\\n                    valuePropName=\\"checked\\"\\n                >\\n                    <Switch />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"Start Date\\"\\n                    name=\\"startDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n                <Form.Item\\n                    label=\\"End Date\\"\\n                    name=\\"endDate\\"\\n                    rules={[\\n                        {\\n                            required: true,\\n                        },\\n                    ]}\\n                    getValueProps={(value) => dayjs(value)}\\n                >\\n                    <DatePicker />\\n                </Form.Item>\\n            </Form>\\n        </Create>\\n    );\\n};\\n```\\n\\nIn both refine and React-Admin, by default, there aren\'t much differences between new resource page\'s code and resource edit page\'s code.\\n\\nAlso note that for both refine and React-Admin, this is all customizable. These code examples and screenshots mean little or no extra customization in resource list/create/edit pages.\\n\\nAdvantage of refine is that you use Ant Design directly. Let\'s assume you have your own way around your Ant Design application. refine doesn\'t interfere. Instead, it provides you the necessary data for your Ant Design application. This way, refine gives you all the freedom to customize all the components as you wish.\\n\\nHappy hacking with refine \ud83e\ude84"},{"id":"customizable-admin-panel-with-nestjs","metadata":{"permalink":"/blog/customizable-admin-panel-with-nestjs","source":"@site/blog/2021-10-4-admin-panel-with-nestjs.md","title":"Build Fast and Customizable Admin Panel with NestJS","description":"We will prepare a simple `job-posting` application. We will also use the refine framework for the admin panel. The project will consist of two parts, api and admin.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"nestjs","permalink":"/blog/tags/nestjs"},{"label":"crud","permalink":"/blog/tags/crud"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":3.93,"truncated":true,"authors":[{"name":"Y\u0131ld\u0131ray \xdcnl\xfc","title":"Software Developer","url":"https://github.com/yildirayunlu","imageURL":"https://github.com/yildirayunlu.png","key":"yildiray"}],"prevItem":{"title":"Migrating a React-Admin Application to Refine","permalink":"/blog/migrating-a-react-admin-application-to-refine"},"nextItem":{"title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi"}},"content":"import api from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/api.png\';\\nimport refine_sample from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/refine_sample.png\';\\nimport refine_job from \'@site/static/img/blog/2021-10-4-admin-panel-with-nestjs/refine_job.png\';\\n\\nIn this article, we will prepare a simple `job-posting` application. We will also use the [refine](https://github.com/pankod/refine) framework for the **admin panel**. The project will consist of two parts, api and admin.\\n\\n\x3c!--truncate--\x3e\\n\\nAll the steps described are in this [repo](https://github.com/pankod/refine/tree/master/examples/blog/jobPosting).\\n\\n## Intro\\n[NestJS](https://github.com/nestjs/nest) is a framework for building efficient, scalable Node.js server-side applications. With [nestjsx/crud](https://github.com/nestjsx/crud) we can add CRUD functions quickly and effortlessly on this framework.\\n\\n## NestJS Rest Api\\n\\nTo start playing with NestJS you should have node (>= 10.13.0, except for v13) and [npm](https://nodejs.org) installed.\\n\\n**Create Project Folder**\\n\\n```bash\\nmkdir job-posting-app\\ncd job-posting-app\\n```\\n\\nSetting up a new project is quite simple with the [Nest CLI](https://docs.nestjs.com/cli/overview). With npm installed, you can create a new Nest project with the following commands in your OS terminal:\\n\\n```bash\\nnpm i -g @nestjs/cli\\nnest new api\\n```\\n\\n[TypeORM](https://github.com/typeorm/typeorm) is definitely the most mature ORM available in the node.js world. Since it\'s written in TypeScript, it works pretty well with the Nest framework. I chose mysql as database. TypeORM supports many databases (MySQL, MariaDB, Postgres etc.)\\n\\nTo start with this library we have to install all required dependencies:\\n\\n```bash\\nnpm install --save @nestjs/typeorm @nestjs/config typeorm mysql2\\n```\\n\\n- Create an [.env.example](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/.env.example) file. Here we will save the database information.\\n- Create and configured a [docker-compose](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/docker-compose.yml) file for MySQL.\\n- Create a [ormconfig.ts](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/api/ormconfig.ts) file for migrations.\\n- Add the following scripts to the `package.json` file for migrations.\\n```bash\\n\\"typeorm\\": \\"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\\",\\n\\"db:migration:generate\\": \\"npm run typeorm -- migration:generate\\",\\n\\"db:migration:run\\": \\"npm run typeorm -- migration:run\\",\\n\\"db:migration:revert\\": \\"npm run typeorm -- migration:revert\\",\\n\\"db:refresh\\": \\"npm run typeorm schema:drop && npm run db:migration:run\\"\\n```\\n- Import the `TypeOrmModule` into the `app.module.ts`\\n\\n**Install nestjsx-crud**\\nI used [nestjsx-crud](https://github.com/nestjsx/crud) library because it makes crud functions easier.\\n\\n```bash\\nnpm i @nestjsx/crud @nestjsx/crud-typeorm class-transformer class-validator\\n```\\n\\n*Since the steps to create Entities Contorllers, and services are very long, I do not explain step by step. You can check the [repo](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app) for details.*\\n\\nIt created these end-points automatically with nestjsx/crud.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={api} alt=\\"api\\" />\\n</div>\\n<br />\\n\\n## Refine Admin Panel\\n\\n**Now let\'s refine the admin panel.** With [Superplate](https://pankod.github.io/superplate/docs), we can quickly create a `refine` project.\\n\\n```bash\\nnpx superplate-cli admin\\n```\\n\\nAnswer as below:\\n\\n```\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 admin\\n\u2714 Do you want to customize theme?: \xb7 less\\n\u2714 Data Provider: \xb7 nestjsx-crud-data-provider\\n\u2714 Auth Provider: \xb7 none\\n\u2714 Do you want to add an example page? \xb7 example-resource\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\n```bash\\ncd admin\\nnpm run dev\\n```\\n\\nRefine\'s sample application will welcome you.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_sample} alt=\\"refine_sample\\" />\\n</div>\\n<br />\\n\\nChange api url in [admin/src/App.tsx](https://github.com/pankod/refine-hackathon/tree/main/job-posting-app/blob/master/admin/src/App.tsx)\\n\\n```\\nconst API_URL = \\"http://localhost:3000\\";\\n```\\n\\nLet\'s add the listing page in refine for the `companies` crud end-point.\\n\\n```tsx title=\\"/admin/src/pages/companies/list.tsx\\"\\nimport {\\n  List,\\n  Table,\\n  TextField,\\n  useTable,\\n  IResourceComponentsProps,\\n  getDefaultSortOrder,\\n  Space,\\n  EditButton,\\n  DeleteButton,\\n  TagField,\\n  ShowButton,\\n} from \\"@pankod/refine\\";\\nimport { ICompany } from \\"interfaces\\";\\n\\nexport const CompanyList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, sorter } = useTable<ICompany>({\\n    initialSorter: [\\n      {\\n        field: \\"id\\",\\n        order: \\"desc\\",\\n      },\\n    ],\\n  });\\n\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column\\n          dataIndex=\\"id\\"\\n          key=\\"id\\"\\n          title=\\"ID\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"name\\"\\n          key=\\"name\\"\\n          title=\\"Name\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"name\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"location\\"\\n          key=\\"location\\"\\n          title=\\"Location\\"\\n          render={(value) => <TextField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"location\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column\\n          dataIndex=\\"isActive\\"\\n          key=\\"isActive\\"\\n          title=\\"Is Active\\"\\n          render={(value) => <TagField value={value} />}\\n          defaultSortOrder={getDefaultSortOrder(\\"status\\", sorter)}\\n          sorter\\n        />\\n        <Table.Column<ICompany>\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record) => (\\n            <Space>\\n              <EditButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <ShowButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <DeleteButton hideText size=\\"small\\" recordItemId={record.id} />\\n            </Space>\\n          )}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n```\\n\\nSimilarly, let\'s add the create, edit and jobs crud pages under the pages folder.\\n\\nNext, let\'s define the resources in `<Refine>` (App.tsx):\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport nestjsxCrudDataProvider from \\"@pankod/refine-nestjsx-crud\\";\\n\\nimport \\"styles/antd.less\\";\\n\\nimport {\\n    CompanyList,\\n    CompanyShow,\\n    CompanyCreate,\\n    CompanyEdit,\\n} from \\"./pages/companies\\";\\nimport {\\n    Title,\\n    Header,\\n    Sider,\\n    Footer,\\n    Layout,\\n    OffLayoutArea,\\n} from \\"components\\";\\nimport { JobList, JobCreate, JobEdit } from \\"pages/jobs\\";\\n\\nfunction App() {\\n    const API_URL = \\"http://localhost:3000\\";\\n    const dataProvider = nestjsxCrudDataProvider(API_URL);\\n\\n    return (\\n        <Refine\\n            dataProvider={dataProvider}\\n            Title={Title}\\n            Header={Header}\\n            Sider={Sider}\\n            Footer={Footer}\\n            Layout={Layout}\\n            OffLayoutArea={OffLayoutArea}\\n            routerProvider={routerProvider}\\n            resources={[\\n                {\\n                    name: \\"companies\\",\\n                    list: CompanyList,\\n                    create: CompanyCreate,\\n                    edit: CompanyEdit,\\n                    show: CompanyShow,\\n                },\\n                {\\n                    name: \\"jobs\\",\\n                    list: JobList,\\n                    create: JobCreate,\\n                    edit: JobEdit,\\n                    show: CompanyShow,\\n                },\\n            ]}\\n        />\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_job} alt=\\"refine_job\\" />\\n</div>\\n<br />"},{"id":"create-a-feedback-admin-panel-with-refine-and-strapi","metadata":{"permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi","source":"@site/blog/2021-10-4-feedback-admin-panel.md","title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","description":"We will quickly create an api with Strapi and then develop its frontend with refine. Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"strapi","permalink":"/blog/tags/strapi"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":6.85,"truncated":true,"authors":[{"name":"Salih \xd6zdemir","title":"Software Developer","url":"https://github.com/salihozdemir","imageURL":"https://github.com/salihozdemir.png","key":"salih"}],"prevItem":{"title":"Build Fast and Customizable Admin Panel with NestJS","permalink":"/blog/customizable-admin-panel-with-nestjs"},"nextItem":{"title":"Let\'s Build an App to Manage Your Hackathons with Refine","permalink":"/blog/manage-hackathons-with-refine"}},"content":"import refine_welcome from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/refine_welcome.png\';\\nimport header from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/header.png\';\\nimport strapi_content from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/strapi_content.png\';\\nimport signin from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/signin.png\';\\nimport user from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/user.png\';\\nimport feedback from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback.png\';\\nimport feedbacks from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedbacks.png\';\\nimport feedback_overview from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/feedback_overview.gif\';\\nimport widgets from \'@site/static/img/blog/2021-10-4-feedback-admin-panel/widgets.gif\';\\n\\n\\nIn this article, we will create a panel where we can manage the feedback we receive from our web application. \\n\\n\x3c!--truncate--\x3e\\n\\nWe will quickly create an api with [Strapi.io](https://strapi.io) and then develop its frontend with [refine](https://refine.dev). Thus, let\'s see how an admin panel can be created in a very short time with the perfect harmony of Strapi and refine.\\n\\nFeatures that our panel will have:\\n\\n- Authentication with strapi.io\\n- A page to list feedbacks\\n- Mutation on Feedbacks\\n\\n### Creating api with `Strapi`\\n\\nLet\'s create our backend project with Strapi\'s [quick start guide](https:/strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html).\\n\\n```bash\\nnpx create-strapi-app strapi-feedback-api --quickstart\\n```\\n\\nAfter the installation is complete, the tab will automatically open in the browser. Here, let\'s create a `feedback` collection with Content-Types Builder.\\n\\nQuite simply, a feedback should have a `description` text field, A `page` text field that shows the page the feedback was sent from, and a `type` enumeration field indicating the type of feedback (issue, idea, other, archive).\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={strapi_content} alt=\\"content\\" />\\n</div>\\n<br />\\n\\n### Creating panel with `refine`\\n\\nLet\'s create our frontend project with refine\'s [setting up guide](https://refine.dev/docs/#setting-up).\\n\\nThere are two alternative methods to set up a refine application. We will quickly create our application with [superplate](https://pankod.github.io/superplate).\\n\\n```bash\\nnpx superplate-cli refine-feedback-client\\n```\\n\\nSelect the following options to complete the CLI wizard:\\n\\n```\\n? Select your project type:\\n\u276f refine\\n\\n? What will be the name of your app:\\nrefine-strapi-web\\n\\n? Package manager:\\n\u276f Npm\\n\\n? Do you want to customize the theme?:\\n\u276f No (Ant Design default theme)\\n\\n? Data Provider :\\n\u276f Strapi\\n\\n? Do you want to customize layout?\\n\u276f Yes, I want\\n\\n? i18n - Internationalization:\\n\u276f No\\n```\\n\\nAfter the installation is completed, Strapi-specific [data provider](https://github.com/pankod/refine/blob/master/packages/strapi), auth provider, and also layout components that we can change the default view of Refine with the custom layout option will be included in our project.\\n\\nNow, bootstrap the app with the following command:\\n\\n```bash\\nnpm run dev\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={refine_welcome} alt=\\"welcome\\" />\\n</div>\\n<br />\\n\\nNow let\'s list the changes we will make:\\n\\n- Change our Strapi API URL\\n- Remove components that we will not use when changing the refinement look\\n- Adding resources according to the collection name we created in Strapi\\n\\n```diff\\n+ import { Refine } from \\"@pankod/refine\\";\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { DataProvider } from \\"@pankod/refine-strapi\\";\\nimport strapiAuthProvider from \\"authProvider\\";\\nimport {\\n- Title,\\n  Header,\\n- Sider,\\n- Footer,\\n  Layout,\\n  OffLayoutArea,\\n} from \\"components\\";\\n\\nfunction App() {\\n-  const API_URL = \\"your-strapi-api-url\\";\\n+  const API_URL = \\"http://localhost:1337\\";\\n\\n  const { authProvider, axiosInstance } = strapiAuthProvider(API_URL);\\n  const dataProvider = DataProvider(API_URL, axiosInstance);\\n  return (\\n    <Refine\\n      dataProvider={dataProvider}\\n      authProvider={authProvider}\\n-     Title={Title}\\n      Header={Header}\\n-     Sider={Sider}\\n-     Footer={Footer}\\n      Layout={Layout}\\n      OffLayoutArea={OffLayoutArea}\\n      routerProvider={routerProvider}\\n      resources={[\\n        {\\n          name: \\"feedbacks\\",\\n        },\\n      ]}\\n    />\\n  );\\n}\\n \\n\\nexport default App;\\n```\\n\\nAfter adding the resource, our auth provider was activated.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\nNow let\'s create a user on the Strapi to be able to login to the application.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={user} alt=\\"user\\" />\\n</div>\\n<br />\\n\\nWe created a user and login to the application with this user.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback} alt=\\"feedback\\" />\\n</div>\\n<br />\\n\\nLet\'s customize the layout component, remove the sider and add a header.\\n\\n### Custom Layout\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout as AntLayout } from \\"antd\\";\\n\\nimport { LayoutProps } from \\"@pankod/refine\\";\\n\\nexport const Layout: React.FC<LayoutProps> = ({\\n  children,\\n  Header,\\n  OffLayoutArea,\\n}) => {\\n  return (\\n    <AntLayout style={{ minHeight: \\"100vh\\", flexDirection: \\"row\\" }}>\\n      <AntLayout>\\n        <Header />\\n        <AntLayout.Content>\\n          {children}\\n          <OffLayoutArea />\\n        </AntLayout.Content>\\n      </AntLayout>\\n    </AntLayout>\\n  );\\n};\\n```\\n\\nLet\'s customize the header component too\\n\\n### Custom Header\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Layout } from \\"antd\\";\\n\\nexport const Header: React.FC = () => {\\n  return (\\n    <Layout.Header\\n      style={{\\n        display: \\"flex\\",\\n        justifyContent: \\"center\\",\\n        alignItems: \\"center\\",\\n        height: \\"64px\\",\\n        backgroundColor: \\"#FFF\\",\\n        borderBottom: \\"1px solid #f0f0f0\\",\\n      }}\\n    >\\n      <img src=\\"./refeedback.png\\" alt=\\"refeedback\\" style={{ width: \\"250px\\" }} />\\n    </Layout.Header>\\n  );\\n};\\n```\\n\\nIn the new view, there are no siders anymore and the header we have customized is here.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={header} alt=\\"header\\" />\\n</div>\\n<br />\\n\\nNow we come to the part where we can list our feedback and make changes to it. Before that, let\'s create dummy feedback records on Strapi.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedbacks} alt=\\"feedbacks\\" />\\n</div>\\n<br />\\n\\n\\nCreate a `FeedbackList.tsx` file under the `pages` folder. Then, let\'s create our component as follows with the components and hooks that come with refine.\\n\\n### Create FeedbackList\\n\\n```tsx\\nimport {\\n  List,\\n  Typography,\\n  AntdList,\\n  useSimpleList,\\n  CrudFilters,\\n  Form,\\n  HttpError,\\n  Row,\\n  Col,\\n  Tag,\\n  Radio,\\n  Space,\\n  Descriptions,\\n  Button,\\n  DateField,\\n  Card,\\n  useUpdate,\\n} from \\"@pankod/refine\\";\\n\\nimport { IFeedback, IFeedbackFilterVariables, FeedBackType } from \\"interfaces\\";\\n\\nconst { Paragraph } = Typography;\\n\\nconst addTagColor = (type: FeedBackType) => {\\n  switch (type) {\\n    case \\"issue\\":\\n      return \\"error\\";\\n    case \\"idea\\":\\n      return \\"orange\\";\\n    default:\\n      return \\"default\\";\\n  }\\n};\\n\\nexport const FeedbackList: React.FC = () => {\\n  const { listProps, searchFormProps } = useSimpleList<\\n    IFeedback,\\n    HttpError,\\n    IFeedbackFilterVariables\\n  >({\\n    initialSorter: [{ field: \\"created_at\\", order: \\"desc\\" }],\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { type } = params;\\n\\n      filters.push({\\n        field: \\"type\\",\\n        operator: \\"eq\\",\\n        value: type || undefined,\\n      });\\n\\n      return filters;\\n    },\\n  });\\n\\n  const { mutate, isLoading } = useUpdate();\\n\\n  const renderItem = (item: IFeedback) => {\\n    const { id, description, type, page, created_at } = item;\\n    return (\\n      <AntdList.Item>\\n        <Card hoverable>\\n          <AntdList.Item.Meta\\n            description={\\n              <div style={{ display: \\"flex\\", justifyContent: \\"space-between\\" }}>\\n                <Tag\\n                  color={addTagColor(type)}\\n                  style={{ textTransform: \\"capitalize\\" }}\\n                >\\n                  {type}\\n                </Tag>\\n                <DateField format=\\"LLL\\" value={created_at} />\\n              </div>\\n            }\\n          />\\n          <Paragraph strong>{description}</Paragraph>\\n          <Descriptions labelStyle={{ color: \\"grey\\", fontWeight: 600 }}>\\n            <Descriptions.Item label=\\"Path\\">{page}</Descriptions.Item>\\n          </Descriptions>\\n          <div style={{ display: \\"flex\\", justifyContent: \\"end\\", gap: \\"4px\\" }}>\\n            <Button\\n              size=\\"small\\"\\n              loading={isLoading}\\n              onClick={() =>\\n                mutate({\\n                  id,\\n                  resource: \\"feedbacks\\",\\n                  values: {\\n                    type: \\"archive\\",\\n                  },\\n                })\\n              }\\n            >\\n              Archive\\n            </Button>\\n          </div>\\n        </Card>\\n      </AntdList.Item>\\n    );\\n  };\\n\\n  return (\\n    <List title=\\"\\" pageHeaderProps={{ style: { height: \\"100%\\" } }}>\\n      <Row gutter={[64, 0]} justify=\\"center\\">\\n        <Col xs={24} sm={24} md={4} lg={4} xl={4}>\\n          <Form\\n            {...searchFormProps}\\n            layout=\\"vertical\\"\\n            onValuesChange={() => searchFormProps.form?.submit()}\\n            initialValues={{\\n              type: \\"\\",\\n            }}\\n          >\\n            <Form.Item label=\\"FILTERS\\" name=\\"type\\">\\n              <Radio.Group>\\n                <Space direction=\\"vertical\\">\\n                  <Radio.Button value=\\"\\">All</Radio.Button>\\n                  <Radio.Button value=\\"issue\\">Issue</Radio.Button>\\n                  <Radio.Button value=\\"idea\\">Idea</Radio.Button>\\n                  <Radio.Button value=\\"other\\">Other</Radio.Button>\\n                  <Radio.Button value=\\"archive\\">Archive</Radio.Button>\\n                </Space>\\n              </Radio.Group>\\n            </Form.Item>\\n          </Form>\\n        </Col>\\n        <Col xs={24} sm={24} md={14} lg={14} xl={14}>\\n          <AntdList\\n            {...listProps}\\n            split={false}\\n            renderItem={renderItem}\\n            itemLayout=\\"vertical\\"\\n          />\\n        </Col>\\n      </Row>\\n    </List>\\n  );\\n};\\n```\\n\\n```ts\\nexport type FeedBackType = \\"idea\\" | \\"issue\\" | \\"other\\" | \\"archive\\";\\n\\nexport interface IFeedback {\\n  id: string;\\n  description: string;\\n  page: string;\\n  user: string;\\n  type: FeedBackType;\\n  created_at: Date;\\n}\\n\\nexport interface IFeedbackFilterVariables {\\n  type: FeedBackType;\\n}\\n```\\n\\nIn this component\\n\\n- We listed our records using the [`useSimpleList`](https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList/) and [Ant Design](https://ant.design) [`<List>`](https://ant.design/components/list) component.\\n- We used Antd [`<Form>`](https://ant.design/components/form/) component to filter our records.\\n- We made it possible to change the `type` of our record with [`useUpdate`](https://refine.dev/docs/api-references/hooks/data/useUpdate)\\n\\nSee detailed usage of useSimpleList for adding new filters, adding search entries, dynamic sorting operations and more [here](https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList/).\\n\\n### Overview\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={feedback_overview} alt=\\"feedback_overview\\" />\\n</div>\\n<br />\\n\\n \\n\\nLet\'s develop feedback widget where we can get feedback to expand the application a little more. For this application, I will develop this component with refine, but you can create this component with Strapi APIs in any way you want.\\n\\nYou can look at the code of the component I developed [here](https://github.com/pankod/refine-hackathon/tree/main/refeedback/src/components/feedback).\\n\\nNow let\'s add this component to the `OfflayouArea` component and create feedback on the page and see how it comes to our feedback list.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={widgets} alt=\\"widgets\\" />\\n</div>\\n<br />\\n\\nYou can find the source code of the project here: https://github.com/pankod/refine/tree/master/examples/blog/refeedback"},{"id":"manage-hackathons-with-refine","metadata":{"permalink":"/blog/manage-hackathons-with-refine","source":"@site/blog/2021-10-4-manage-hackatons.md","title":"Let\'s Build an App to Manage Your Hackathons with Refine","description":"We\'ll be building a demo app to manage hackathons with refine.","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":3.245,"truncated":true,"authors":[{"name":"Muharrem Kocadere","title":"Frontend Developer","url":"https://github.com/mhrrmk","imageURL":"https://github.com/mhrrmk.png","key":"muharrem"}],"prevItem":{"title":"Create a Feedback Admin panel in 15 Minutes with Refine and Strapi","permalink":"/blog/create-a-feedback-admin-panel-with-refine-and-strapi"},"nextItem":{"title":"Simple Web Application Example with Refine","permalink":"/blog/simple-web-application-with-refine"}},"content":"import hackathons from \'@site/static/img/blog/2021-10-4-manage-hackathons/hackathons.png\';\\nimport create from \'@site/static/img/blog/2021-10-4-manage-hackathons/create.png\';\\n\\nWe\'ll be building a demo app to manage hackathons with [refine](https://refine.dev/). We\'ll be able to create new hackathons, new project entries for a hackathon and criterias for a hackathon.\\n\\n\x3c!--truncate--\x3e\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={hackathons} alt=\\"hackathons\\" />\\n</div>\\n<br/>\\n\\nWe\'ll use [supabase](https://supabase.io/) as the backend service. **refine** comes with a builtin data provider for supabase thus it\'s very easy to create crud pages.\\n\\n## Creating tables\\nOur app will have these tables in supabase\\n* criterias\\n* hackathons\\n* hackathoners\\n* projects\\n* projectscores  \\n\\nThese are reflected in our app as \\n```ts\\nexport type HackathonerType = {\\n  id: string;\\n  name: string;\\n};\\n\\nexport type HackathonType = {\\n  id: string;\\n  start: string;\\n  end: string;\\n  name: string;\\n};\\n\\nexport type ProjectType = {\\n  id: string;\\n  name: string;\\n  description: string;\\n  url: string;\\n  hackathon_id: string;\\n  hackathoner_id: string;\\n};\\n\\nexport type CriteriaType = {\\n  id: string;\\n  name: string;\\n  hackathon_id: string;\\n};\\n\\nexport type ProjectScoreType = {\\n  project_id: string;\\n  criteria_id: string;\\n  score: string;\\n};\\n\\n```\\n\\n## Craeting CRUD pages\\nCreating crud pages is as easy like this:\\n\\nList page:\\n```tsx\\nimport {\\n  List,\\n  Table,\\n  useTable,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  TextField,\\n} from \\"@pankod/refine\\";\\n\\nimport dayjs from \\"dayjs\\";\\n\\nimport { HackathonType } from \\"interfaces\\";\\n\\nexport const HackathonsList: React.FC = () => {\\n  const { tableProps } = useTable<HackathonType>();\\n\\n  return (\\n    <List>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column dataIndex=\\"id\\" title=\\"ID\\" />\\n        <Table.Column dataIndex=\\"name\\" title=\\"Name\\" />\\n        <Table.Column\\n          dataIndex=\\"start\\"\\n          title=\\"Starts\\"\\n          render={(value) => (\\n            <TextField value={dayjs(value).format(\\"DD/MMMM dddd\\")} />\\n          )}\\n        />\\n        <Table.Column\\n          dataIndex=\\"end\\"\\n          title=\\"Ends\\"\\n          render={(value) => (\\n            <TextField value={dayjs(value).format(\\"DD/MMMM dddd\\")} />\\n          )}\\n        />\\n        <Table.Column\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_text, record: HackathonType): React.ReactNode => {\\n            return (\\n              <Space>\\n                <ShowButton size=\\"small\\" recordItemId={record.id} hideText />\\n                <EditButton size=\\"small\\" recordItemId={record.id} hideText />\\n              </Space>\\n            );\\n          }}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n\\n## Create page:\\n```tsx\\nimport { Create, Form, Input, useForm, DatePicker } from \\"@pankod/refine\\";\\n\\nimport { HackathonType } from \\"interfaces\\";\\n\\nexport const HackathonsCreate: React.FC = () => {\\n  const { formProps, saveButtonProps } = useForm<HackathonType>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item label=\\"Name\\" name=\\"name\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Name\\" name=\\"start\\">\\n          <DatePicker />\\n        </Form.Item>\\n        <Form.Item label=\\"Name\\" name=\\"end\\">\\n          <DatePicker />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\nThen use these pages as the corresponding crud component for the `hackathon` resource:\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport { supabaseClient } from \\"utility\\";\\nimport {\\n  HackathonsList,\\n  HackathonsCreate,\\n  HackathonsEdit,\\n  HackathonsShow,\\n} from \\"./pages/hackathons\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      resources={[{\\n        name: \\"hackathons\\",\\n        list: HackathonsList,\\n        create: HackathonsCreate,\\n        edit: HackathonsEdit,\\n        show: HackathonsShow\\n      }]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br/>\\n\\n**refine** comes with builtin hooks for Ant design components. You can find detailed usage for the hooks and supabase in the [documentation](https://refine.dev/docs/)\\n\\n## Creating voting page\\nWe\'ll use the dashboard option to place voting page. We\'ll need data from different resources. **refine** comes with powerful hooks that are based on react-query to get data from those resources.\\n\\nFor example to get the hackathons that are active now we can use the `useList` hook:\\n```tsx\\nexport const DashboardPage: React.FC = () => {\\n  const currentHackathons = useList<HackathonType>({\\n    resource: \\"hackathons\\",\\n    config: {\\n      filters: [\\n        {\\n          field: \\"start\\",\\n          operator: \\"lte\\",\\n          value: now,\\n        },\\n        {\\n          field: \\"end\\",\\n          operator: \\"gte\\",\\n          value: now,\\n        },\\n      ],\\n    },\\n  });\\n}\\n```\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/hackathonize-xcpcp?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"hackathonize\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\nWe can get data from other resources in a similar fashion. You can find the [repo here](https://github.com/pankod/refine/tree/master/examples/blog/hackathonize)\\n## Conclusion\\nThis project itself is a product of a hackathon. It lacks lots of feature like authorization though it shows how **refine** makes it easy to quickly build a working app."},{"id":"simple-web-application-with-refine","metadata":{"permalink":"/blog/simple-web-application-with-refine","source":"@site/blog/2021-10-4-simple-web-application.md","title":"Simple Web Application Example with Refine","description":"Do you want to develop a web application quickly? You are at the right place!","date":"2021-10-04T00:00:00.000Z","formattedDate":"October 4, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":9.83,"truncated":true,"authors":[{"name":"Ayd\u0131n Akyol","title":"Software Developer","url":"https://github.com/biskuvit","imageURL":"https://github.com/biskuvit.png","key":"aydin"}],"prevItem":{"title":"Let\'s Build an App to Manage Your Hackathons with Refine","permalink":"/blog/manage-hackathons-with-refine"}},"content":"import cli from \'@site/static/img/blog/2021-10-4-simple-web-application/cli.png\';\\nimport create from \'@site/static/img/blog/2021-10-4-simple-web-application/create.png\';\\nimport detailed from \'@site/static/img/blog/2021-10-4-simple-web-application/detailed.png\';\\nimport edit from \'@site/static/img/blog/2021-10-4-simple-web-application/edit.png\';\\nimport movies_all from \'@site/static/img/blog/2021-10-4-simple-web-application/movies_all.png\';\\nimport movies from \'@site/static/img/blog/2021-10-4-simple-web-application/movies.png\';\\nimport show from \'@site/static/img/blog/2021-10-4-simple-web-application/show.png\';\\nimport signin from \'@site/static/img/blog/2021-10-4-simple-web-application/signin.png\';\\n\\nDo you want to develop a web application quickly? You are at the right place! I will develop a simple movie web application with **refine** on the frontend and **Supabase** on the backend, you should continue reading. I will try to explain it step by step in a very simple way.\\n\\n\x3c!--truncate--\x3e\\n\\n## Refine setup\\n\\nThere are two alternative methods to set up a refine application.\\n\\nThe recommended way is using the [superplate](https://github.com/pankod/superplate) tool. superplate\'s CLI wizard will let you create and customize your application in seconds.\\n\\nAlternatively, you may use the create-react-app tool to create an empty React application and then add refine module via npm.\\n\\nI will use superplate-cli and select a Supabase. You can customize other options as you wish.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={cli} alt=\\"cli\\" />\\n</div>\\n<br />\\n\\n## Create admin panel with refine\\n\\n * We should add our Supabase url and key in *supabaseClient.tsx*\\n * Add custom login page in *App.tsx*\\n\\n*App.tsx*\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\n## Login page\\n```tsx\\n\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  Checkbox,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\n\\nimport { useLogin } from \\"@pankod/refine\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  username: string;\\n  password: string;\\n  remember: boolean;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                requiredMark={false}\\n                initialValues={{\\n                  remember: false,\\n                  email: \\"info+refineflix@refine.dev\\",\\n                  password: \\"refineflix\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <div style={{ marginBottom: \\"12px\\" }}>\\n                  <Form.Item name=\\"remember\\" valuePropName=\\"checked\\" noStyle>\\n                    <Checkbox\\n                      style={{\\n                        fontSize: \\"12px\\",\\n                      }}\\n                    >\\n                      Remember me\\n                    </Checkbox>\\n                  </Form.Item>\\n\\n                  <a\\n                    style={{\\n                      float: \\"right\\",\\n                      fontSize: \\"12px\\",\\n                    }}\\n                    href=\\"#\\"\\n                  >\\n                    Forgot password?\\n                  </a>\\n                </div>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?{\\" \\"}\\n                  <a href=\\"#\\" style={{ fontWeight: \\"bold\\" }}>\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n```css\\n.layout {\\n    background: radial-gradient(50% 50% at 50% 50%, #63386a 0%, #310438 100%);\\n    background-size: \\"cover\\";\\n  }\\n  \\n  .container {\\n    max-width: 408px;\\n    margin: auto;\\n  }\\n  \\n  .title {\\n    text-align: center;\\n    color: #626262;\\n    font-size: 30px;\\n    letter-spacing: -0.04em;\\n  }\\n  \\n  .imageContainer {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    margin-bottom: 16px;\\n  }\\n  \\n```\\nYou can use default user for login.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={signin} alt=\\"signin\\" />\\n</div>\\n<br />\\n\\n* Create movies list page with add a resource in *App.tsx*\\n\\n```tsx\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\n\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport {\\n  AdminMovieList,\\n} from \\"./pages/admin/movies\\";\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      resources={[\\n          {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n          },\\n     ]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n* AdminMovieList page\\n```tsx\\nimport {\\n  List,\\n  Table,\\n  useTable,\\n  IResourceComponentsProps,\\n  Space,\\n  EditButton,\\n  ShowButton,\\n  getDefaultSortOrder,\\n  CreateButton,\\n  DeleteButton,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nexport const AdminMovieList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, sorter } = useTable<IMovies>({\\n    initialSorter: [\\n      {\\n        field: \\"id\\",\\n        order: \\"asc\\",\\n      },\\n    ],\\n  });\\n\\n  return (\\n    <List pageHeaderProps={{ extra: <CreateButton /> }}>\\n      <Table {...tableProps} rowKey=\\"id\\">\\n        <Table.Column\\n          key=\\"id\\"\\n          dataIndex=\\"id\\"\\n          title=\\"ID\\"\\n          sorter\\n          defaultSortOrder={getDefaultSortOrder(\\"id\\", sorter)}\\n        />\\n        <Table.Column key=\\"name\\" dataIndex=\\"name\\" title=\\"name\\" sorter />\\n\\n        <Table.Column<IMovies>\\n          title=\\"Actions\\"\\n          dataIndex=\\"actions\\"\\n          render={(_, record) => (\\n            <Space>\\n              <EditButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <ShowButton hideText size=\\"small\\" recordItemId={record.id} />\\n              <DeleteButton hideText size=\\"small\\" recordItemId={record.id} />\\n            </Space>\\n          )}\\n        />\\n      </Table>\\n    </List>\\n  );\\n};\\n\\n```\\n\\n* Movies interface\\n```tsx\\nexport interface IMovies {\\n  id: string;\\n  name: string;\\n  description: string;\\n  preload: string;\\n  director: string;\\n  stars: string;\\n  premiere: string;\\n  trailer: string;\\n  images: IFile[];\\n}\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={movies} alt=\\"movies\\" />\\n</div>\\n<br />\\n\\n* Now we will add create page\\n\\n## Create page\\n\\n```tsx\\n    resources={[\\n        {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            create: AdminMovieCreate,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n        },\\n    ]}\\n```\\n\\n```tsx\\nimport {\\n  Create,\\n  Form,\\n  Input,\\n  IResourceComponentsProps,\\n  Upload,\\n  useForm,\\n  RcFile,\\n} from \\"@pankod/refine\\";\\nimport { IMovies } from \\"interfaces\\";\\nimport { supabaseClient, normalizeFile } from \\"utility\\";\\n\\nexport const AdminMovieCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMovies>();\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Name\\"\\n          name=\\"name\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Premiere\\" name=\\"premiere\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Director\\" name=\\"director\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Stars\\" name=\\"stars\\">\\n          <Input />\\n        </Form.Item>\\n\\n        <Form.Item label=\\"Images\\">\\n          <Form.Item\\n            name=\\"images\\"\\n            valuePropName=\\"fileList\\"\\n            normalize={normalizeFile}\\n            noStyle\\n          >\\n            <Upload.Dragger\\n              name=\\"file\\"\\n              listType=\\"picture\\"\\n              multiple\\n              customRequest={async ({ file, onError, onSuccess }) => {\\n                try {\\n                  const rcFile = file as RcFile;\\n\\n                  await supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .upload(`public/${rcFile.name}`, file, {\\n                      cacheControl: \\"3600\\",\\n                      upsert: true,\\n                    });\\n\\n                  const { data } = supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .getPublicUrl(`public/${rcFile.name}`);\\n\\n                  const xhr = new XMLHttpRequest();\\n                  onSuccess && onSuccess({ url: data?.publicURL }, xhr);\\n                } catch (error) {\\n                  onError && onError(new Error(\\"Upload Error\\"));\\n                }\\n              }}\\n            >\\n              <p className=\\"ant-upload-text\\">Drag & drop a file in this area</p>\\n            </Upload.Dragger>\\n          </Form.Item>\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n\\n```\\n\\n* normalize file in utility folder\\n\\n```tsx\\nimport { UploadFile } from \\"@pankod/refine\\";\\n\\ninterface UploadResponse {\\n    url: string;\\n}\\ninterface EventArgs<T = UploadResponse> {\\n    file: UploadFile<T>;\\n    fileList: Array<UploadFile<T>>;\\n}\\n\\nexport const normalizeFile = (event: EventArgs) => {\\n    const { fileList } = event;\\n\\n    return fileList.map((item) => {\\n        const { uid, name, type, size, response, percent, status } = item;\\n\\n        return {\\n            uid,\\n            name,\\n            url: item.url || response?.url,\\n            type,\\n            size,\\n            percent,\\n            status,\\n        };\\n    });\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={create} alt=\\"create\\" />\\n</div>\\n<br />\\n\\n## Edit page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Edit,\\n  Form,\\n  Input,\\n  IResourceComponentsProps,\\n  RcFile,\\n  Upload,\\n  useForm,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\nimport { supabaseClient, normalizeFile } from \\"utility\\";\\n\\nexport const AdminMovieEdit: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<IMovies>();\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps} pageHeaderProps={{ extra: null }}>\\n      <Form {...formProps} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Name\\"\\n          name=\\"name\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Premiere\\" name=\\"premiere\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Director\\" name=\\"director\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Stars\\" name=\\"stars\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Trailer\\" name=\\"trailer\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Images\\">\\n          <Form.Item\\n            name=\\"images\\"\\n            valuePropName=\\"fileList\\"\\n            normalize={normalizeFile}\\n            noStyle\\n          >\\n            <Upload.Dragger\\n              name=\\"file\\"\\n              listType=\\"picture\\"\\n              multiple\\n              customRequest={async ({ file, onError, onSuccess }) => {\\n                try {\\n                  const rcFile = file as RcFile;\\n\\n                  await supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .upload(`public/${rcFile.name}`, file, {\\n                      cacheControl: \\"3600\\",\\n                      upsert: true,\\n                    });\\n\\n                  const { data } = supabaseClient.storage\\n                    .from(\\"refineflix\\")\\n                    .getPublicUrl(`public/${rcFile.name}`);\\n\\n                  const xhr = new XMLHttpRequest();\\n                  onSuccess && onSuccess({ url: data?.publicURL }, xhr);\\n                } catch (error) {\\n                  onError && onError(new Error(\\"Upload Error\\"));\\n                }\\n              }}\\n            >\\n              <p className=\\"ant-upload-text\\">Drag & drop a file in this area</p>\\n            </Upload.Dragger>\\n          </Form.Item>\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={edit} alt=\\"edit\\" />\\n</div>\\n<br />\\n\\n## Show page\\n\\n```tsx\\nimport {\\n  useShow,\\n  Show,\\n  Typography,\\n  IResourceComponentsProps,\\n  Space,\\n  ImageField,\\n  RefreshButton,\\n  EditButton,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const AdminMovieShow: React.FC<IResourceComponentsProps> = () => {\\n  const { queryResult } = useShow<IMovies>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { push } = useNavigation();\\n\\n  return (\\n    <Show\\n      isLoading={isLoading}\\n      pageHeaderProps={{\\n        title: record?.name,\\n        subTitle: record?.premiere,\\n        extra: (\\n          <>\\n            <EditButton\\n              onClick={() => push(`/admin/movies/edit/${record?.id}`)}\\n            />\\n            <RefreshButton />\\n          </>\\n        ),\\n      }}\\n    >\\n      <Title level={5}>Director</Title>\\n      <Text>{record?.director || \\"-\\"}</Text>\\n\\n      <Title level={5}>Stars</Title>\\n      <Text>{record?.stars || \\"-\\"}</Text>\\n\\n      <Title level={5}>Trailer</Title>\\n      {record?.trailer && (\\n        <video width=\\"400\\" controls>\\n          <source src={record.trailer} type=\\"video/mp4\\" />\\n        </video>\\n      )}\\n\\n      <Title level={5}>Images</Title>\\n      <Space wrap>\\n        {record?.images ? (\\n          record.images.map((img) => (\\n            <ImageField\\n              key={img.name}\\n              value={img.url}\\n              title={img.name}\\n              width={200}\\n            />\\n          ))\\n        ) : (\\n          <Text>Not found any images</Text>\\n        )}\\n      </Space>\\n    </Show>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"show\\" />\\n</div>\\n<br />\\n\\nFinal version of our `<Resource>`.\\n\\n```tsx\\n    resources={[\\n        {\\n            name: \\"movies\\",\\n            list: AdminMovieList,\\n            create: AdminMovieCreate,\\n            show: AdminMovieShow,\\n            edit: AdminMovieEdit,\\n            options: {\\n                route: \\"admin/movies\\",\\n            },\\n        },\\n    ]}\\n```\\n\\n## Create list page for movies\\n\\nWe will create custom list and show pages for the unauthorized users because of that, we should add custom routes for these pages.\\n\\n*App.tsx*\\n\\n```tsx\\nimport { Refine, Resource } from \\"@pankod/refine\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\n\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport {\\n  AdminMovieList,\\n  AdminMovieCreate,\\n  AdminMovieShow,\\n  AdminMovieEdit,\\n} from \\"./pages/admin/movies\\";\\nimport { MoviesList, MovieShow } from \\"./pages/movies\\";\\nimport { Login } from \\"./pages/login\\";\\n\\nfunction App() {\\n  return (\\n   <Refine\\n        dataProvider={dataProvider(supabaseClient)}\\n        authProvider={authProvider}\\n        LoginPage={Login}\\n        routerProvider={{\\n            ...routerProvider,\\n\\n            routes: [\\n                {\\n                    exact: true,\\n                    component: MoviesList,\\n                    path: \\"/movies\\",\\n                },\\n                {\\n                    exact: true,\\n                    component: MovieShow,\\n                    path: \\"/:resource(movies)/:action(show)/:id\\",\\n                },\\n            ],\\n        }}\\n        resources={[\\n            {\\n                name: \\"movies\\",\\n                list: AdminMovieList,\\n                create: AdminMovieCreate,\\n                show: AdminMovieShow,\\n                edit: AdminMovieEdit,\\n\\n                options: {\\n                    route: \\"admin/movies\\",\\n                },\\n            },\\n        ]}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n### Movies list page\\n\\n```tsx\\nimport {\\n  IResourceComponentsProps,\\n  Card,\\n  Space,\\n  useList,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport { Layout } from \\"components\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nexport const MoviesList: React.FC<IResourceComponentsProps> = () => {\\n  const { Meta } = Card;\\n\\n  const { data, isLoading } = useList<IMovies>({\\n    resource: \\"movies\\",\\n    queryOptions: {\\n      staleTime: 0,\\n    },\\n  });\\n\\n  const { push } = useNavigation();\\n\\n  const renderMovies = () => {\\n    if (data) {\\n      return data.data.map((movie) => {\\n        return (\\n          <Card\\n            hoverable\\n            key={movie.name}\\n            style={{ width: 240, minHeight: 400 }}\\n            cover={\\n              movie.images?.length > 0 ? (\\n                <img alt={movie.images[0].name} src={movie.images[0].url} />\\n              ) : (\\n                <img\\n                  alt=\\"default\\"\\n                  src=\\"https://cdn.pixabay.com/photo/2019/04/24/21/55/cinema-4153289_960_720.jpg\\"\\n                />\\n              )\\n            }\\n            loading={isLoading}\\n            onClick={() => push(`/movies/show/${movie.id}`)}\\n          >\\n            <Meta title={movie.name} description={movie.description} />\\n          </Card>\\n        );\\n      });\\n    }\\n  };\\n\\n  return (\\n    <Layout>\\n      <Space align=\\"start\\">{renderMovies()}</Space>\\n    </Layout>\\n  );\\n};\\n\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={movies_all} alt=\\"movies_all\\" />\\n</div>\\n<br />\\n\\n\\n### Movies detail page\\n\\n```tsx\\nimport {\\n  useShow,\\n  Show,\\n  Typography,\\n  IResourceComponentsProps,\\n  Space,\\n  ImageField,\\n} from \\"@pankod/refine\\";\\nimport { Layout } from \\"components\\";\\n\\nimport { IMovies } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const MovieShow: React.FC<IResourceComponentsProps> = () => {\\n  const { queryResult } = useShow<IMovies>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const renderDetail = () => (\\n    <>\\n      <Title level={5}>Director</Title>\\n      <Text>{record?.director || \\"-\\"}</Text>\\n\\n      <Title level={5}>Stars</Title>\\n      <Text>{record?.stars || \\"-\\"}</Text>\\n      <Title level={5}>Trailer</Title>\\n      {record?.trailer && (\\n        <video width=\\"400\\" controls>\\n          <source src={record.trailer} type=\\"video/mp4\\" />\\n        </video>\\n      )}\\n      <Title level={5}>Images</Title>\\n      <Space wrap>\\n        {record?.images ? (\\n          record.images.map((img) => (\\n            <ImageField\\n              key={img.name}\\n              value={img.url}\\n              title={img.name}\\n              width={200}\\n            />\\n          ))\\n        ) : (\\n          <Text>Not found any images</Text>\\n        )}\\n      </Space>\\n    </>\\n  );\\n\\n  return (\\n    <Layout>\\n      <Show\\n        isLoading={isLoading}\\n        pageHeaderProps={{\\n          title: record?.name,\\n          subTitle: record?.premiere,\\n          extra: null,\\n        }}\\n      >\\n        {renderDetail()}\\n      </Show>\\n    </Layout>\\n  );\\n};\\n\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={detailed} alt=\\"detailed\\" />\\n</div>\\n<br />\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refineflix-6wyxo?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refineflix\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>\\n\\n[here is repo](https://github.com/pankod/refine/tree/master/examples/blog/refineflix)"}]}')}}]);