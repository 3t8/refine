"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[44480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),c=a,h=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={id:"remix",title:"Remix"},i=void 0,s={unversionedId:"guides-and-concepts/ssr/remix",id:"guides-and-concepts/ssr/remix",title:"Remix",description:"refine can be used with Remix to SSR your pages. It doesn't get in the way and follows Remix conventions and also provides helper modules when necessary.",source:"@site/docs/guides-and-concepts/ssr/remix.md",sourceDirName:"guides-and-concepts/ssr",slug:"/guides-and-concepts/ssr/remix",permalink:"/docs/guides-and-concepts/ssr/remix",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/guides-and-concepts/ssr/remix.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1660580649,formattedLastUpdatedAt:"8/15/2022",frontMatter:{id:"remix",title:"Remix"},sidebar:"someSidebar",previous:{title:"Table Search",permalink:"/docs/guides-and-concepts/search/table-search"},next:{title:"Next.js",permalink:"/docs/guides-and-concepts/ssr/nextjs"}},p={},l=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom Route",id:"custom-route",level:2},{value:"SSR",id:"ssr",level:3},{value:"Standard CRUD Page",id:"standard-crud-page",level:2},{value:"SSR",id:"ssr-1",level:3},{value:"Server Side Authentication",id:"server-side-authentication",level:2},{value:"<code>syncWithLocation</code> and Query Parameters in SSR",id:"syncwithlocation-and-query-parameters-in-ssr",level:2},{value:"Examples",id:"examples",level:2}],d={toc:l};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," can be used with ",(0,a.kt)("a",{parentName:"p",href:"https://remix.run/"},(0,a.kt)("strong",{parentName:"a"},"Remix"))," to SSR your pages. It doesn't get in the way and follows Remix conventions and also provides helper modules when necessary."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @pankod/refine-core @pankod/refine-remix-router @pankod/refine-simple-rest\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"We recommend ",(0,a.kt)("inlineCode",{parentName:"p"},"npx create-remix@latest")," to initialize your Remix projects. "))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," should be wrapped in your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Outlet>")," component located in ",(0,a.kt)("inlineCode",{parentName:"p"},"app/root.tsx"),". This way your ",(0,a.kt)("a",{parentName:"p",href:"https://remix.run/docs/en/v1/api/conventions#routes"},"routes")," are integrated to ",(0,a.kt)("strong",{parentName:"p"},"refine"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'import type { MetaFunction } from "@remix-run/node";\nimport {\n    Links,\n    LiveReload,\n    Meta,\n    Outlet,\n    Scripts,\n    ScrollRestoration,\n} from "@remix-run/react";\n// highlight-start\nimport { Refine } from "@pankod/refine-core";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-remix-router";\n// highlight-end\n\nexport const meta: MetaFunction = () => ({\n    charset: "utf-8",\n    title: "New Remix + Refine App",\n    viewport: "width=device-width,initial-scale=1",\n});\n\n// highlight-next-line\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <html lang="en">\n            <head>\n                <Meta />\n                <Links />\n            </head>\n            <body>\n                // highlight-start\n                <Refine\n                    dataProvider={dataProvider(API_URL)}\n                    routerProvider={routerProvider}\n                >\n                    <Outlet />\n                </Refine>\n                // highlight-end\n                <ScrollRestoration />\n                <Scripts />\n                <LiveReload />\n            </body>\n        </html>\n    );\n}\n')),(0,a.kt)("h2",{id:"custom-route"},"Custom Route"),(0,a.kt)("p",null,"Let's say we want to show a list of users in ",(0,a.kt)("inlineCode",{parentName:"p"},"/posts"),". After creating ",(0,a.kt)("inlineCode",{parentName:"p"},"posts.tsx")," under ",(0,a.kt)("inlineCode",{parentName:"p"},"routes")," in your Remix app, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook to list the users in a table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="routes/posts.tsx"',title:'"routes/posts.tsx"'},'import { LayoutWrapper, useTable } from "@pankod/refine-core";\n\nexport const PostList: React.FC = () => {\n    const { tableQueryResult } = useTable<IPost>({\n        resource: "posts"\n    });\n\n    return (\n        <LayoutWrapper>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableQueryResult.data?.data.map((post) => (\n                        <tr key={post.id}>\n                            <td>{post.id}</td>\n                            <td>{post.title}</td>\n                            <td>{post.status}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </LayoutWrapper>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: string;\n}\n\nexport default PostList;\n')),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Notice how we passed ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," prop to ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/hooks/useTable"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable")),". This is necessary since for ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," to be able to get ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," name from route, it needs to be a route parameter in a dynamic route. ",(0,a.kt)("a",{parentName:"p",href:"#standard-crud-page"},"Refer here")," where standard CRUD pages can be built with dynamic routing."))),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"We also used ",(0,a.kt)("inlineCode",{parentName:"p"},"<LayoutWrapper>")," to show the page in the layout provided to ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>")),". This is deliberately opt-in to provide flexibility. ",(0,a.kt)("a",{parentName:"p",href:"#standart-crud-page"},"If you're building a standard CRUD page layout can be baked in automatically"),"."))),(0,a.kt)("h3",{id:"ssr"},"SSR"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," uses ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"react-query")," in its hooks for data management. ",(0,a.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/guides/ssr#using-initialdata"},"Following react-query's guide"),", SSR can be achieved like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="routes/posts.tsx"',title:'"routes/posts.tsx"'},'// highlight-start\nimport { json, LoaderFunction } from "@remix-run/node";\nimport { useLoaderData } from "@remix-run/react";\n// highlight-end\n\nimport { LayoutWrapper, useTable } from "@pankod/refine-core";\n\n// highlight-next-line\nimport dataProvider from "@pankod/refine-simple-rest";\n\nexport const PostList: React.FC = () => {\n    // highlight-next-line\n    const { initialData } = useLoaderData();\n\n    const { tableQueryResult } = useTable<IPost>({\n        resource: "posts",\n        // highlight-start\n        queryOptions: {\n            initialData,\n        },\n        // highlight-end\n    });\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Title</th>\n                    <th>Status</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableQueryResult.data?.data.map((post) => (\n                    <tr key={post.id}>\n                        <td>{post.id}</td>\n                        <td>{post.title}</td>\n                        <td>{post.status}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\n// highlight-start\nexport const loader: LoaderFunction = async ({ params, request, context }) => {\n    const API_URL = "https://api.fake-rest.refine.dev";\n\n    try {\n        const data = await dataProvider(API_URL).getList({\n            resource: "posts",\n        });\n\n        return json({ initialData: data });\n    } catch (error) {\n        return json({});\n    }\n};\n// highlight-end\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: string;\n}\n\nexport default PostList;\n')),(0,a.kt)("p",null,"We use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/providers/data-provider#getlist"},(0,a.kt)("inlineCode",{parentName:"a"},"getList"))," method from our ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/providers/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))," to fetch ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," data and pass through ",(0,a.kt)("inlineCode",{parentName:"p"},"props")," as conventionally done in Remix. Then ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," data is available in the props of our ",(0,a.kt)("inlineCode",{parentName:"p"},"/posts")," page. ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/hooks/useTable"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," can take options for underlying react-query queries with ",(0,a.kt)("inlineCode",{parentName:"p"},"queryOptions"),". Passing ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," data to its ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," loads the data on server side."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"We used ",(0,a.kt)("inlineCode",{parentName:"p"},"getList")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," but data can be fetched in any way you desire."))),(0,a.kt)("h2",{id:"standard-crud-page"},"Standard CRUD Page"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"@pankod/refine-remix-router")," package provides ",(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," for pages with the dynamic route ",(0,a.kt)("inlineCode",{parentName:"p"},"/[resource]/[action]/[id]")," and root ",(0,a.kt)("inlineCode",{parentName:"p"},"/"),". Simply export the component from the page and add a ","[loader function][loader]"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="routes/index.tsx"',title:'"routes/index.tsx"'},'export { RemixRouteComponent as default } from "@pankod/refine-remix-router";\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," can be used in the following pages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"routes/$resource/index.tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"routes/$resource/$action/index.tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"routes/$resource/$action/$id/index.tsx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"routes/index.tsx"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," will use route parameters ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," and render the associated component defined in ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"resources")),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," component will be rendered for ",(0,a.kt)("inlineCode",{parentName:"li"},"/$resource")," route"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"edit")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"show")," will be rendered for ",(0,a.kt)("inlineCode",{parentName:"li"},"/$resource/$action")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/$resource/$action/$id")," routes"),(0,a.kt)("li",{parentName:"ul"},"For the root ",(0,a.kt)("inlineCode",{parentName:"li"},"/")," route, it will render ",(0,a.kt)("inlineCode",{parentName:"li"},"DashboardPage")," if it's defined and if not will navigate to the first resource in ",(0,a.kt)("inlineCode",{parentName:"li"},"resources"),".")),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," will wrap the page with ",(0,a.kt)("inlineCode",{parentName:"p"},"Layout")," provided to ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/components/refine-config"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>"))))),(0,a.kt)("h3",{id:"ssr-1"},"SSR"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," accepts a ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," prop for SSR data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type RemixRouteComponentProps = {\n    initialData?: any;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," must be passed as props from ",(0,a.kt)("inlineCode",{parentName:"p"},"loader"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"RemixRouteComponent")," will pass this data as ",(0,a.kt)("inlineCode",{parentName:"p"},"initialData")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," components."),(0,a.kt)("p",null,"For example, for a ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," component that will be rendered for ",(0,a.kt)("inlineCode",{parentName:"p"},"/$resource/index.tsx"),", the page can use SSR like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/$resource/index.tsx"',title:'"pages/$resource/index.tsx"'},'import { json, LoaderFunction } from "@remix-run/node";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nexport { RemixRouteComponent as default } from "@pankod/refine-remix-router";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nexport const loader: LoaderFunction = async ({ params, request }) => {\n    const { resource } = params;\n\n    try {\n        const data = await dataProvider(API_URL).getList({\n            resource: resource as string,\n        });\n\n        return json({ initialData: data });\n    } catch (error) {\n        return json({});\n    }\n};\n')),(0,a.kt)("p",null,"And in the ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," component for a ",(0,a.kt)("inlineCode",{parentName:"p"},"resource"),' e.g. "posts":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/pages/posts/list.tsx"',title:'"app/pages/posts/list.tsx"'},'// highlight-next-line\nimport { useLoaderData } from "@remix-run/react";\nimport { useTable, GetListResponse, IResourceComponentsProps } from "@pankod/refine-core";\n\nexport const PostList: React.FC<\n    IResourceComponentsProps<GetListResponse<IPost>>\n> = () => {\n    // highlight-next-line\n    const { initialData } = useLoaderData();\n\n    const { tableQueryResult } = useTable<IPost>({\n        // highlight-start\n        queryOptions: {\n            initialData,\n        },\n        // highlight-end\n    });\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Title</th>\n                    <th>Status</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableQueryResult?.data?.data.map((post) => (\n                    <tr key={post.id}>\n                        <td>{post.id}</td>\n                        <td>{post.title}</td>\n                        <td>{post.status}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: string;\n}\n')),(0,a.kt)("p",null,"Finally, let's give our ",(0,a.kt)("inlineCode",{parentName:"p"},"PostList")," page as a ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'import type { MetaFunction } from "@remix-run/node";\nimport {\n    Links,\n    LiveReload,\n    Meta,\n    Outlet,\n    Scripts,\n    ScrollRestoration,\n} from "@remix-run/react";\nimport { Refine } from "@pankod/refine-core";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-remix-router";\n\nimport { PostList } from "./pages/posts/list";\n\nexport const meta: MetaFunction = () => ({\n    charset: "utf-8",\n    title: "New Remix + Refine App",\n    viewport: "width=device-width,initial-scale=1",\n});\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <html lang="en">\n            <head>\n                <Meta />\n                <Links />\n            </head>\n            <body>\n                <Refine\n                    dataProvider={dataProvider(API_URL)}\n                    routerProvider={routerProvider}\n                    resources={[{\n                      name: "posts",\n                      list: PostList\n                    }]}\n                >\n                    <Outlet />\n                </Refine>\n                <ScrollRestoration />\n                <Scripts />\n                <LiveReload />\n            </body>\n        </html>\n    );\n}\n')),(0,a.kt)("h2",{id:"server-side-authentication"},"Server Side Authentication"),(0,a.kt)("p",null,"For Server Side Authentication, the ",(0,a.kt)("inlineCode",{parentName:"p"},"createCookieSessionStorage")," module in Remix's ",(0,a.kt)("inlineCode",{parentName:"p"},"@remix-run/node")," package can be used. For detailed information, you can check Remix's ",(0,a.kt)("a",{parentName:"p",href:"https://remix.run/docs/en/v1/tutorials/jokes#authentication"},(0,a.kt)("inlineCode",{parentName:"a"},"Jokes App"))," tutorial."),(0,a.kt)("p",null,"First, let's create our ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthProvider"),". For more information on ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthProvider"),", visit our ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider"},"AuthProvider documentation"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/authProvider.ts"',title:'"app/authProvider.ts"'},'import { AuthProvider } from "@pankod/refine-core";\n\nconst mockUsers = [\n    {\n        username: "admin",\n        roles: ["admin"],\n    },\n    {\n        username: "editor",\n        roles: ["editor"],\n    },\n];\n\nexport const authProvider: AuthProvider = {\n    login: ({ username, password, remember }) => {\n        // Suppose we actually send a request to the back end here.\n        const user = mockUsers.find((item) => item.username === username);\n\n        if (user) {\n            return Promise.resolve(user);\n        }\n\n        return Promise.reject();\n    },\n    logout: () => {\n        return Promise.resolve("/logout");\n    },\n    checkError: (error) => {\n        if (error && error.statusCode === 401) {\n            return Promise.reject();\n        }\n\n        return Promise.resolve();\n    },\n    checkAuth: async ({ request, storage }) => {\n        const session = await storage.getSession(request.headers.get("Cookie"));\n\n        const user = session.get("user");\n\n        if (!user) {\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    getPermissions: async () => {\n        return Promise.resolve();\n    },\n    getUserIdentity: async () => {\n        return Promise.resolve();\n    },\n};\n')),(0,a.kt)("p",null,"Next, let's create the ",(0,a.kt)("inlineCode",{parentName:"p"},"app/session.server.ts")," file as mentioned in the ",(0,a.kt)("a",{parentName:"p",href:"https://remix.run/docs/en/v1/tutorials/jokes#authentication"},(0,a.kt)("inlineCode",{parentName:"a"},"Jokes App"))," tutorial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/session.server.ts"',title:'"app/session.server.ts"'},'import { createCookieSessionStorage, redirect } from "@remix-run/node";\nimport { authProvider } from "./authProvider";\n\ntype LoginForm = {\n    username: string;\n    password: string;\n};\n\n// normally you want this to be env variable\nconst sessionSecret = "SUPER_SECRET_SESSION"; //process.env.SESSION_SECRET;\nif (!sessionSecret) {\n    throw new Error("SESSION_SECRET must be set");\n}\n\nconst storage = createCookieSessionStorage({\n    cookie: {\n        name: "RJ_session",\n        // normally you want this to be `secure: true`\n        // but that doesn\'t work on localhost for Safari\n        // https://web.dev/when-to-use-local-https/\n        secure: process.env.NODE_ENV === "production",\n        secrets: [sessionSecret],\n        sameSite: "lax",\n        path: "/",\n        maxAge: 60 * 60 * 24 * 30,\n        httpOnly: true,\n    },\n});\n\nexport async function login({ username, password }: LoginForm) {\n    try {\n        const user = await authProvider.login({ username, password });\n        if (user) {\n            return { user };\n        }\n    } catch (error) {\n        return error;\n    }\n}\n\nexport async function requireUserId(\n    request: Request,\n    redirectTo: string = new URL(request.url).pathname,\n) {\n    try {\n        const user = await authProvider.checkAuth?.({ request, storage });\n        return user;\n    } catch (error) {\n        const searchParams = new URLSearchParams([["to", redirectTo]]);\n        throw redirect(`/login?${searchParams}`);\n    }\n}\n\nexport async function createUserSession(user: object, redirectTo: string) {\n    const session = await storage.getSession();\n    session.set("user", { ...user });\n    return redirect(redirectTo, {\n        headers: {\n            "Set-Cookie": await storage.commitSession(session),\n        },\n    });\n}\n\nexport async function logout(request: Request) {\n    const session = await storage.getSession(request.headers.get("Cookie"));\n    return redirect("/login", {\n        headers: {\n            "Set-Cookie": await storage.destroySession(session),\n        },\n    });\n}\n')),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"login")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"requireUserId")," functions, we call the corresponding functions of our ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthProvider"),"."),(0,a.kt)("p",null,"Now let's create our login page"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/routes/login.tsx"',title:'"app/routes/login.tsx"'},'import React from "react";\nimport { useTranslate } from "@pankod/refine-core";\n\nimport { login, createUserSession } from "~/session.server";\nimport { ActionFunction } from "@remix-run/node";\nimport { useSearchParams } from "@remix-run/react";\n\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\nconst LoginPage: React.FC = () => {\n    const translate = useTranslate();\n    const [searchParams] = useSearchParams();\n\n    return (\n        <>\n            <h1>{translate("pages.login.title", "Sign in your account")}</h1>\n            <form method="post">\n                <input\n                    type="hidden"\n                    name="redirectTo"\n                    value={searchParams.get("to") ?? undefined}\n                />\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    "pages.login.username",\n                                    undefined,\n                                    "username",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    name="username"\n                                    type="text"\n                                    size={20}\n                                    autoCorrect="off"\n                                    spellCheck={false}\n                                    autoCapitalize="off"\n                                    autoFocus\n                                    required\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    "pages.login.password",\n                                    undefined,\n                                    "password",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type="password"\n                                    name="password"\n                                    required\n                                    size={20}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type="submit" value="login" />\n            </form>\n        </>\n    );\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n    const form = await request.formData();\n    const username = form.get("username") as string;\n    const password = form.get("password") as string;\n    const redirectTo = form.get("redirectTo") || "/";\n    // highlight-start\n    const user = await login({ username, password });\n    if (!user) {\n        return null;\n    }\n\n    return createUserSession(user as any, redirectTo as string);\n    // highlight-end\n};\n\nexport default LoginPage;\n')),(0,a.kt)("p",null,"Yeeyy! Now our users can login!"),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Remember, actions and loaders run on the server, so console.log calls you put in those you can't see in the browser console. Those will show up in the terminal window you're running your server in."))),(0,a.kt)("p",null,"We can call the ",(0,a.kt)("inlineCode",{parentName:"p"},"requireUserId")," function on our routes where we want the authentication check done."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { json, LoaderFunction } from "@remix-run/node";\n//highlight-next-line\nimport { requireUserId } from "~/session.server";\n\nexport const loader: LoaderFunction = async ({ params, request, context }) => {\n    //highlight-next-line\n    await requireUserId(request);\n\n    return json({});\n}\n\n')),(0,a.kt)("p",null,"Finally, let's make sure our users can log out. For this, we create a routes for ",(0,a.kt)("inlineCode",{parentName:"p"},"/logout"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/app/routes/logout.tsx"',title:'"/app/routes/logout.tsx"'},'import type { LoaderFunction } from "@remix-run/node";\n\nimport { logout } from "~/session.server";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    return await logout(request);\n};\n')),(0,a.kt)("h2",{id:"syncwithlocation-and-query-parameters-in-ssr"},(0,a.kt)("inlineCode",{parentName:"h2"},"syncWithLocation")," and Query Parameters in SSR"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is enabled, query parameters must be handled while doing SSR."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/routes/$resource/index.tsx"',title:'"app/routes/$resource/index.tsx"'},'import { json, LoaderFunction } from "@remix-run/node";\nimport dataProvider from "@pankod/refine-simple-rest";\n// highligt-next-line\nimport { parseTableParams } from "@pankod/refine-core";\n\nexport { RemixRouteComponent as default } from "@pankod/refine-remix-router";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nexport const loader: LoaderFunction = async ({ params, request }) => {\n    const { resource } = params;\n    const url = new URL(request.url);\n\n    // highligt-next-line\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(url.search);\n\n    try {\n        const data = await dataProvider(API_URL).getList({\n            resource: resource as string,\n            filters: parsedFilters,\n            pagination: {\n                current: parsedCurrent || 1,\n                pageSize: parsedPageSize || 10,\n            },\n            sort: parsedSorter,\n        });\n\n        return json({ initialData: data });\n    } catch (error) {\n        return json({});\n    }\n};\n\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"parseTableParams")," parses the query string and returns query parameters(",(0,a.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences/#crudfilters"},"refer here for their interfaces"),"). They can be directly used for ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," methods that accepts them."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://ant.design/"},"Ant Design")," CRUD app example (",(0,a.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/next/examples/remix/antd"},"source code"),")"),(0,a.kt)("li",{parentName:"ul"},"Headless CRUD app example (",(0,a.kt)("a",{parentName:"li",href:"https://github.com/pankod/refine/tree/next/examples/remix/headless"},"source code"),")")))}m.isMDXComponent=!0}}]);