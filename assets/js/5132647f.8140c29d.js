"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[69159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=d(t),c=o,h=g["".concat(l,".").concat(c)]||g[c]||p[c]||i;return t?r.createElement(h,a(a({ref:n},u),{},{components:t})):r.createElement(h,a({ref:n},u))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},49846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));const i={id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password."},a=void 0,s={unversionedId:"api-reference/core/components/auth-page",id:"api-reference/core/components/auth-page",title:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password.",source:"@site/docs/api-reference/core/components/auth-page.md",sourceDirName:"api-reference/core/components",slug:"/api-reference/core/components/auth-page",permalink:"/docs/api-reference/core/components/auth-page",draft:!1,editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/api-reference/core/components/auth-page.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1663689776,formattedLastUpdatedAt:"Sep 20, 2022",frontMatter:{id:"auth-page",title:"<AuthPage>",sidebar_label:"<AuthPage>",description:"<AuthPage> component from refine is a authentication page that can be used to login, register, reset password and update password."},sidebar:"someSidebar",previous:{title:"useMenu",permalink:"/docs/api-reference/core/hooks/ui/useMenu"},next:{title:"<Refine>",permalink:"/docs/api-reference/core/components/refine-config"}},l={},d=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"Login",id:"login",level:2},{value:"<code>registerLink</code>",id:"registerlink",level:3},{value:"<code>forgotPasswordLink</code>",id:"forgotpasswordlink",level:3},{value:"<code>backLink</code>",id:"backlink",level:3},{value:"<code>submitButton</code>",id:"submitbutton",level:3},{value:"<code>providers</code>",id:"providers",level:3},{value:"Register",id:"register",level:2},{value:"<code>loginLink</code>",id:"loginlink",level:3},{value:"<code>backLink</code>",id:"backlink-1",level:3},{value:"<code>submitButton</code>",id:"submitbutton-1",level:3},{value:"Reset Password",id:"reset-password",level:2},{value:"<code>backLink</code>",id:"backlink-2",level:3},{value:"<code>submitButton</code>",id:"submitbutton-2",level:3},{value:"Update Password",id:"update-password",level:2},{value:"<code>backLink</code>",id:"backlink-3",level:3},{value:"<code>submitButton</code>",id:"submitbutton-3",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Interface",id:"interface",level:3}],u={toc:d};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component from ",(0,o.kt)("strong",{parentName:"p"},"refine")," contains authentication pages that can be used to login, register, reset password and update password."),(0,o.kt)("p",null,"Before using ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component you need to add ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component can be used like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode previewHeight=333px url=http://localhost:3000/login",live:!0,disableScroll:!0,hideCode:!0,previewHeight:"333px",url:"http://localhost:3000/login"},'const { AuthPage, Refine, useNavigation } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\n\nimport { authProvider } from "./authProvider";\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={AuthPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [{ path: "/login", element: <AuthPage type="login" /> }],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component has the following types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"login"')," - a type of the login page and default type."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"register"')," - type of the registration page."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"forgotPassword"')," - type of the reset password page."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"updatePassword"')," - type of the update password page.")),(0,o.kt)("h2",{id:"login"},"Login"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"login"'),":"),(0,o.kt)("h3",{id:"registerlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"registerLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"registerLink")," property defines the link to the registration page and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=390px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"390px"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="login"\n            registerLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/register">Don\'t have an account? Register</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst RegisterPage = () =>\n    Wrapper(<AuthPage type="register" loginLink="/login" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [{ path: "/register", element: <RegisterPage /> }],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/register", element: <RegisterPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"forgotpasswordlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"forgotPasswordLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"forgotPasswordLink")," property defines the link to the reset password page and also you can a give node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\nimport { Wrapper } from "./Wrapper";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="login"\n            forgotPasswordLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/reset-password">Forgot your password?</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst RegisterPage = () =>\n    Wrapper(<AuthPage type="register" loginLink="/login" />);\nconst ForgotPasswordPage = () =>\n    Wrapper(<AuthPage type="forgotPassword" backLink="/login" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/register", element: <RegisterPage /> },\n                    { path: "/reset-password", element: <ForgotPasswordPage /> },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/register", element: <RegisterPage /> },\n                { path: "/reset-password", element: <ForgotPasswordPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"backlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\n\nconst LoginPage = () => {\n    const { Link } = useRouterContext();\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                <AuthPage\n                    type="login"\n                    backLink={\n                        <div\n                            style={{\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <Link to="/home">Go Home</Link>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\nconst HomePage = () => {\n    const { replace } = useNavigation();\n\n    return (\n        <div>\n            Home\n            <button\n                onClick={() => {\n                    replace("/login");\n                }}\n            >\n                Login\n            </button>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [{ path: "/home", element: <HomePage /> }],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/home", element: <HomePage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"submitbutton"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=350px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"350px"},'const { AuthPage, Refine, useNavigation, useLogin } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n// visible-block-start\nimport { Refine, AuthPage, useLogin } from "@pankod/refine-core";\nimport { authProvider } from "./authProvider";\n\nconst LoginPage = () => {\n    const { mutate: login } = useLogin();\n\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                <AuthPage\n                    type="login"\n                    submitButton={\n                        <div\n                            style={{\n                                display: "flex",\n                                justifyContent: "center",\n                                padding: 5,\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <button\n                                type="submit"\n                                style={{\n                                    display: "flex",\n                                    flex: 1,\n                                    justifyContent: "center",\n                                }}\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    // you can access login form data from `event.target`\n                                    console.log("email", event.target.form);\n                                    // run your custom login logic\n                                    login();\n                                }}\n                            >\n                                Login\n                            </button>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [{ path: "/login", element: <LoginPage /> }],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"providers"},(0,o.kt)("inlineCode",{parentName:"h3"},"providers")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"providers")," property defines the list of providers used to handle social login authentication."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/login previewHeight=455px",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/login",previewHeight:"455px"},'const { AuthPage, Refine, useNavigation } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n// visible-block-start\nimport { Refine, AuthPage, useLogin } from "@pankod/refine-core";\nimport { authProvider } from "./authProvider";\n\nconst LoginPage = () => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                    position: "relative",\n                    zIndex: 1,\n                }}\n            >\n                <div\n                    style={{\n                        position: "absolute",\n                        display: "flex",\n                        justifyContent: "center",\n                        border: "1px dashed cornflowerblue",\n                        width: "220px",\n                        height: "115px",\n                        top: 40,\n                        left: 90,\n                        zIndex: -1,\n                    }}\n                />\n                <AuthPage\n                    type="login"\n                    providers={[\n                        {\n                            name: "github",\n                            icon: (\n                                <svg\n                                    height="32"\n                                    aria-hidden="true"\n                                    viewBox="0 0 16 16"\n                                    version="1.1"\n                                    width="32"\n                                    data-view-component="true"\n                                    class="octicon octicon-mark-github v-align-middle"\n                                >\n                                    <path\n                                        fill-rule="evenodd"\n                                        d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"\n                                    ></path>\n                                </svg>\n                            ),\n                            label: "Sign in with GitHub",\n                        },\n                        {\n                            name: "google",\n                            icon: (\n                                <svg\n                                    xmlns="http://www.w3.org/2000/svg"\n                                    viewBox="0 0 24 24"\n                                    width="24"\n                                    height="24"\n                                >\n                                    <g transform="matrix(1, 0, 0, 1, 27.009001, -39.238998)">\n                                        <path\n                                            fill="#4285F4"\n                                            d="M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z"\n                                        />\n                                        <path\n                                            fill="#34A853"\n                                            d="M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z"\n                                        />\n                                        <path\n                                            fill="#FBBC05"\n                                            d="M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z"\n                                        />\n                                        <path\n                                            fill="#EA4335"\n                                            d="M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z"\n                                        />\n                                    </g>\n                                </svg>\n                            ),\n                            label: "Sign in with Google",\n                        },\n                    ]}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/login"]),\n            routes: [{ path: "/login", element: <LoginPage /> }],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you want to use providers then you need to handle your provider name to use social authentication in the",(0,o.kt)("inlineCode",{parentName:"p"},"login")," method from ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider"},"authProvider")," that will be used to handle authentication.\n",(0,o.kt)("inlineCode",{parentName:"p"},"providerName")," is the name of the selected provider from your list of providers."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const authProvider: AuthProvider = {\n    ...\n    login: ({ providerName }) => {\n        if (providerName === "github") {\n            window.location.href = "https://example.com/auth/github"; // your github auth url \n            return Promise.resolve(false);\n        }\n    }\n}\n'))),(0,o.kt)("h2",{id:"register"},"Register"),(0,o.kt)("p",null,"You can use following props for ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"register"'),":"),(0,o.kt)("h3",{id:"loginlink"},(0,o.kt)("inlineCode",{parentName:"h3"},"loginLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"loginLink")," property defines the link to the login page and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst RegisterPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="register"\n            loginLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Have an account? Login</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [{ path: "/register", element: <RegisterPage /> }],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/register"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/register", element: <RegisterPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"backlink-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst RegisterPage = () => {\n    const { Link } = useRouterContext();\n    return Wrapper(\n        <AuthPage\n            type="register"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [{ path: "/register", element: <RegisterPage /> }],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/register"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/register", element: <RegisterPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Login Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"submitbutton-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/register",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/register"},'const { AuthPage, Refine, useNavigation, useRegister } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\n// visible-block-start\nimport { Refine, AuthPage, useRegister } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst RegisterPage = () => {\n    const { mutate: register } = useRegister();\n\n    return Wrapper(\n        <AuthPage\n            type="register"\n            backLink="/login"\n            submitButton={\n                <div\n                    style={{\n                        display: "flex",\n                        justifyContent: "center",\n                        padding: 5,\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <button\n                        type="submit"\n                        style={{\n                            display: "flex",\n                            flex: 1,\n                            justifyContent: "center",\n                        }}\n                        onClick={(event) => {\n                            event.preventDefault();\n                            // you can access register form data from `event.target`\n                            console.log(event.target.form);\n                            // run your custom register logic(validation, etc.)\n                            register();\n                        }}\n                    >\n                        Register\n                    </button>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" registerLink="/register" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-next-line\n                routes: [{ path: "/register", element: <RegisterPage /> }],\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/register"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/register", element: <RegisterPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Register Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h2",{id:"reset-password"},"Reset Password"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"forgotPassword"'),":"),(0,o.kt)("h3",{id:"backlink-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/reset-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/reset-password"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "375px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst ForgotPasswordPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="forgotPassword"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" forgotPasswordLink="/reset-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/reset-password", element: <ForgotPasswordPage /> },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/reset-password"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/reset-password", element: <ForgotPasswordPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        DashboardPage={() => {\n            const { replace } = useNavigation();\n\n            return (\n                <div>\n                    Reset Password Succesful\n                    <button\n                        onClick={() => {\n                            replace("/login");\n                        }}\n                    >\n                        Logout\n                    </button>\n                </div>\n            );\n        }}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"submitbutton-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/reset-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/reset-password"},'const { AuthPage, Refine, useNavigation, useForgotPassword } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n// visible-block-start\nimport { Refine, AuthPage, useForgotPassword } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { authProvider } from "./authProvider";\n\nconst ForgotPasswordPage = () => {\n    const { mutate: forgotPassword } = useForgotPassword();\n    const { replace } = useNavigation();\n\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "375px",\n                }}\n            >\n                <AuthPage\n                    type="forgotPassword"\n                    backLink="/login"\n                    submitButton={\n                        <div\n                            style={{\n                                display: "flex",\n                                justifyContent: "center",\n                                padding: 5,\n                                border: "1px dashed cornflowerblue",\n                                marginTop: 5,\n                            }}\n                        >\n                            <button\n                                type="submit"\n                                style={{\n                                    display: "flex",\n                                    flex: 1,\n                                    justifyContent: "center",\n                                }}\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    // you can access reset password form data from `event.target`\n                                    console.log(event.target.form);\n                                    // run your custom reset password logic(validation, etc.)\n                                    forgotPassword();\n                                    replace("/login");\n                                }}\n                            >\n                                Reset Password\n                            </button>\n                        </div>\n                    }\n                />\n            </div>\n        </div>\n    );\n};\nconst LoginPage = () => (\n    <AuthPage type="login" forgotPasswordLink="/reset-password" />\n);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    { path: "/reset-password", element: <ForgotPasswordPage /> },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/reset-password"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/reset-password", element: <ForgotPasswordPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h2",{id:"update-password"},"Update Password"),(0,o.kt)("p",null,"You can use the following props for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,o.kt)("inlineCode",{parentName:"p"},'"updatePassword"'),":"),(0,o.kt)("h3",{id:"backlink-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"backLink")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backLink")," property defines the render ReactNode that will be used as a back link and also you can give a node to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/update-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/update-password"},'const { AuthPage, Refine, useNavigation, useRouterContext } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\n\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n// visible-block-start\nimport { Refine, AuthPage } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst UpdatePasswordPage = () => {\n    const { Link } = useRouterContext();\n\n    return Wrapper(\n        <AuthPage\n            type="updatePassword"\n            backLink={\n                <div\n                    style={{\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <Link to="/login">Go Back</Link>\n                </div>\n            }\n        />,\n    );\n};\n\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" backLink="/update-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    {\n                        path: "/update-password",\n                        element: <UpdatePasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/update-password"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/update-password", element: <UpdatePasswordPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"submitbutton-3"},(0,o.kt)("inlineCode",{parentName:"h3"},"submitButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"submitButton")," render your custom ReactNode to submit the form. Also, you can reach form values with the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," property and use your own logic to submit the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll hideCode url=http://localhost:3000/reset-password",live:!0,disableScroll:!0,hideCode:!0,url:"http://localhost:3000/reset-password"},'const { AuthPage, Refine, useNavigation, useUpdatePassword } = RefineCore;\nconst authProvider = {\n    login: () => Promise.resolve(),\n    register: () => Promise.resolve(),\n    forgotPassword: () => Promise.resolve(),\n    updatePassword: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve(),\n    getUserIdentity: () => Promise.resolve(),\n};\nconst Wrapper = (children) => {\n    return (\n        <div\n            style={{\n                display: "flex",\n                justifyContent: "center",\n            }}\n        >\n            <div\n                style={{\n                    width: "400px",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n// visible-block-start\nimport { Refine, AuthPage, useUpdatePassword } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nimport { Wrapper } from "./Wrapper";\nimport { authProvider } from "./authProvider";\n\nconst UpdatePasswordPage = () => {\n    const { mutate: updatePassword } = useUpdatePassword();\n\n    return Wrapper(\n        <AuthPage\n            type="updatePassword"\n            backLink="/login"\n            submitButton={\n                <div\n                    style={{\n                        display: "flex",\n                        justifyContent: "center",\n                        padding: 5,\n                        border: "1px dashed cornflowerblue",\n                        marginTop: 5,\n                    }}\n                >\n                    <button\n                        type="submit"\n                        style={{\n                            display: "flex",\n                            flex: 1,\n                            justifyContent: "center",\n                        }}\n                        onClick={(event) => {\n                            event.preventDefault();\n                            // you can access update password form data from `event.target`\n                            console.log(event.target.form);\n                            // run your custom update password logic(validation, etc.)\n                            updatePassword();\n                        }}\n                    >\n                        Update Password\n                    </button>\n                </div>\n            }\n        />,\n    );\n};\nconst LoginPage = () =>\n    Wrapper(<AuthPage type="login" backLink="/update-password" />);\n\nconst App = () => {\n    return (\n        <Refine\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    {\n                        path: "/update-password",\n                        element: <UpdatePasswordPage />,\n                    },\n                ],\n                // highlight-end\n            }}\n            // highlight-next-line\n            LoginPage={LoginPage}\n        />\n    );\n};\n// visible-block-end\nrender(\n    <Refine\n        routerProvider={{\n            ...RefineDemoReactRouterV6(["/update-password"]),\n            routes: [\n                { path: "/login", element: <LoginPage /> },\n                { path: "/update-password", element: <UpdatePasswordPage /> },\n            ],\n        }}\n        LoginPage={AuthPage}\n        authProvider={authProvider}\n        resources={[\n            {\n                name: "posts",\n                list: () => <div>List</div>,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"type"),(0,o.kt)("td",{parentName:"tr",align:null},"Render ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>")," forms by ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," property."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"login")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"register")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"forgotPassword")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"updatePassword"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"registerLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a register link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loginLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"forgotPasswordLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a reset password link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"updatePasswordLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be rendered as a update password link to the ",(0,o.kt)("inlineCode",{parentName:"td"},"<AuthPage>"),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"submitButton"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be used to submit form."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"backLink"),(0,o.kt)("td",{parentName:"tr",align:null},"Custom node that will be displayed as a back link."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"React.ReactNode"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"providers"),(0,o.kt)("td",{parentName:"tr",align:null},"Render social logins if ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,o.kt)("inlineCode",{parentName:"td"},'"login"'),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#interface"},(0,o.kt)("inlineCode",{parentName:"a"},"IProvider[]")))))),(0,o.kt)("h3",{id:"interface"},"Interface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface IProvider {\n    name: string;\n    icon?: React.ReactNode;\n    label?: string;\n}\n")))}p.isMDXComponent=!0}}]);