"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[77968],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71100:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return m}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),l=n.p+"assets/images/basic-usage-427e332ad44ad89f8d7f60a2bd70d357.png",i=n.p+"assets/images/search-30cfc6b2ceadc67f453c4fa72c4894fb.png",s=["components"],p={id:"useAutocomplete",title:"useAutocomplete"},d=void 0,u={unversionedId:"ui-frameworks/mui/hooks/useAutocomplete",id:"ui-frameworks/mui/hooks/useAutocomplete",isDocsHomePage:!1,title:"useAutocomplete",description:"The useAutocomplete hook is used to get data from the API and to manage the Material UI `` component.",source:"@site/docs/ui-frameworks/mui/hooks/useAutocomplete.md",sourceDirName:"ui-frameworks/mui/hooks",slug:"/ui-frameworks/mui/hooks/useAutocomplete",permalink:"/docs/ui-frameworks/mui/hooks/useAutocomplete",editUrl:"https://github.com/pankod/refine/tree/master/documentation/docs/ui-frameworks/mui/hooks/useAutocomplete.md",tags:[],version:"current",lastUpdatedBy:"Salih \xd6zdemir",lastUpdatedAt:1654779174,formattedLastUpdatedAt:"6/9/2022",frontMatter:{id:"useAutocomplete",title:"useAutocomplete"},sidebar:"someSidebar",previous:{title:"Custom Inputs",permalink:"/docs/ui-frameworks/antd/components/inputs/custom-inputs"},next:{title:"useDataGrid",permalink:"/docs/ui-frameworks/mui/hooks/useDataGrid"}},m=[{value:"Usage with React Hook Form (<code>@pankod/refine-react-hook-form</code>)",id:"usage-with-react-hook-form-pankodrefine-react-hook-form",children:[],level:2},{value:"Options",id:"options",children:[{value:"<code>resource</code>",id:"resource",children:[],level:3},{value:"<code>defaultValue</code>",id:"defaultvalue",children:[],level:3},{value:"<code>filters</code>",id:"filters",children:[],level:3},{value:"<code>sort</code>",id:"sort",children:[],level:3},{value:"<code>fetchSize</code>",id:"fetchsize",children:[],level:3},{value:"<code>onSearch</code>",id:"onsearch",children:[],level:3},{value:"<code>queryOptions</code>",id:"queryoptions",children:[],level:3},{value:"<code>defaultValueQueryOptions</code>",id:"defaultvaluequeryoptions",children:[],level:3}],level:2},{value:"API Reference",id:"api-reference",children:[{value:"Properties",id:"properties",children:[],level:3},{value:"Return values",id:"return-values",children:[],level:3}],level:2},{value:"Live Codesandbox Example",id:"live-codesandbox-example",children:[],level:2}],c={toc:m};function k(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook is used to get data from the API and to manage the Material UI ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Autocomplete>"))," component."),(0,o.kt)("h2",{id:"usage-with-react-hook-form-pankodrefine-react-hook-form"},"Usage with React Hook Form (",(0,o.kt)("inlineCode",{parentName:"h2"},"@pankod/refine-react-hook-form"),")"),(0,o.kt)("p",null,"We'll demonstrate how to get data at ",(0,o.kt)("inlineCode",{parentName:"p"},"/categories")," endpoint from ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api.fake-rest.refine.dev")," REST API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="https://api.fake-rest.refine.dev/categories"',title:'"https://api.fake-rest.refine.dev/categories"'},'{\n    [\n        {\n            id: 1,\n            title: "E-business",\n        },\n        {\n            id: 2,\n            title: "Virtual Invoice Avon",\n        },\n        {\n            id: 3,\n            title: "Unbranded",\n        },\n    ]\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import {\n    Create,\n    Box,\n    //highlight-start\n    Autocomplete,\n    useAutocomplete,\n    //highlight-end\n    TextField,\n} from "@pankod/refine-mui";\nimport { useForm, Controller } from "@pankod/refine-react-hook-form";\n\nexport const PostCreate = () => {\n    const {\n        saveButtonProps,\n        refineCore: { formLoading, queryResult },\n        register,\n        control,\n        formState: { errors },\n    } = useForm();\n\n    // highlight-start\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n    });\n    // highlight-end\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <Box component="form">\n                <Controller\n                    control={control}\n                    name="category"\n                    rules={{ required: "This field is required" }}\n                    render={({ field }) => (\n                        <Autocomplete\n                            //highlight-next-line\n                            {...autocompleteProps}\n                            {...field}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            getOptionLabel={(item) => {\n                                return (\n                                    autocompleteProps?.options?.find(\n                                        (p) =>\n                                            p?.id?.toString() ===\n                                            item?.id?.toString(),\n                                    )?.title ?? ""\n                                );\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined ||\n                                option.id.toString() === value.toString()\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Category"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.category}\n                                    helperText={errors.category?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            </Box>\n        </Create>\n    );\n};\n\ninterface ICategory {\n    id: string;\n    title: string;\n}\n')),(0,o.kt)("p",null,"The use of ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," with ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/react-hook-form/useForm"},(0,o.kt)("inlineCode",{parentName:"a"},"useForm"))," is demonstrated in the code above. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useAutocomplete")," hook independently of the ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm"),"hook."),(0,o.kt)("div",{class:"img-container",style:{"max-width":"500px"}},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:l,alt:"Basic use of Autocomplete"})),(0,o.kt)("br",null),(0,o.kt)("div",{class:"img-container",style:{"max-width":"500px"}},(0,o.kt)("div",{class:"window"},(0,o.kt)("div",{class:"control red"}),(0,o.kt)("div",{class:"control orange"}),(0,o.kt)("div",{class:"control green"})),(0,o.kt)("img",{src:i,alt:"Search functionality"})),(0,o.kt)("br",null),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"By default, refine does the search using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useDelete"},(0,o.kt)("inlineCode",{parentName:"a"},"useList"))," hook and passes it to the search parameter. If you get a problem you should check your ",(0,o.kt)("inlineCode",{parentName:"p"},"getList")," function in your Data Provider. If you want to change this behavior to make client-side filtering, you can examine ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#search-as-you-type"},"this")," documentation."))),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("h3",{id:"resource"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n});\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"resource")," property determines API resource endpoint to fetch records from ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider")),". It returns properly configured ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," values for ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#main-content"},(0,o.kt)("inlineCode",{parentName:"a"},"<Autocomplete>"))," options."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#options-structure"},"Refer to Material UI ",(0,o.kt)("inlineCode",{parentName:"a"},"Autocomplete")," component documentation for detailed info for ",(0,o.kt)("inlineCode",{parentName:"a"},"options"),". ","\u2192")),(0,o.kt)("h3",{id:"defaultvalue"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultValue")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-next-line\n    defaultValue: "1",\n});\n')),(0,o.kt)("p",null,"Adds extra ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," to ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#main-content"},(0,o.kt)("inlineCode",{parentName:"a"},"<Autocomplete>"))," component. It uses ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useMany"},(0,o.kt)("inlineCode",{parentName:"a"},"useMany"))," so ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," can be an array of strings like follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'defaultValue: ["1", "2"],\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useMany"},"Refer to the ",(0,o.kt)("inlineCode",{parentName:"a"},"useMany")," documentation for detailed usage. ","\u2192")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Can use ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," property when edit a record in ",(0,o.kt)("inlineCode",{parentName:"p"},"<Edit>")," component."))),(0,o.kt)("h3",{id:"filters"},(0,o.kt)("inlineCode",{parentName:"h3"},"filters")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-start\n    filters: [\n        {\n            field: "isActive",\n            operator: "eq",\n            value: true,\n        },\n    ],\n    // highlight-end\n});\n')),(0,o.kt)("p",null,"It allows us to add some filters while fetching the data. For example, if you want to list only the active records."),(0,o.kt)("h3",{id:"sort"},(0,o.kt)("inlineCode",{parentName:"h3"},"sort")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-start\n    sort: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n    // highlight-end\n});\n')),(0,o.kt)("p",null,"It allows us to sort the ",(0,o.kt)("inlineCode",{parentName:"p"},"options"),". For example, if you want to sort your list according to ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," by ascending."),(0,o.kt)("h3",{id:"fetchsize"},(0,o.kt)("inlineCode",{parentName:"h3"},"fetchSize")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-next-line\n    fetchSize: 20,\n});\n')),(0,o.kt)("p",null,"Amount of records to fetch in the select box."),(0,o.kt)("h3",{id:"onsearch"},(0,o.kt)("inlineCode",{parentName:"h3"},"onSearch")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-start\n    onSearch: (value) => [\n        {\n            field: "title",\n            operator: "containss",\n            value,\n        },\n    ],\n    // highlight-end\n});\n')),(0,o.kt)("p",null,"If defined, it allows us to override the filters to use when fetching the list of records. Thus, it. It should return ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/interfaceReferences#crudfilters"},(0,o.kt)("inlineCode",{parentName:"a"},"CrudFilters")),"."),(0,o.kt)("h3",{id:"queryoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-start\n    queryOptions: {\n        onError: () => {\n            console.log("triggers when on query return Error");\n        },\n    },\n    // highlight-end\n});\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQuery"},"useQuery")," options can be set by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"queryOptions")," property."),(0,o.kt)("h3",{id:"defaultvaluequeryoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultValueQueryOptions")),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue")," property is given, the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/hooks/data/useMany"},(0,o.kt)("inlineCode",{parentName:"a"},"useMany"))," data hook is called for the selected records. With this property, you can change the options of this query. If not given, the values given in ",(0,o.kt)("inlineCode",{parentName:"p"},"queryOptions")," will be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { autocompleteProps } = useAutocomplete({\n    resource: "categories",\n    // highlight-start\n    defaultValueQueryOptions: {\n        onSuccess: (data) => {\n            console.log("triggers when on query return on success");\n        },\n    },\n    // highlight-end\n});\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQuery"},"useQuery")," options for default value query can be set by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"queryOptions")," property."),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resource ",(0,o.kt)("div",{className:"required"},"Required")),(0,o.kt)("td",{parentName:"tr",align:null},"Resource name for API data interactions"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,o.kt)("td",{parentName:"tr",align:null},"Adds extra ",(0,o.kt)("inlineCode",{parentName:"td"},"options")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"Array<string>")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"filters"),(0,o.kt)("td",{parentName:"tr",align:null},"Add filters while fetching the data"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudfilters"},(0,o.kt)("inlineCode",{parentName:"a"},"CrudFilters"))),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"sort"),(0,o.kt)("td",{parentName:"tr",align:null},"Allow us to sort the options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#crudsorting"},(0,o.kt)("inlineCode",{parentName:"a"},"CrudSorting"))),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"debounce"),(0,o.kt)("td",{parentName:"tr",align:null},"The number of milliseconds to delay"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},"300")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"queryOptions"),(0,o.kt)("td",{parentName:"tr",align:null},"react-query ",(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},"useQuery")," options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"}," UseQueryOptions<GetListResponse<TData>, TError>")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultValueQueryOptions"),(0,o.kt)("td",{parentName:"tr",align:null},"react-query ",(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},"useQuery")," options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"}," UseQueryOptions<GetManyResponse<TData>, TError>")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fetchSize"),(0,o.kt)("td",{parentName:"tr",align:null},"Amount of records to fetch in select box list."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onSearch"),(0,o.kt)("td",{parentName:"tr",align:null},"If defined, this callback allows us to override all filters for every search request."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(value: string) => CrudFilters "),"|",(0,o.kt)("inlineCode",{parentName:"td"}," Promise<CrudFilters>")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"metaData"),(0,o.kt)("td",{parentName:"tr",align:null},"Metadata query for ",(0,o.kt)("inlineCode",{parentName:"td"},"dataProvider")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#metadataquery"},(0,o.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,o.kt)("td",{parentName:"tr",align:null},"{}")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/providers/live-provider#usage-in-a-hook"},"liveMode")),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to update data automatically (",(0,o.kt)("inlineCode",{parentName:"td"},'"auto"'),") or not (",(0,o.kt)("inlineCode",{parentName:"td"},'"manual"'),') if a related live event is received. The "off" value is used to avoid creating a subscription.'),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#livemodeprops"},(0,o.kt)("inlineCode",{parentName:"a"},'"auto"')," ","|"," ",(0,o.kt)("inlineCode",{parentName:"a"},'"manual"')," ","|"," ",(0,o.kt)("inlineCode",{parentName:"a"},'"off"'))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"off"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"liveParams"),(0,o.kt)("td",{parentName:"tr",align:null},"Params to pass to ",(0,o.kt)("inlineCode",{parentName:"td"},"liveProvider"),"'s ",(0,o.kt)("inlineCode",{parentName:"td"},"subscribe")," method if ",(0,o.kt)("inlineCode",{parentName:"td"},"liveMode")," is enabled."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#livemodeprops"},(0,o.kt)("inlineCode",{parentName:"a"},"{ ids?: string[]; [key: string]: any; }"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onLiveEvent"),(0,o.kt)("td",{parentName:"tr",align:null},"Callback to handle all related live events of this hook."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/core/interfaceReferences#livemodeprops"},(0,o.kt)("inlineCode",{parentName:"a"},"(event: LiveEvent) => void"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"undefined"))))),(0,o.kt)("h3",{id:"return-values"},"Return values"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"autocompleteProps"),(0,o.kt)("td",{parentName:"tr",align:null},"Material UI Autocomplete props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#autocompletereturnvalues"},(0,o.kt)("inlineCode",{parentName:"a"},"AutoCompleteReturnValues")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,o.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"defaultValueQueryResult"),(0,o.kt)("td",{parentName:"tr",align:null},"Result of the query of a ",(0,o.kt)("inlineCode",{parentName:"td"},"defaultValue")," record"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,o.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))))),(0,o.kt)("br",null),(0,o.kt)("blockquote",null,(0,o.kt)("h4",{parentName:"blockquote",id:"autocompletereturnvalues"},"AutoCompleteReturnValues"),(0,o.kt)("table",{parentName:"blockquote"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},"Array of options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"TData"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loading"),(0,o.kt)("td",{parentName:"tr",align:null},"Loading state"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onInputChange"),(0,o.kt)("td",{parentName:"tr",align:null},"Callback fired when the input value changes"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(event: React.SyntheticEvent, value: string, reason: string) => void"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"filterOptions"),(0,o.kt)("td",{parentName:"tr",align:null},"Determines the filtered options to be rendered on search."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(options: TData, state: object) => TData")))))),(0,o.kt)("h2",{id:"live-codesandbox-example"},"Live Codesandbox Example"),(0,o.kt)("iframe",{src:"https://codesandbox.io/embed/github/pankod/refine/tree/master/examples/field/useSelect/mui?autoresize=1&fontsize=14&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-use-select-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}k.isMDXComponent=!0}}]);