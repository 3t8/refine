"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1477],{30010:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"customizable-issue-tracker-with-refine-and-supabase","metadata":{"permalink":"/blog/customizable-issue-tracker-with-refine-and-supabase","source":"@site/blog/2021-11-12-issue-tracker-refine.md","title":"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase","description":"This is my first post on Docusaurus 2.","date":"2021-11-12T00:00:00.000Z","formattedDate":"November 12, 2021","tags":[{"label":"refine","permalink":"/blog/tags/refine"},{"label":"supabase","permalink":"/blog/tags/supabase"},{"label":"react","permalink":"/blog/tags/react"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":17.63,"truncated":true,"authors":[{"name":"Melih Ekinci","title":"Frontend Developer","url":"https://github.com/mlhekinci","imageURL":"https://github.com/mlhekinci.png","key":"melih"}]},"content":"import start from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/start.png\';\\nimport login from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/login.gif\';\\nimport labelTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_table.png\';\\nimport common from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/common_table.png\';\\nimport userTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/user_table.png\';\\nimport taskTable from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_table.png\';\\nimport labelValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/label_value.png\';\\nimport priorityValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/priority_value.png\';\\nimport statusValue from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/status_value.png\';\\nimport list from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/list.png\';\\nimport taskList from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_list.png\';\\nimport create from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create.png\';\\nimport edit from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit.png\';\\nimport show from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/show.png\';\\nimport dashOverview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dash_overview.png\';\\nimport overview from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/overview-project.gif\';\\nimport filter from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/filter.gif\';\\nimport dashboard from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/dashboard.gif\';\\nimport taskTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/task_test.gif\';\\nimport createTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/create_test.gif\';\\nimport editTest from \'@site/static/img/blog/2021-11-12-issue-tracker-refine/edit_test.gif\';\\n\\n\\nIn this article, we will make a customizable internal issue tracker web application with supabase and refine.\\n\\n\x3c!--truncate--\x3e\\n\\nThis web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.\\n\\n\\nWe will use [Supabase](https://supabase.io/) in backend. Let\'s start by creating our Supabase account and tables.\\n\\n\\n## Create Supabase Database\\n\\nWe have to go to [Supabase](https://supabase.io/) and create an organization and database. Then we can start creating our tables.\\n\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={start} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nThe tables we need to create for our project are as follows:\\n\\n> label\\n* `id`: bigint\\n* `title`: varchar\\n* `color`: varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> priority \\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\n> status\\n* `id` bigint\\n* `title` varchar\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={common} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n> users\\n* `email` varchar\\n* `id` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={userTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n> tasks\\n* `id` bigint\\n* `title` varchar\\n* `description` varchar\\n* `start_time` date\\n* `end_time` date\\n* `label` bigint\\n* `priority` bigint\\n* `statuts` bigint\\n* `users` uuid\\n\\n<br />\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTable} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe created our database tables. The important part here is that as you can see, in our tasks table, label, priority, status and users values \u200b\u200bare defined as bigint. To summarize the reason for this, we relation the label, priority, status and users tables that we created above with the corresponding values \u200b\u200bin our tasks table.\\n\\n:::tip\\n  Add Foreign key relationships steps:\\n\\n1. Got to a table, right click the column you wish to add a foreign key for\\n\\n2. Select \'edit column\'\\n\\n3. Select \'Add foreign key relation\'\\n\\n4. Select the table and column to make a foreign key for\\n\\n5. Click save\\n:::\\n\\n\\nSo we can take  reference their id and use their value in our tasks table.\\n\\nNow let\'s go to the Supabase Table editor and create our constant values.\\n\\n`Label Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={labelValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Priority Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={priorityValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n \\n`Status Table`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={statusValue} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nLet\'s create a test task to better understand key relation. \\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, since we have defined the ids of our label, status, priority and users tables as references to our tasks table, we can now use their values.\\n\\nLet\'s look at how we can use this data we created on the Supabase side with refine .\\n\\n## Refine Project Setup\\n\\nNow let\'s refine the task-manager panel. With superplate, we can quickly create a refine project\\n\\n```bash\\n  npx superplate-cli refine-task-manager\\n```\\n\\n```bash\\n\u2714 Select your project type \u203a refine\\n\u2714 What will be the name of your app \xb7 refine-task-manager\\n\u2714 Package manager: \xb7 npm\\n\u2714 Do you want to customize theme?: \xb7 css\\n\u2714 Data Provider: \xb7 supabase-data-provider\\n\u2714 Do you want to customize layout? \xb7 custom-layout\\n\u2714 i18n - Internationalization: \xb7 no\\n```\\n\\nAfter the project setup is loaded, let\'s start by entering our project and making the necessary changes.\\n\\nLet\'s add our supabase url and key to our refine project.\\n\\n\\n```ts title=\\"src/utility/supabaseClient.ts\\"\\nimport { createClient } from \\"@pankod/refine-supabase\\";\\n\\nconst SUPABASE_URL = \\"YOUR_SUPABASE_URL\\";\\nconst SUPABASE_KEY = \\"YOUR_SUPABASE_API_KEY\\";\\n\\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\\n```\\n\\nNow we can access and list the tables we created via the supabase.\\n\\n- Add custom login and signup page in App.tsx\\n\\nOur purpose here is to log in if there is a registered user in the supabase. If you do not have a registered user, saving a user to the supabase with refine.\\n \\n## Custom Login Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useLogin,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\n\\nimport \\"./styles.css\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ILoginForm {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Login: React.FC = () => {\\n  const [form] = Form.useForm<ILoginForm>();\\n\\n  const { mutate: login } = useLogin<ILoginForm>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign in your account\\n    </Title>\\n  );\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ILoginForm>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  login(values);\\n                }}\\n                 initialValues={{\\n                  email: \\"info@refine.dev\\",\\n                  password: \\"refine-supabase\\",\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button type=\\"primary\\" size=\\"large\\" htmlType=\\"submit\\" block>\\n                  Sign in\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 8 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\", marginLeft:  12 }}\\n                    onClick={() => push(\\"signup\\")}\\n                  >\\n                    Sign up\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n## Custom Signup Page\\n\\n```tsx\\nimport React from \\"react\\";\\nimport {\\n  Row,\\n  Col,\\n  AntdLayout,\\n  Card,\\n  Typography,\\n  Form,\\n  Input,\\n  Button,\\n  useNavigation,\\n} from \\"@pankod/refine\\";\\nimport \\"./styles.css\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nconst { Text, Title } = Typography;\\n\\nexport interface ISignup {\\n  email: string;\\n  password: string;\\n}\\n\\nexport const Signup: React.FC = () => {\\n  const [form] = Form.useForm<ISignup>();\\n  const { push } = useNavigation();\\n\\n  const CardTitle = (\\n    <Title level={3} className=\\"title\\">\\n      Sign Up\\n    </Title>\\n  );\\n\\n  const signup = async (email: string, password: string) => {\\n    const { error } = await supabaseClient.auth.signUp({\\n      email,\\n      password,\\n    });\\n\\n    if (error) {\\n      return Promise.reject(error);\\n    }\\n  };\\n\\n  return (\\n    <AntdLayout className=\\"layout\\">\\n      <Row\\n        justify=\\"center\\"\\n        align=\\"middle\\"\\n        style={{\\n          height: \\"100vh\\",\\n        }}\\n      >\\n        <Col xs={22}>\\n          <div className=\\"container\\">\\n            <div className=\\"imageContainer\\">\\n              <img src=\\"./refine.svg\\" alt=\\"Refine Logo\\" />\\n            </div>\\n            <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\\n              <Form<ISignup>\\n                layout=\\"vertical\\"\\n                form={form}\\n                onFinish={(values) => {\\n                  signup(values.email, values.password);\\n                  push(\\"login\\");\\n                }}\\n              >\\n                <Form.Item\\n                  name=\\"email\\"\\n                  label=\\"Email\\"\\n                  rules={[{ required: true, type: \\"email\\" }]}\\n                >\\n                  <Input size=\\"large\\" placeholder=\\"Email\\" />\\n                </Form.Item>\\n                <Form.Item\\n                  name=\\"password\\"\\n                  label=\\"Password\\"\\n                  rules={[{ required: true }]}\\n                  style={{ marginBottom: \\"12px\\" }}\\n                >\\n                  <Input type=\\"password\\" placeholder=\\"\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\\" size=\\"large\\" />\\n                </Form.Item>\\n                <Button\\n                  type=\\"primary\\"\\n                  size=\\"large\\"\\n                  htmlType=\\"submit\\"\\n                  block\\n                  style={{ marginTop: 24 }}\\n                >\\n                  Create Account\\n                </Button>\\n              </Form>\\n              <div style={{ marginTop: 16 }}>\\n                <Text style={{ fontSize: 12 }}>\\n                  Don\u2019t have an account?\\n                  <a\\n                    href=\\"#\\"\\n                    style={{ fontWeight: \\"bold\\" }}\\n                    onClick={() => push(\\"login\\")}\\n                  >\\n                    Sign in\\n                  </a>\\n                </Text>\\n              </div>\\n            </Card>\\n          </div>\\n        </Col>\\n      </Row>\\n    </AntdLayout>\\n  );\\n};\\n\\n```\\n\\n```tsx title=\\"App.tsx\\"\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\n\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n    />\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nHere we define our login and signup pages. We then use the refine\'s [router-provider](https://refine.dev/docs/next/api-references/providers/router-provider/) and [useNavigaton](https://refine.dev/docs/next/api-references/hooks/navigation/useNavigation/) hooks to switch between login and signup.\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={login} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nWe can now create supabase users and log in from our refine interface.\\n \\n## Add Resource\\n**Adding resources according to the table name we created in Supabase**\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\"\\n        },\\n        {\\n          name: \\"tasks\\"\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={list} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\nWe can now create lists of tasks and make changes to them.\\n\\n## Add List and Filter \\n\\n```tsx title=\\"src/pages/task/list.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  useTable,\\n  useMany,\\n  List,\\n  Table,\\n  TextField,\\n  TagField,\\n  DateField,\\n  Space,\\n  ShowButton,\\n  EditButton,\\n  DeleteButton,\\n  IResourceComponentsProps,\\n  HttpError,\\n  CrudFilters,\\n  Row,\\n  Col,\\n  Card,\\n} from \\"@pankod/refine\\";\\n\\nimport {\\n  ILabel,\\n  IPriority,\\n  ITask,\\n  ITaskFilterVariables,\\n  IStatus,\\n  IAuthUser,\\n} from \\"interfaces\\";\\n\\nimport { Filter } from \\"../task\\";\\n\\nexport const TaskList: React.FC<IResourceComponentsProps> = () => {\\n  const { tableProps, searchFormProps } = useTable<\\n    ITask,\\n    HttpError,\\n    ITaskFilterVariables\\n  >({\\n    onSearch: (params) => {\\n      const filters: CrudFilters = [];\\n      const { title, label, priority, users, status, start_time, end_time } =\\n        params;\\n\\n      filters.push(\\n        {\\n          field: \\"title\\",\\n          operator: \\"eq\\",\\n          value: title,\\n        },\\n\\n        {\\n          field: \\"label\\",\\n          operator: \\"eq\\",\\n          value: label,\\n        },\\n\\n        {\\n          field: \\"priority\\",\\n          operator: \\"eq\\",\\n          value: priority,\\n        },\\n\\n        {\\n          field: \\"users\\",\\n          operator: \\"eq\\",\\n          value: users,\\n        },\\n\\n        {\\n          field: \\"status\\",\\n          operator: \\"eq\\",\\n          value: status,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"gte\\",\\n          value: start_time ? start_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"start_time\\",\\n          operator: \\"lte\\",\\n          value: start_time ? start_time[1].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"gte\\",\\n          value: end_time ? end_time[0].toISOString() : undefined,\\n        },\\n\\n        {\\n          field: \\"end_time\\",\\n          operator: \\"lte\\",\\n          value: end_time ? end_time[1].toISOString() : undefined,\\n        }\\n      );\\n      return filters;\\n    },\\n  });\\n\\n  const labelIds = tableProps?.dataSource?.map((item) => item.label) ?? [];\\n  const priorityIds = tableProps?.dataSource?.map((item) => item.priority) ?? [];\\n  const assignedIds = tableProps?.dataSource?.map((item) => item.users) ?? [];\\n  const statusIds = tableProps?.dataSource?.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds,\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds,\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds,\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds,\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col lg={6} xs={24}>\\n        <Card title=\\"Task Filter\\">\\n          <Filter formProps={searchFormProps} />\\n        </Card>\\n      </Col>\\n      <Col lg={18} xs={24}>\\n        <List>\\n          <Table {...tableProps} rowKey=\\"id\\">\\n            <Table.Column dataIndex=\\"title\\" title=\\"Title\\" />\\n            <Table.Column\\n              dataIndex=\\"label\\"\\n              title=\\"Label\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    color={\\n                      labels?.data.find((item) => item.id === value)?.color\\n                    }\\n                    value={\\n                      labels?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"priority\\"\\n              title=\\"Priority\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      priority?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"users\\"\\n              title=\\"Assigned\\"\\n              render={(value) => {\\n                return (\\n                  <TagField\\n                    value={\\n                      assigned?.data.find((item) => item.id === value)?.email\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"status\\"\\n              title=\\"Status\\"\\n              render={(value) => {\\n                return (\\n                  <TextField\\n                    value={\\n                      status?.data.find((item) => item.id === value)?.title\\n                    }\\n                  />\\n                );\\n              }}\\n            />\\n            <Table.Column\\n              dataIndex=\\"start_time\\"\\n              title=\\"Start Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column\\n              dataIndex=\\"end_time\\"\\n              title=\\"Due Date\\"\\n              render={(value) => (\\n                <DateField format=\\"DD/MM/YYYY\\" value={value} />\\n              )}\\n            />\\n            <Table.Column<ITask>\\n              title=\\"Actions\\"\\n              dataIndex=\\"actions\\"\\n              render={(_, record): React.ReactNode => {\\n                return (\\n                  <Space>\\n                    <ShowButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <EditButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                    <DeleteButton\\n                      size=\\"small\\"\\n                      recordItemId={record.id}\\n                      hideText\\n                    />\\n                  </Space>\\n                );\\n              }}\\n            />\\n          </Table>\\n        </List>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n\\n```tsx title=\\"src/pages/task/filter.tsx\\"\\nimport React from \\"react\\";\\nimport {\\n  Form,\\n  FormProps,\\n  Input,\\n  useSelect,\\n  Select,\\n  DatePicker,\\n  Icons,\\n  Button,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { RangePicker } = DatePicker\\n\\nexport const Filter: React.FC<{ formProps: FormProps }> = ({ formProps }) => {\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  return (\\n    <Form layout=\\"vertical\\" {...formProps}>\\n      <Form.Item label=\\"Search\\" name=\\"title\\">\\n        <Input\\n          placeholder=\\"Title\\"\\n          prefix={<Icons.SearchOutlined />}\\n        />\\n      </Form.Item>\\n      <Form.Item label=\\"Label\\" name=\\"label\\">\\n        <Select {...labelSelectProps} allowClear placeholder=\\"Seach Label\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n        <Select {...priorityProps} allowClear placeholder=\\"Seach Priority\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Status\\" name=\\"status\\">\\n        <Select {...statusProps} allowClear placeholder=\\"Search Status\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Assigned\\" name=\\"users\\">\\n        <Select {...assigneProps} allowClear placeholder=\\"Search Assignee\\" />\\n      </Form.Item>\\n      <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n        <RangePicker />\\n      </Form.Item>\\n      <Form.Item>\\n        <Button htmlType=\\"submit\\" type=\\"primary\\">\\n          Filter\\n        </Button>\\n      </Form.Item>\\n    </Form>\\n  );\\n};\\n```\\n\\n```ts title=\\"src/interfaces\\"\\nexport interface IAuthUser {\\n  id: string;\\n  email: string;\\n}\\n\\nexport interface ILabel {\\n  id: string;\\n  title: string;\\n  color: string;\\n}\\n\\nexport interface IPriority {\\n  id: string;\\n  title: string;\\n}\\n\\nexport interface IStatus {\\n  id: string;\\n  title: string\\n}\\n\\nexport interface ITask {\\n  id: string;\\n  title: string;\\n  description: string;\\n  start_time: string;\\n  end_time: string;\\n  label: string;\\n  priority: string;\\n  status: string;\\n  users: string\\n}\\n\\nexport interface ITaskFilterVariables {\\n  title: string;\\n  label: string;\\n  priority: string;\\n  users: string;\\n  status: string;\\n  start_time: [Dayjs, Dayjs];\\n  end_time: [Dayjs, Dayjs];\\n}\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={taskList} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n Using refine\'s [tableSearch](https://refine.dev/docs/guides-and-concepts/search/table-search) and list, we can create our list and perform filtering. \\n\\nAs seen in the example, we listed and showed the task table we created in supabase with refine. Now you can make changes as you want with refine.\\n\\nNow how do we create task? Let\'s examine how we can edit them and see their details.\\n\\n## Create Task\\n\\n```tsx title=\\"src/pages/task/create.tsx\\"\\nimport {\\n  useForm,\\n  Create,\\n  Form,\\n  Input,\\n  Select,\\n  useSelect,\\n  IResourceComponentsProps,\\n  DatePicker,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const TaskCreate: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ILabel>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: prioritySelectPorps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneSelectProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusSelectProps } = useSelect<IStatus>({\\n    resource: \\"status\\"\\n  })\\n\\n  return (\\n    <Create saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item\\n          label=\\"Title\\"\\n          name=\\"title\\"\\n          rules={[\\n            {\\n              required: true,\\n            },\\n          ]}\\n        >\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...prioritySelectPorps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne To\\" name=\\"users\\">\\n          <Select {...assigneSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Select Status\\" name=\\"status\\">\\n          <Select {...statusSelectProps}/>\\n        </Form.Item>\\n        <Form.Item label=\\"Start Date\\" name=\\"start_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n        <Form.Item label=\\"Due Date\\" name=\\"end_time\\">\\n          <DatePicker style={{ width: \\"50%\\" }} />\\n        </Form.Item>\\n      </Form>\\n    </Create>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={createTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n\\n## Edit Task\\n\\n```tsx title=\\"src/pages/task/edit.tsx\\"\\nimport {\\n  useForm,\\n  Form,\\n  Input,\\n  Select,\\n  Edit,\\n  useSelect,\\n  IResourceComponentsProps,\\n} from \\"@pankod/refine\\";\\n\\nimport { ITask, IPriority,  IStatus, IAuthUser } from \\"interfaces\\";\\n\\nexport const EditTask: React.FC<IResourceComponentsProps> = () => {\\n  const { formProps, saveButtonProps } = useForm<ITask>();\\n\\n  const { selectProps: labelSelectProps } = useSelect<ITask>({\\n    resource: \\"label\\",\\n  });\\n\\n  const { selectProps: priorityProps } = useSelect<IPriority>({\\n    resource: \\"priority\\",\\n  });\\n\\n  const { selectProps: assigneProps } = useSelect<IAuthUser>({\\n    resource: \\"users\\",\\n    optionValue: \\"id\\",\\n    optionLabel: \\"email\\",\\n  });\\n\\n  const { selectProps: statusProps } = useSelect<IStatus>({\\n    resource: \\"status\\",\\n  });\\n\\n  return (\\n    <Edit saveButtonProps={saveButtonProps}>\\n      <Form {...formProps} wrapperCol={{ span: 12 }} layout=\\"vertical\\">\\n        <Form.Item label=\\"Title\\" name=\\"title\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Description\\" name=\\"description\\">\\n          <Input />\\n        </Form.Item>\\n        <Form.Item label=\\"Label\\" name=\\"label\\">\\n          <Select {...labelSelectProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Priority\\" name=\\"priority\\">\\n          <Select {...priorityProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Status\\" name=\\"status\\">\\n          <Select {...statusProps} />\\n        </Form.Item>\\n        <Form.Item label=\\"Assigne\\" name=\\"users\\">\\n          <Select {...assigneProps} />\\n        </Form.Item>\\n      </Form>\\n    </Edit>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={editTest} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n## Show Task\\n\\n```tsx title=\\"src/pages/task/show\\"\\nimport { useShow, Show, Typography, Tag, useOne, DateField } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\n\\nconst { Title, Text } = Typography;\\n\\nexport const TaskShow: React.FC = () => {\\n  const { queryResult } = useShow<ITask>();\\n  const { data, isLoading } = queryResult;\\n  const record = data?.data;\\n\\n  const { data: assigned } = useOne<IAuthUser>({\\n    resource: \\"users\\",\\n    id: record?.users || \\"\\",\\n  });\\n\\n  const { data: label } = useOne<ILabel>({\\n    resource: \\"label\\",\\n    id: record?.label || \\"\\",\\n  });\\n\\n  const { data: priority } = useOne<IPriority>({\\n    resource: \\"priority\\",\\n    id: record?.priority || \\"\\",\\n  });\\n\\n  const { data: status } = useOne<IStatus>({\\n    resource: \\"status\\",\\n    id: record?.status || \\"\\",\\n  });\\n\\n  return (\\n    <Show isLoading={isLoading}>\\n      <Title level={5}>Task:</Title>\\n      <Text>{record?.title || \\"-\\"}</Text>\\n\\n      <Title level={5}>Task Desciption:</Title>\\n      <Text>{record?.description}</Text>\\n\\n      <Title level={5}>Assigned To:</Title>\\n      <Text>\\n        <Tag>{assigned?.data?.email ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Label:</Title>\\n      <Text>\\n        <Tag>{label?.data?.title ?? \\"-\\"}</Tag>\\n      </Text>\\n\\n      <Title level={5}>Priority:</Title>\\n      <Text>{priority?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Status:</Title>\\n      <Text>{status?.data?.title ?? \\"-\\"}</Text>\\n\\n      <Title level={5}>Start Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.start_time ?? \\"-\\"}/>\\n\\n      <Title level={5}>Due Date:</Title>\\n      <DateField format=\\"DD/MM/YYYY\\" value={record?.end_time ?? \\"-\\"}/>\\n    </Show>\\n  );\\n};\\n```\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={show} alt=\\"overview\\" />\\n</div>\\n<br />\\n \\n\\nBy using Refine\'s basic views such as [create](https://refine.dev/docs/api-references/components/basic-views/create), [edit](https://refine.dev/docs/api-references/components/basic-views/edit/) and [show](https://refine.dev/docs/api-references/components/basic-views/show/), we can now create tasks, edit these tasks and view their details.\\n\\n\\nLet\'s see how to add a dashboard page to our project together.\\n\\n## Add Custom Chart \\n\\n```tsx title=\\"src/components/task/pie.tsx\\"\\nimport React from \\"react\\";\\nimport { Pie } from \\"@ant-design/charts\\";\\n\\ninterface ChartProps {\\n  data: {\\n    type: any;\\n    value: any;\\n  }[];\\n}\\n\\nexport const TaskChart: React.FC<ChartProps> = ({ data }) => {\\n  var config = {\\n    data: data,\\n    angleField: \\"value\\",\\n    colorField: \\"type\\",\\n    radius: 0.9,\\n    label: {\\n      type: \\"inner\\",\\n      offset: \\"-30%\\",\\n      content: function content(_ref: any) {\\n        var percent = _ref.percent;\\n        return \\"\\".concat((percent * 100).toFixed(0), \\"%\\");\\n      },\\n      style: {\\n        fontSize: 14,\\n        textAlign: \\"center\\",\\n      },\\n    },\\n    interactions: [{ type: \\"element-active\\" }],\\n  };\\n  return <Pie {...config} />;\\n};\\n```\\n\\n```tsx title=\\"src/pages/dashboard/index.tsx\\"\\nimport React from \\"react\\";\\nimport { useList, useMany, Row, Col, Card } from \\"@pankod/refine\\";\\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from \\"interfaces\\";\\nimport { TaskChart } from \\"components/task/pie\\";\\nimport { groupBy } from \\"helper\\";\\n\\nexport const Dashboard = () => {\\n  const taskList = useList<ITask>({\\n    resource: \\"tasks\\",\\n  });\\n\\n  const labelIds = taskList.data?.data.map((item) => item.label) ?? [];\\n  const priorityIds = taskList.data?.data.map((item) => item.priority) ?? [];\\n  const assignedIds = taskList.data?.data.map((item) => item.users) ?? [];\\n  const statusIds = taskList.data?.data.map((item) => item.status) ?? [];\\n\\n  const { data: labels } = useMany<ILabel>({\\n    resource: \\"label\\",\\n    ids: labelIds || [],\\n  });\\n\\n  const { data: priority } = useMany<IPriority>({\\n    resource: \\"priority\\",\\n    ids: priorityIds || [],\\n  });\\n\\n  const { data: assigned } = useMany<IAuthUser>({\\n    resource: \\"users\\",\\n    ids: assignedIds || [],\\n  });\\n\\n  const { data: status } = useMany<IStatus>({\\n    resource: \\"status\\",\\n    ids: statusIds || [],\\n  });\\n\\n  return (\\n    <Row gutter={[16, 16]}>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              labels?.data.map((i) => {\\n                return { type: i.title, value: groupBy(labelIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              priority?.data.map((i) => {\\n                return { type: i.title, value: groupBy(priorityIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              status?.data.map((i) => {\\n                return { type: i.title, value: groupBy(statusIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n      <Col xl={7} lg={12} md={24} sm={24} xs={24}>\\n        <Card>\\n          <TaskChart\\n            data={\\n              assigned?.data.map((i) => {\\n                return { type: i.email, value: groupBy(assignedIds)[i.id] };\\n              }) ?? []\\n            }\\n          />\\n        </Card>\\n      </Col>\\n    </Row>\\n  );\\n};\\n```\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashOverview} alt=\\"overview\\" />\\n</div>\\n<br/>\\n\\n\\n \\nFinal version of our `<App.tsx/>`.\\n\\n```tsx\\nimport { Refine } from \\"@pankod/refine\\";\\nimport routerProvider from \\"@pankod/refine-react-router\\";\\nimport { dataProvider } from \\"@pankod/refine-supabase\\";\\nimport authProvider from \\"./authProvider\\";\\nimport { supabaseClient } from \\"utility\\";\\n\\nimport \\"@pankod/refine/dist/styles.min.css\\";\\n\\nimport { Login } from \\"./pages/login\\";\\nimport { Signup } from \\"./pages/signup\\";\\n\\nfunction App() {\\n  return (\\n    <Refine\\n      dataProvider={dataProvider(supabaseClient)}\\n      authProvider={authProvider}\\n      DashboardPage={Dashboard}\\n      LoginPage={Login}\\n      routerProvider={{\\n        ...routerProvider,\\n        routes: [\\n          {\\n            exact: true,\\n            component: Signup,\\n            path: \\"/signup\\",\\n          },\\n        ] as typeof routerProvider.routes,\\n      }}\\n      resources={[\\n        {\\n          name: \\"users\\",\\n          list: UserList,\\n        },\\n        {\\n          name: \\"tasks\\",\\n          list: TaskList,\\n          edit: EditTask,\\n          create: TaskCreate,\\n          show: TaskShow,\\n        },\\n      ]}\\n    />\\n  );\\n}\\n```\\n\\nOur project is done. Lets see how its look like.\\n\\n## Overview Project\\n\\n`Overview`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={overview} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Task Filter`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={filter} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\n`Dashboard Page`\\n\\n<div class=\\"img-container\\">\\n    <div class=\\"window\\">\\n        <div class=\\"control red\\"></div>\\n        <div class=\\"control orange\\"></div>\\n        <div class=\\"control green\\"></div>\\n    </div>\\n    <img src={dashboard} alt=\\"overview\\" />\\n</div>\\n<br />\\n\\nAs you can see, we made a simple and short task manager application using refine on our front end and using its data-provider. \\n\\n[Here is repo](https://github.com/mlhekinci/refine-supabase-manage-task) \\n\\nFor more information about Refine: [Refine Github Page](https://github.com/pankod/refine)\\n\\nFor other examples and articles that will interest you with refine:  [https://refine.dev/blog/](https://refine.dev/blog/)\\n\\n## Live Codesandbox Example\\n\\n<iframe src=\\"https://codesandbox.io/embed/refine-supabase-issue-tracker-ifuh4?autoresize=1fontsize=14&=1&theme=dark&view=preview\\"\\n     style={{width: \\"100%\\", height:\\"80vh\\", border: \\"0px\\", borderRadius: \\"8px\\", overflow:\\"hidden\\"}}\\n     title=\\"refine-supabase-issue-tracker\\"\\n     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"\\n     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"\\n></iframe>"}]}')}}]);